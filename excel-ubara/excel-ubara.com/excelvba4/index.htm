<!DOCTYPE html>
<html lang="ja">
<head>
  <script data-ad-client="ca-pub-6511020045004282" async src="../../pagead2.googlesyndication.com/pagead/js/adsbygoogle.js" tppabs="https://pagead2.googlesyndication.com/pagead/js/adsbygoogle.js"></script>
  <script async src="../../pagead2.googlesyndication.com/pagead/js/adsbygoogle.js" tppabs="https://pagead2.googlesyndication.com/pagead/js/adsbygoogle.js"></script>
  <script>
    (adsbygoogle = window.adsbygoogle || []).push({
      google_ad_client: "ca-pub-6511020045004282",
      enable_page_level_ads: true
    });
  </script>

  <meta charset="UTF-8">
  <meta http-equiv="X-UA-Compatible" content="IE=edge">
  <title>VBA技術解説：マクロで良くある問題や使い方を解説｜エクセルの神髄</title>
  <meta name="viewport" content="width=device-width, initial-scale=1">
  <meta name="description" content="ExcelマクロVBAの、良くある問題や少々難度の高い使い方等に対する技術的解説です。掲載しているVBAコードは解説用のコードとなっていますので、適宜変更してお使いください。そのまま使えるサンプル集は、マクロVBAサンプル集をお探しください。">
  <meta name="keywords" content="VBA,技術解説,で良くある問題や使い方を解説,エクセル,Excel,マクロ">
  <link rel="icon" type="image/x-icon" href="../images/favicon_excel.png">
  <link rel="stylesheet" href="../css/style.css-20210304.css" tppabs="https://excel-ubara.com/css/style.css?20210304">
  <link rel="stylesheet" href="../css/slide.css-20210304.css" tppabs="https://excel-ubara.com/css/slide.css?20210304">
  <link rel="canonical" href="https://excel-ubara.com/excelvba4/" />
  <meta property="og:type" content="article" />
  <meta property="og:title" content="VBA技術解説：マクロで良くある問題や使い方を解説｜エクセルの神髄" />
  <meta property="og:description" content="ExcelマクロVBAの、良くある問題や少々難度の高い使い方等に対する技術的解説です。掲載しているVBAコードは解説用のコードとなっていますので、適宜変更してお使いください。そのまま使えるサンプル集は、マクロVBAサンプル集をお探しください。" />
  <meta property="og:image" content="https://excel-ubara.com/ogp.jpg" />
  <meta property="og:url" content="https://excel-ubara.com/excelvba4/" />
  <meta property="og:site_name" content="エクセルの神髄" />
  <meta name="twitter:card" content="summary" />
  <meta name="twitter:title" content="VBA技術解説：マクロで良くある問題や使い方を解説｜エクセルの神髄" />
  <meta name="twitter:description" content="ExcelマクロVBAの、良くある問題や少々難度の高い使い方等に対する技術的解説です。掲載しているVBAコードは解説用のコードとなっていますので、適宜変更してお使いください。そのまま使えるサンプル集は、マクロVBAサンプル集をお探しください。" />
  <meta name="twitter:image" content="https://excel-ubara.com/ogp.jpg" />
  <meta name="twitter:site" content="@yamaoka_ss" />
  <script src="../../code.jquery.com/jquery-3.3.1.min.js" tppabs="https://code.jquery.com/jquery-3.3.1.min.js" async></script>
  <script type="text/javascript" src="../js/fix.js" tppabs="https://excel-ubara.com/js/fix.js" async></script>
  <script type="text/javascript" src="../js/fixmenu_pagetop.js-20210304" tppabs="https://excel-ubara.com/js/fixmenu_pagetop.js?20210304" async></script>
  <script type="text/javascript" src="../js/CopyDisp.js-20210304" tppabs="https://excel-ubara.com/js/CopyDisp.js?20210304" async></script>
</head>

<body class="c2">
  <header>
    <div class="inner">
      <p id="logo"><a href="../index.htm" tppabs="https://excel-ubara.com/"><img src="../images/logo.png" tppabs="https://excel-ubara.com/images/logo.png" alt="エクセルの神髄"></a></p>
      <div id="contact">
        <h1>エクセルの神髄<br>VBA技術解説：マクロで良くある問題や使い方を解説</h1>ExcelマクロVBAの問題点と解決策、VBAの技術的解説
      </div>
    </div>
  </header>

  <!--PC用（801px以上端末）メニュー-->
  <nav id="dropmenu">
    <ul class="inner">
      <li><a href="../excel_index.html" tppabs="https://excel-ubara.com/excel_index.html">Excel全般<span>Excel</span></a>
        <ul>
          <li><A href="../excel1/index.htm" tppabs="https://excel-ubara.com/excel1/">エクセル入門</A></li>
          <li><A href="../excel2/index.htm" tppabs="https://excel-ubara.com/excel2/">エクセル基本操作</A></li>
          <li><A href="../excel3/index.htm" tppabs="https://excel-ubara.com/excel3/">エクセル関数応用</A></li>
          <li><A href="../excel4/index.htm" tppabs="https://excel-ubara.com/excel4/">エクセル挑戦問題</A></li>
          <li><A href="../EXCEL/excel_reference.html" tppabs="https://excel-ubara.com/EXCEL/excel_reference.html">Excelリファレンス</A></li>
          <li><A href="../excel5/index.htm" tppabs="https://excel-ubara.com/excel5/">エクセル雑感</A></li>
        </ul>
      </li>
      <li><a href="../excel_vba1.html" tppabs="https://excel-ubara.com/excel_vba1.html">マクロVBA入門編<span>VBA Beginner</span></a>
        <ul>
          <li><a href="../excelvba1/index.htm" tppabs="https://excel-ubara.com/excelvba1/">マクロVBA入門</a></li>
          <li><a href="../excelvba1r/index.htm" tppabs="https://excel-ubara.com/excelvba1r/">マクロVBA再入門</a></li>
          <li><a href="../excelvba2/index.htm" tppabs="https://excel-ubara.com/excelvba2/">マクロ記録でVBA</a></li>
          <li><a href="../excelvba9/index.htm" tppabs="https://excel-ubara.com/excelvba9/">マクロVBA練習問題</a></li>
          <li><a href="../MOS_VBA/index.htm" tppabs="https://excel-ubara.com/MOS_VBA/">VBAエキスパート対策</a></li>
          <li><A href="../excelvba8/index.htm" tppabs="https://excel-ubara.com/excelvba8/">マクロVBA関数</A></li>
          <li><A href="../vba100/index.htm" tppabs="https://excel-ubara.com/vba100/">VBA100本ノック</A></li>
        </ul>
      </li>
      <li><a href="../excel_vba2.html" tppabs="https://excel-ubara.com/excel_vba2.html">マクロVBA応用編<span>VBA Advanced</span></a>
        <ul>
          <li><A href="../excelvba3/index.htm" tppabs="https://excel-ubara.com/excelvba3/">ユーザーフォーム入門</A></li>
          <li><A href="../vba_class/index.htm" tppabs="https://excel-ubara.com/vba_class/">VBAクラス入門</A></li>
          <li><A href="../excelvba5/index.htm" tppabs="https://excel-ubara.com/excelvba5/">マクロVBAサンプル集</A></li>
          <li><A href="index.htm" tppabs="https://excel-ubara.com/excelvba4/">マクロVBA技術解説</A></li>
          <li><A href="../excelvba7/index.htm" tppabs="https://excel-ubara.com/excelvba7/">エクセル顧客管理</A></li>
          <li><A href="../EXCEL/vba_reference.html" tppabs="https://excel-ubara.com/EXCEL/vba_reference.html">VBAリファレンス</A></li>
        </ul>
      </li>
      <li><a href="../excel_other.html" tppabs="https://excel-ubara.com/excel_other.html">その他（Excel以外）<span>Other than Excel</span></a>
        <ul>
          <li><A href="../python/index.htm" tppabs="https://excel-ubara.com/python/">Python入門</A></li>
          <li><A href="../vba_sql/index.htm" tppabs="https://excel-ubara.com/vba_sql/">SQL入門</A></li>
          <li><A href="../spreadsheet1/index.htm" tppabs="https://excel-ubara.com/spreadsheet1/">スプレッドシート入門</A></li>
          <li><A href="../apps_script1/index.htm" tppabs="https://excel-ubara.com/apps_script1/">GAS入門</A></li>
        </ul>
      </li>
      <li><a href="../siteguide.html" tppabs="https://excel-ubara.com/siteguide.html">サイト案内<span>site map</span></a>
        <ul>
          <li><A href="../EXCELNEW.html" tppabs="https://excel-ubara.com/EXCELNEW.html">新着記事一覧</A></li>
          <li><A href="../EXCELRANK.html" tppabs="https://excel-ubara.com/EXCELRANK.html">アクセスランキング</A></li>
          <li><A href="../sitemap.html" tppabs="https://excel-ubara.com/sitemap.html">サイトマップ&nbsp;&nbsp;</A></li>
          <li><a href="../business/index.htm" tppabs="https://excel-ubara.com/business/">旧トップページ&nbsp;&nbsp;</a></li>
          <li><A href="../query.html" tppabs="https://excel-ubara.com/query.html">お問い合わせ&nbsp;&nbsp;</A></li>
        </ul>
      </li>
    </ul>
  </nav>

  <div id="pan"><ul itemscope itemtype="http://schema.org/BreadcrumbList">
<li itemprop="itemListElement" itemscope itemtype="http://schema.org/ListItem">
<a itemprop="item" href="../index.htm" tppabs="https://excel-ubara.com/">
<span itemprop="name">ホーム</span></a>
<meta itemprop="position" content="1" />
</li>
<li itemprop="itemListElement" itemscope itemtype="http://schema.org/ListItem">
<a itemprop="item" href="../excel_vba2.html" tppabs="https://excel-ubara.com/excel_vba2.html">
<span itemprop="name">マクロVBA応用編</span></a>
<meta itemprop="position" content="2" />
</li>
<li itemprop="itemListElement" itemscope itemtype="http://schema.org/ListItem">
<a itemprop="item" href="index.htm" tppabs="https://excel-ubara.com/excelvba4/">
<span itemprop="name">VBA技術解説：マクロで良くある問題や使い方を解説</span></a>
<meta itemprop="position" content="3" />
</li>
</ul></div>
  <div class="ads1">
    <center>
    <script async src="../../pagead2.googlesyndication.com/pagead/js/adsbygoogle.js" tppabs="https://pagead2.googlesyndication.com/pagead/js/adsbygoogle.js"></script>
    <!-- yama21 -->
    <ins class="adsbygoogle"
        style="display:block"
        data-ad-client="ca-pub-6511020045004282"
        data-ad-slot="1104944574"
        data-ad-format="auto"
        data-full-width-responsive="true"></ins>
    <script>
        (adsbygoogle = window.adsbygoogle || []).push({});
    </script>
    </center>
  </div>

  <div id="contents" class="inner">
    <div id="contents-in">
      <div id="main">
        <section>
          <span style="line-height:20px;float:right" align="right">最終更新日：2021-02-02</span>
<h2 align="center">VBA技術解説：マクロで良くある問題や使い方を解説</h2><p><br>
ExcelマクロVBAの、良くある問題や少々難度の高い使い方等に対する技術的解説です。<br>
掲載しているVBAコードは解説用のコードとなっていますので、適宜変更してお使いください。<br>
そのまま使えるサンプル集は、<strong><a href="../excelvba5/index.htm" tppabs="https://excel-ubara.com/excelvba5/" target="_blank">マクロVBAサンプル集</a></strong>をお探しください。<div class="details">ExcelマクロVBAの実用的なサンプル集として、なるべくそのまま使えるようにVBAコードを書いています。VBAコードの細部についての技術的な解説は少なめになっています。技術的な解説は、以下をご覧ください。</div><br>
なお、掲載しているVBAコードはVBA学習の参考としてのVBAとなっていますので、そのままでは実行できないVBAコードも含まれています。<br><div class="br2"><br></div><div class="br2"><br></div></p>
<h3>プログラミング全般：マクロVBA技術解説</h3>
<div class="main-indent">
    <strong><a href="EXCEL248.html" tppabs="https://excel-ubara.com/excelvba4/EXCEL248.html">プログラミングの基本～ロジックの組み立て</a></strong><div class="details">プログラミングの基本というと、プログラミング言語の基本文法についての解説と思われるかもしれませんが、ここでは、プログラミングする上で最も大切な考え方、ロジックの組み立て方について解説します、本来は言語は問わないのですが、VBAのサイトですのでVBAを例に解説します。何かをしようとしたとき、どのような手順になるか… これが重要です。</div>
    <strong><a href="EXCEL221.html" tppabs="https://excel-ubara.com/excelvba4/EXCEL221.html">実は奥が深いIfステートメント</a></strong><div class="details">プログラムと言うものは、条件により処理を分ける。これにつきます。つまり、この条件が一番問題となります。そして、その記述をするものが、Ifステートメントになります。IFステートメントの基本 まずはIFステートメントの基本を確認しましょう。</div>
    <strong><a href="EXCEL243.html" tppabs="https://excel-ubara.com/excelvba4/EXCEL243.html">論理積（And）論理和（Or）と真（True）偽（False）の判定</a></strong><div class="details">And演算子、Or演算子は、2つの数式内のビット単位の比較を行います、そして、IfステートメントのThenは、Trueの時と言うより、False以外の時に実行されます。何を言っているのか分かりずらいと思いますので、順に解説します。Trueとは何か、Falseとは何か True、Falseを数値で表すと、</div>
    <strong><a href="EXCEL277.html" tppabs="https://excel-ubara.com/excelvba4/EXCEL277.html">条件式のいろいろな書き方：TrueとFalseの判定とは</a></strong><div class="details">If条件式の書き方で、VBAプログラムは大きく様相が変わってきます、VBAを習い始めは、比較演算子で比較した結果が 正しければTrue、間違っていればFalse という事で理解するはずです。しかし、いろいろなサンプルコードを見ていると、「あれっ」比較演算子が無い… というようなIfステートメントやSelectCaseに出くわします。</div>
    <strong><a href="EXCEL244.html" tppabs="https://excel-ubara.com/excelvba4/EXCEL244.html">VBAにおける括弧()の使い方</a></strong><div class="details">オブジェクトのメソッドや、プロシージャー（Sub、Function）を呼ぶときに、引数を括弧()で囲うのか、囲わないのか… 初心者が赤い文法エラーが出て悩むことの一つです。VBAでは、どんな時に括弧を付けて、どんな時に括弧を付けないのか… ・括弧が必要な場合 ・括弧が不要な場合 これらについて具体的な例とともに解説します。</div>
    <strong><a href="EXCEL283.html" tppabs="https://excel-ubara.com/excelvba4/EXCEL283.html">VBAにおけるピリオドとカンマとスペースの使い方</a></strong><div class="details">VBAの文法の中で、初心者が戸惑うことが多いのが、ピリオド、カンマ、スペース これらの使い方のようです。使い方を間違って、ピリオドを打つべきところにカンマを打ってしまうと、VBAコードが真っ赤になってしまいます。こうなるとビックリしてしまい、冷静に見直すことが出来なくなってしまったりします。</div>
    <strong><a href="EXCEL274.html" tppabs="https://excel-ubara.com/excelvba4/EXCEL274.html">変数とプロシージャーの命名について</a></strong><div class="details">VBAを習い始めると、「変数」について学びます、変数に付ける名前を変数名と呼び、若干の規則はあるが、好きな名前を付けて良いと教わります。好きな名前って…ケイコ、ハルカ、アツコ… まあ、それでも良いけど、入れるデータが分かるような名前がよいですね、わかり易い名前を付けましょう。</div>
    <strong><a href="EXCEL236.html" tppabs="https://excel-ubara.com/excelvba4/EXCEL236.html">文字列置換の基本と応用（Replace）</a></strong><div class="details">マクロVBAの処理において文字列置換は頻出の処理ですが、これに苦労している初心者の方が多いようです、そこで文字列置換の基本と応用について解説します。・文字列内の空白（半角・全角）を取り除く VBA関数のTrimは前後の空白が削除されるだけです、そこで、Replace関数を使います。</div>
    <strong><a href="EXCEL278.html" tppabs="https://excel-ubara.com/excelvba4/EXCEL278.html">データクレンジングと名寄せ</a></strong><div class="details">複数の名簿を突き合わせて一つにする、いわゆる「名寄せ」名寄せを行うためには、その前にデータクレンジングを行う必要があります、データクレンジングとは、データの中から、重複の排除、誤記、表記の揺れの修正などを行い、データの品質を高めることです。データを整形して、扱いやすいデータに変換します。</div>
    <strong><a href="EXCEL281.html" tppabs="https://excel-ubara.com/excelvba4/EXCEL281.html">ForとIfのネストこそがVBAの要点</a></strong><div class="details">VBA習得で最も肝心なものは、For文とIf文を確実に習得することです。For文とIf文の基本をしっかりと覚え、そして、For文とIf文をネストさせるプログラミング技術を習得してください。For～Nextステートメントは、繰り返し処理 If～EndIfステートメントは、条件分岐 つまり、条件により分岐しつつ繰り返し処理を行う。</div>
    <strong><a href="EXCEL287.html" tppabs="https://excel-ubara.com/excelvba4/EXCEL287.html">For Next の使い方いろいろ</a></strong><div class="details">VBAの繰り返し処理としては、ForNextまたはDoLoop この二つを最初に学んだのではないでしょうか。プログラムにおける繰り返し処理は、基本中の基本です。特に使用頻度の高いForNextを重点的に学んでいることと思いますが、書き方、使い方は、いくつかのパターンがあります。</div>
    <strong><a href="EXCEL288.html" tppabs="https://excel-ubara.com/excelvba4/EXCEL288.html">複数条件判定を行う時のコツ</a></strong><div class="details">多くの条件を判定して処理を決めなければならない場合は多くあります。複数条件の判定を行う場合のIfステートメントの使い方はいろいろあります。覚えておきたい基本的なIfステートメントの組み立て方法を紹介します。</div><br><div class="br2"><br></div>
</div>
<div class="main-indent">
<div class="ads1">
<script async src="../../pagead2.googlesyndication.com/pagead/js/adsbygoogle.js" tppabs="https://pagead2.googlesyndication.com/pagead/js/adsbygoogle.js"></script>
<ins class="adsbygoogle"
     style="display:block; text-align:center;"
     data-ad-layout="in-article"
     data-ad-format="fluid"
     data-ad-client="ca-pub-6511020045004282"
     data-ad-slot="6991829975"></ins>
<script>
     (adsbygoogle = window.adsbygoogle || []).push({});
</script>
</div></div><h3>VBA入門編：マクロVBA技術解説</h3>
<div class="main-indent">
    <strong><a href="EXCEL201.html" tppabs="https://excel-ubara.com/excelvba4/EXCEL201.html">マクロとは、VBAとは</a></strong><div class="details">エクセル作業に忙殺されて、「どうにかならないものか」そう思って調べるてみると、「VBA」「マクロ」何やら操作を自動化できるようだが、、、VBAとは何？マクロとは何？ 以下では、順にVBAとマクロがどのようなものかを簡単に説明していきます。マクロとは エクセルの操作を自動化するものです。</div>
    <strong><a href="EXCEL202.html" tppabs="https://excel-ubara.com/excelvba4/EXCEL202.html">コーディングとデバッグ</a></strong><div class="details">VBA開発での効率的なコーディングと、プログラム作成では避けて通れないデバッグについて説明します。また、陥りやすい間違い、よくやってしまう間違い等も説明しておきます。効率的なコーディング プロシージャーの移動 コール先のSubプロシージャーやFunctionプロシージャーに移りたい場合があります。</div>
    <strong><a href="EXCEL266.html" tppabs="https://excel-ubara.com/excelvba4/EXCEL266.html">ローカルウィンドウの使い方</a></strong><div class="details">VBAのエディター、VBEにはいくつかのウィンドウがあります、その中で、ローカルウィンドウの使い方の説明です、これが使えないと、配列やオブジェクトを扱ったVBAのデバッグに困ることになります。サンプルコードは、以下の表を使っています。まずは、配列でのローカルウィンドウの使い方について。</div>
    <strong><a href="EXCEL207.html" tppabs="https://excel-ubara.com/excelvba4/EXCEL207.html">WorksheetFunctionについて</a></strong><div class="details">VBAでシート関数を使う、WorksheetFunctionについての解説です。VBAをやれば、必ず使用することになるでしょう。と言いますか、これを使わないと、エクセルを使う意味が薄れてしまいますので。</div>
    <strong><a href="EXCEL208.html" tppabs="https://excel-ubara.com/excelvba4/EXCEL208.html">RangeとCellsの深遠</a></strong><div class="details">RangeとCells特集にします。今さら…と、あなどるなかれ、結構奥が深いのです。すでに説明した内容もありますが、知っておいた方が良い事、知らなくても困らない事（笑） これらを、まとめてみました。まずは基本 A1セルに"エクセル"と入れる場合。</div>
    <strong><a href="EXCEL210.html" tppabs="https://excel-ubara.com/excelvba4/EXCEL210.html">Offset、Resizeを使いこなそう</a></strong><div class="details">OffsetとResizeは、エクセルVBAで非常に便利であり、ぜひ使いこなしてもらいたい機能です。Offsetはセル範囲の位置をずらし、Resizeはセル範囲のサイズを変更します。どちらも、RangeとCellsだけで記述することは可能ですが、OffsetとResizeを使う事で、簡潔にVBAを記述することができるようになります。</div>
    <strong><a href="EXCEL218.html" tppabs="https://excel-ubara.com/excelvba4/EXCEL218.html">値渡し、参照渡しについて（ByVal,ByRef）</a></strong><div class="details">ByValが値渡し、ByRefが参照渡しです。ここまでは、どこにでも書いてあります。しかし、なんとなく理解できるけど、なんとなく理解できない… 結局のところ実際の活用がなかなか出来ない事が多いようです。</div>
    <strong><a href="EXCEL222.html" tppabs="https://excel-ubara.com/excelvba4/EXCEL222.html">最終行・最終列の取得方法（End,CurrentRegion,SpecialCells,UsedRange）</a></strong><div class="details">エクセルの表をVBAで扱う時は、データ部分の先頭から最終行までの、開始列から最終列まで処理する事が多いでしょう。開始行や開始列は、ほとんどの場合、見出し行や見出し列の次からになります。単純な話として、１行目に見出しがあれば、２行目から １列目に見出しがあれば、２列目から では、ここで、最終行や最終列は、</div>
    <strong><a href="EXCEL229.html" tppabs="https://excel-ubara.com/excelvba4/EXCEL229.html">ユーザー定義関数の作り方</a></strong><div class="details">マクロVBAを作成して、ボタンで一括処理…それほどではないが、関数だけではちょっと大変、そんな時は、ユーザー定義関数を使ってみましょう。作り方は簡単です。簡単な例でユーザー定義関数を作ってみましょう 上記は、引数を足し算して返すユーザー定義関数です。</div>
    <strong><a href="EXCEL230.html" tppabs="https://excel-ubara.com/excelvba4/EXCEL230.html">セルの値について（Value,Value2,Text）</a></strong><div class="details">マクロVBAにおいて、セルの値を操作する事は基本の基本ですが、意外に理解できていない場合が多いようです。Value 指定されたセル範囲の値を表すバリアント型(Variant)の値を設定します。値の取得および設定が可能です。</div>
    <strong><a href="EXCEL235.html" tppabs="https://excel-ubara.com/excelvba4/EXCEL235.html">Excelのバージョンを判断して「名前を付けて保存」</a></strong><div class="details">Excel2007以降とExcel2003以前ではExcelのファイルフォーマットが違います、Excel2007以降で2003以前の形式で保存したい場合に問題が発生します。Excel2007以降で普通に97-2003形式で保存するVBAコードを書くと、Excel2003以前ではエラーとなってしまいます。</div>
    <strong><a href="EXCEL237.html" tppabs="https://excel-ubara.com/excelvba4/EXCEL237.html">空白セルを正しく判定する方法（IsEmpty,IsError,HasFormula）</a></strong><div class="details">空白セルの判定は、VBAにおいては頻繁に発生しますが、正しく空白セルを判定する事は以外と難しいものです。そもそも「空白」とはどのような状態なのか… これが、はっきりしない為に何が正しいのかが判然としないことが問題を複雑にしています。以下、A1セルが空白かどうか判定する方法をいくつか紹介します。</div>
    <strong><a href="EXCEL276.html" tppabs="https://excel-ubara.com/excelvba4/EXCEL276.html">空白セルを正しく判定する方法2</a></strong><div class="details">空白セルの判定について、いろいろな方から意見を頂きました、やはり、空白判定は奥が深く結構難しいものとなっています。ここでは、各プロパティや関数が、セルの状態によって返す値を再確認してみます。元記事は、空白セルを正しく判定する方法（IsEmpty,IsError,HasFormula） 上記の記事では、</div>
    <strong><a href="EXCEL246.html" tppabs="https://excel-ubara.com/excelvba4/EXCEL246.html">Rangeオブジェクト.Valueの省略について</a></strong><div class="details">エクセルVBAを教えていて、これほど多く聞かれる質問はないでしょう、RangeやCellsの.Valueは省略したほうが良いか、書いた方が良いか、当然、省略出来ない場合もあれば、オブジェクトとして扱うために.Valueは書けない場合もあります。ですので、結論から言えば、書きたければ書けば良いし、書きたくなければ書かなくて良い。</div>
    <strong><a href="EXCEL247.html" tppabs="https://excel-ubara.com/excelvba4/EXCEL247.html">ユーザー操作を制限する（Locked,Protect,ScrollArea）</a></strong><div class="details">ユーザーがあちこち触って計算式を壊されないようしたり、セルの境界をダブルクリックして最終行に飛んでしまい迷子になったりしないように、シートを保護して、ユーザー操作を制限します。操作できるセルを徹底的に限定します。無用なセルはクリックもできない、スクロールすることもできなくしてしまいます。</div>
    <strong><a href="EXCEL249.html" tppabs="https://excel-ubara.com/excelvba4/EXCEL249.html">シートに数式を設定する時のセル参照の指定方法</a></strong><div class="details">シートに計算結果ではなく、計算式を設定する場合の、セル参照の記述方法について解説します、マクロVBAでは多くの場合、計算結果をセルに入れる事が多いのですが、時に計算式を設定する必要があります、その時の、セル参照の記述が以外に面倒なものです。下の表で説明していきます。</div>
    <strong><a href="EXCEL251.html" tppabs="https://excel-ubara.com/excelvba4/EXCEL251.html">標準モジュールとシートモジュールの違い</a></strong><div class="details">エクセルVBAを始めたばかりの人に教えるとき、まずは標準モジュールを挿入して、そこに書きましょう、と教えます。しかし後で見ると、時に間違ってシートモジュールに書いている場合が結構あります。そういう時に、必ず聞かれるのが、「何が違うんですか？」「どこが違うんですか？」そういう時は、「今はその違いについて説明しても混乱するだけですから、</div>
    <strong><a href="EXCEL253.html" tppabs="https://excel-ubara.com/excelvba4/EXCEL253.html">オートフィルタ（AutoFilter）の使い方まとめ</a></strong><div class="details">オートフィルタはエクセルの中でもデータ処理において非常に強力なものです、特に大量データの処理には書くことのできない機能となっています。しかし、使い方が難しく、またバージョン違いの影響が大きく、使いずらい物となっていて、問い合わせを受ける事も多いです。</div>
    <strong><a href="EXCEL259.html" tppabs="https://excel-ubara.com/excelvba4/EXCEL259.html">複雑な条件（複数除外等）のオートフィルター（AutoFilter）</a></strong><div class="details">オートフィルターはExcelにおいて重要かつ便利な機能ですが、その使い方の理解が不十分な事が多いようです、単純な条件の場合は問題ないのですが、条件が複雑になった途端に書き方で相談を受ける事が多々あります。まず、オートフィルターの一般的な解説としては以下を参考にしたください。</div>
    <strong><a href="EXCEL254.html" tppabs="https://excel-ubara.com/excelvba4/EXCEL254.html">クリップボードを使わないセルのCopy</a></strong><div class="details">セルをコピーすることはマクロVBAにおいてもっとも基本的なことですが、セルをコピーすると、クリップボードが使われてしまうので、他の作業との併用時に困ることが多々あります。そこで、クリップボードを使わずに、セルをコピーする方法を考えてみましょう。</div>
    <strong><a href="EXCEL257.html" tppabs="https://excel-ubara.com/excelvba4/EXCEL257.html">Rangeの使い方：最終行まで選択を例に</a></strong><div class="details">Rangeの使い方・書き方について、データ最終行まで選択する場合を例に説明します、Rangeの書き方なので、RangeオブジェクトではなくRangeプロパティの解説という事になります。最近続けざまに、以下のようなコードを見かけました。Range(&quot;A2&quot;,Range(&quot;A2&quot;).End(xlDown)).Selec…</div>
    <strong><a href="EXCEL275.html" tppabs="https://excel-ubara.com/excelvba4/EXCEL275.html">フルパスをディレクトリ、ファイル名、拡張子に分ける</a></strong><div class="details">ファイルのフルパスを、ディレクトリ、ファイル名、拡張子に分けます。FileSystemObjectを使う方法と、VBA関数で分けるVBAのサンプルコードになります。順に、C:\Users\hogehoge\Desktop サンプル.txt サンプル txt と表示されます。</div>
    <strong><a href="EXCEL285.html" tppabs="https://excel-ubara.com/excelvba4/EXCEL285.html">Colorプロパティの設定値一覧（カラー定数、XlRgbColor列挙）</a></strong><div class="details">塗りつぶし、文字色、等々の色指定は結構悩ましいものがあります、Excel2003までなら、ColoIndexで56色だけだったので簡単でしたが、Excel2007以降は、フルカラーがつかえるようになった為、色指定が悩ましくなりました。Colorプロパティに設定する色定数について、色見本とともに一覧にまとめておきます。</div>
    <strong><a href="EXCEL286.html" tppabs="https://excel-ubara.com/excelvba4/EXCEL286.html">VBAを定型文で覚えよう</a></strong><div class="details">VBAの書籍を読んでも、ネットの解説記事を読んでも、なかなかVBAをマスター出来ないという場合は、学習方法が間違っているかもしれません。その人に合った学習方法、それは人それぞれ違うのは当然です。本サイトでも、入門者用として多くのページが存在します。</div>
    <strong><a href="EXCEL290.html" tppabs="https://excel-ubara.com/excelvba4/EXCEL290.html">VBAこれだけは覚えておきたい必須基本例文10</a></strong><div class="details">VBAを覚える順序としては、・文法から始める方法 ・実践例文から始める方法 どちらが良いとは言い切れませんが、もし文法習得に限界を感じているなら、実践的な基本例文を暗記することから始めてみると良いでしょう。また、VBA習得において、・何を目標にやっていけばよいのか ・どの程度出来たらVBAができると言えるのか こんな疑問もでてくるでしょう。</div>
    <strong><a href="EXCEL292.html" tppabs="https://excel-ubara.com/excelvba4/EXCEL292.html">エクセルVBAでのシート指定方法</a></strong><div class="details">ExceのVBAにおいてシート指定は必須になりますが、シートの指定方法は何種類かあり、それぞれの特徴があります。シートの指定方法には、以下の3通りがあります。シートのインデックスで番号 シートの名称で指定 シートのオブジェクト名で指定 シート指定方法ごとに使い方を簡単に説明しながら、それぞれの主な使用場面やメリット、</div>
    <strong><a href="EXCEL_VBA_410.html" tppabs="https://excel-ubara.com/excelvba4/EXCEL_VBA_410.html">文字列結合&amp;でコンパイルエラーになる理由</a></strong><div class="details">VBAでは、&amp;（アンパサンド）記号で文字列結合を行う事は頻繁に行われますよね。VBEで&amp;を記述するとき、一度くらいは赤字のコンパイルエラーになったことがあるのではないでしょうか。どのように入力した時にエラーになるのか、なぜそれがエラーになるのか、これらを少しく詳しく見てみましょう。</div>
    <strong><a href="EXCEL_VBA_414.html" tppabs="https://excel-ubara.com/excelvba4/EXCEL_VBA_414.html">手動計算時の注意点と再計算方法</a></strong><div class="details">セルを変更する度に再計算が動いてしまうと処理時間が遅くなってしまいます。そこでマクロVBAの中で、計算方法を手動にすることで対処することになります。このとき処理結果が期待した結果にならないといった事が起こらないように、手動計算時の注意点と再計算方法について解説します。</div>
    <strong><a href="EXCEL_VBA_417.html" tppabs="https://excel-ubara.com/excelvba4/EXCEL_VBA_417.html">VBAの用語について：ステートメントとは</a></strong><div class="details">プログラミング言語には独特の用語があります。用語の理解があやふやなままで解説を読んでも理解がずれてしまう事もあります。VBAの用語は、プログラミング言語一般で使われている用語と同じ使い方も多いのですが、中にはVBA独自の使い方をしている場合もあります。</div>
    <strong><a href="EXCEL_VBA_423.html" tppabs="https://excel-ubara.com/excelvba4/EXCEL_VBA_423.html">オブジェクト変数とは何か</a></strong><div class="details">VBAを使い始めてからある程度進むとオブジェクト変数を必ず使い始めることになります。しかし、オブジェクト変数をどうやって使ったらよいのか、オブジェクト変数とはどういうものなのか… ここの理解で苦しんでいることが多々あるようです。VBA入門は現在137回までありますが、オブジェクト変数については第52回.オブジェクト変数とSetステートメントででてきます。</div>
<strong><a href="EXCEL_VBA_427.html" tppabs="https://excel-ubara.com/excelvba4/EXCEL_VBA_427.html">VBAの小数以下の演算誤差について</a></strong><div class="details">ワークシートで時間計算をしていると、時に不可解な結果に見舞われることがあります。エクセルの時間は、1日を1とした数値で管理されているため、1時間は1の24分の1の数値になります。この小数以下の計算において、エクセルが正しく計算できないというものです。</div>
<strong><a href="EXCEL_VBA_428.html" tppabs="https://excel-ubara.com/excelvba4/EXCEL_VBA_428.html">スピルでVBAの何が変わったか</a></strong><div class="details">Office365にスピルが登場し、2020年1月にはXLOOKUPもリリリースされ、ますますエクセルが便利になってきています。スピルは、これまでにないくらい大幅な機能変更と言えるでしょう。スピルの一般的な説明については以下を参照してください。</div>
<strong><a href="EXCEL_VBA_435.html" tppabs="https://excel-ubara.com/excelvba4/EXCEL_VBA_435.html">CharactersプロパティとCharactersオブジェクト</a></strong><div class="details">セルの文字列やオートシェイプの文字列の一部のフォントを変更する場合、Charactersを使います。Charactersプロパティは、Charactersオブジェクトを返します。複数形の名称でもあり、コレクションのようにも見えてしまいますがコレクションではありません。</div>
<strong><a href="EXCEL_VBA_439.html" tppabs="https://excel-ubara.com/excelvba4/EXCEL_VBA_439.html">印刷範囲の設定・印刷範囲のクリア</a></strong><div class="details">印刷に不必要なデータが含まれているワークシートの場合、適切なセル範囲を印刷範囲として設定します。印刷範囲を設定するには、WorkSheetオブジェクトのPageSetupオブジェクトのPrintAreaプロパティを使用します。VBAでの印刷およびPageSetupオブジェクトの詳細については以下を参照してください。</div>
    <strong><a href="EXCEL289.html" tppabs="https://excel-ubara.com/excelvba4/EXCEL289.html">VBAの省略可能な記述について</a></strong><div class="details">VBAには、省略可能な記述が数多くあります。省略可能な記述とは、書いても書かなくても動作に何の違いもないものになります。VBAのこの記述の自由度は、慣れてしまえば楽なものですが、初心者の方が覚え始める時には、多少混乱することもあると思います。</div>
<strong><a href="EXCEL_VBA_441.html" tppabs="https://excel-ubara.com/excelvba4/EXCEL_VBA_441.html">VBAのVariant型について</a></strong><div class="details">Variantデータ型は、他の何らかのデータ型として明示的に宣言されていない変数で、全てのデータ型を入れることができます。Variantデータ型には型宣言文字はありません。Variant型は、特別な値Empty、Error、Nothing、Nullを格納することもできます。</div>
<strong><a href="EXCEL_VBA_444.html" tppabs="https://excel-ubara.com/excelvba4/EXCEL_VBA_444.html">VBAのインデントについて</a></strong><div class="details">インデントについてTwitterで連続ツイートしました。このツイートを基に、さらに補足を付け加えてまとめたものです。https://twitter.com/yamaoka_ss/status/1283295721358151680 VBAのインデントの模範 VBAのインデントについて 過去は違ってたこともあるかもしれませんが、</div><br><div class="br2"><br></div>
</div>
<h3>VBA応用編：マクロVBA技術解説</h3>
<div class="main-indent">
    <strong><a href="EXCEL211.html" tppabs="https://excel-ubara.com/excelvba4/EXCEL211.html">マクロ作成後に、表位置がずれた場合の対処</a></strong><div class="details">マクロVBAの最も不便なところは、シートでセルをずらしてもセル参照が自動で変更されない事です。どういう事かと言うと、ワークシート関数なら、セル位置をずらすと計算式が自動で変更されます。しかし、マクロVBAの記述は自動で変更されません。</div>
    <strong><a href="EXCEL219.html" tppabs="https://excel-ubara.com/excelvba4/EXCEL219.html">ExecuteExcel4Macroについて（Excel4.0マクロ）</a></strong><div class="details">ExecuteExcel4Macroは、Excel4.0のマクロを実行します。つまり、昔のマクロを使うということです。VBAが使える前にあったものですが、最新バージョンのエクセルでも使用できます。とはいえ、積極的に使うようなものでもないですし、MSもVBAへの移行を勧めています。</div>
    <strong><a href="EXCEL223.html" tppabs="https://excel-ubara.com/excelvba4/EXCEL223.html">再帰呼出しについて（再帰プロシージャー）</a></strong><div class="details">再帰プロシージャとは、自分自身を呼び出すプロシージャです。プロシージャが、そのプロシージャ内で自分自身を呼び出すような処理を再帰呼び出しと呼びます。自分自身を呼び出し、終了条件を満たすまで、意図的に無限ループさせます。</div>
<strong><a href="EXCEL_VBA_430.html" tppabs="https://excel-ubara.com/excelvba4/EXCEL_VBA_430.html">フィボナッチ数列（再帰呼び出し）</a></strong><div class="details">フィボナッチ数列は、最初の二項は0,1で、以後は直前の2つの項の和となっている数列です。VBAでフィボナッチ数列を出力してみましょう。もちろん、フィボナッチ数を勉強しようとか、何かに使おうという事ではありません。</div>
    <strong><a href="EXCEL231.html" tppabs="https://excel-ubara.com/excelvba4/EXCEL231.html">文字列でのセル参照と文字列の計算式について（Evaluate,INDIRECT）</a></strong><div class="details">セルまたはセル範囲を表す文字列からセル参照する場合と、文字列としての計算式から計算する場合です。&quot;Sheet1&quot;の A1に、&quot;Sheet2&quot; B1に、&quot;A1&quot; &quot;Sheet2&quot;の A1に、&quot;(2+3)*2&quot; このように入っている場合に、</div>
    <strong><a href="EXCEL234.html" tppabs="https://excel-ubara.com/excelvba4/EXCEL234.html">リボンを非表示、2003以前ならメニューを非表示</a></strong><div class="details">Excel2007以降のリボンは幅を取られて邪魔な場合があります、特に業務アプリの場合は、リボンを消したい事も多いと思います。リボンを消すだけなら、消えているリボンを表示する場合は、Application.ExecuteExcel4Macro&quot;SHOW.TOOLBAR(&quot;&quot;Ribbon&quot;&quot;,</div>
    <strong><a href="EXCEL238.html" tppabs="https://excel-ubara.com/excelvba4/EXCEL238.html">印刷ページ設定の余白をセンチで指定する（CentimetersToPoints）</a></strong><div class="details">印刷のページ設定の余白サイズは、自動記録ではApplication.InchesToPointsで記録されます、しかし、ページ設定のダイアログ画面ではセンチで指定しているので、どうもしっくりしません。できれば、余白サイズはセンチで指定したいものです。</div>
    <strong><a href="EXCEL255.html" tppabs="https://excel-ubara.com/excelvba4/EXCEL255.html">文字列としてのプロシージャー名を起動する方法（Run,OnTime）</a></strong><div class="details">文字列変数の中にプロシージャー名が入っていて、そのプロシージャーを起動したい場合になります、実際には、そのような構造が良いとは思えませんが、知っていればプログラミングの幅が広がります。使うのは、OnTimeメソッドorRunメソッドになります。</div>
    <strong><a href="EXCEL256.html" tppabs="https://excel-ubara.com/excelvba4/EXCEL256.html">ドキュメントの作成者を取得（GetObject,BuiltinDocumentProperties）</a></strong><div class="details">エクスプローラーで表示される作成者を取得したいとの問い合わせを受けたので改めて確認をしました、所有者と混同されがちですが全く別のものになります、DOSのDIRで表示できるものは所有者になります。従ってVBAでShell.Applicationで作成者を取得すると書かれているものは全て勘違いをしています。</div>
    <strong><a href="EXCEL263.html" tppabs="https://excel-ubara.com/excelvba4/EXCEL263.html">画像サイズ（横x縦）の取得について</a></strong><div class="details">マクロVBAで、画像サイズ（横x縦）ピクセル数を取得する方法についての解説です、画像は種類が多いので、全ての画像に対応しようとすると、かなり面倒になります。このような処理は、私もたびたび使いますので、自身の覚書としての意味もあり掲載します。</div>
    <strong><a href="EXCEL264.html" tppabs="https://excel-ubara.com/excelvba4/EXCEL264.html">文字種（ひらがな、全半角カタカナ、半角英大文字等々）の判定</a></strong><div class="details">マクロVBAで、文字の種類を判定する具体的なコードになります、書き方はいろいろありますし、なにより、文字を何の種類に入れるかは決まりがありません。カタカナって、どこからどこまで、カナ記号は含むの このような細部については、使用する時々に合わせて微調整が必要になります。</div>
    <strong><a href="EXCEL204.html" tppabs="https://excel-ubara.com/excelvba4/EXCEL204.html">オブジェクトとプロパティの真実 </a></strong><div class="details">オブジェクトとプロパティについて、解説をします。対象は、VBA中級以上になると思いますが、初級の方でも、VBAって奥が深いんだなーと感動位は出来ると思います。（笑） ただし、あまり役には立たないかもしれませんので、あしからず。</div>
    <strong><a href="EXCEL261.html" tppabs="https://excel-ubara.com/excelvba4/EXCEL261.html">オブジェクト式について</a></strong><div class="details">オブジェクトは、objectであり、物・物体のことです、VBAで何か操作をしようとする対象となるものがオブシェクトです、オブジェクト式とは、オブジェクトを操作しようとしたときに、オブジェクトを特定するための書き方です。ただし「オブジェクト式」という言い方を特別なものとして覚える必要はありません。</div>
    <strong><a href="EXCEL267.html" tppabs="https://excel-ubara.com/excelvba4/EXCEL267.html">オブジェクトの探索方法（オートシェイプのTextを探して）</a></strong><div class="details">VBAを書き進めて行くと、どうしてもオブジェクトの扱い時に分からないことがでてきます、何が分からないかというと、オブジェクトの中の目的の要素をどのように指定したら良いのかということです、オブジェクトの中を調べて、目的の要素にたどり着く方法を説明します。ローカルウィンドウを主体に説明します。</div>
    <strong><a href="EXCEL269.html" tppabs="https://excel-ubara.com/excelvba4/EXCEL269.html">条件付きコンパイル（32ビット64ビットの互換性）</a></strong><div class="details">条件付きコンパイルは、VBAの特定のコードブロックを選択してコンパイルします、VBAの他の部分は無視されます、条件付きコンパイルステートメントは、実行時ではなくコンパイル時に実行されます。条件に基づいてコンパイルするコードのブロックを指定するには #If...Then...#Elseディレクティブを使用します。</div>
    <strong><a href="EXCEL294.html" tppabs="https://excel-ubara.com/excelvba4/EXCEL294.html">ドキュメントプロパティ（BuiltinDocumentProperties,CustomDocumentProperties）</a></strong><div class="details">ブックのドキュメントプロパティには、組み込みドキュメントプロパティとユーザー設定のドキュメントプロパティがあります。VBAで扱うときは、それぞれ以下のコレクション・オブジェクトを使います、BuiltinDocumentProperties, CustomDocumentProperties これらは、</div>
    <strong><a href="EXCEL295.html" tppabs="https://excel-ubara.com/excelvba4/EXCEL295.html">VBAでファイルを規定のアプリで開く方法</a></strong><div class="details">Excelマクロで、エクセル以外のファイルを既定のアプリケーションで開く場合の方法について何通りか解説します、VBAでファイルを単純に開くだけの場合についてになります。ファイルを開いた後に、そのファイルに対して何らかの操作をしたい場合は、対応するアプリケーション毎に個別の対応が必要になりますが、Windowsで開けるファイルであり、</div>
    <strong><a href="EXCEL297.html" tppabs="https://excel-ubara.com/excelvba4/EXCEL297.html">Excelアドインの作成と登録について</a></strong><div class="details">Excelアドインの作成方法と登録方法についての手順と注意点、そして対応するマクロVBAコードとVBSについて紹介します。具体的にどんなアドインを作成するかではなく、一般的なアドインの作成と登録についての概要の解説とVBAコードのサンプルになります。</div>
    <strong><a href="EXCEL299.html" tppabs="https://excel-ubara.com/excelvba4/EXCEL299.html">VBAでのタイマー処理（SetTimer,OnTime）</a></strong><div class="details">VBAでタイマー処理（一定時間間隔で処理）を行う方法についての解説です。最も一般的な方法は、Application.OnTimeを使う方法になりますが、今回の主題としては、WindowsAPIのSetTimerを紹介します。まずはApplication.OnTimeの確認してから、次にWindowsAPIのSetTimerを紹介します。</div>
    <strong><a href="EXCEL_VBA_403.html" tppabs="https://excel-ubara.com/excelvba4/EXCEL_VBA_403.html">マクロでShift_JIS文字コードか判定する</a></strong><div class="details">環境依存文字・機種依存文字をチェックしたいという話は時々聞くことなのですが、何をもってして判別するかという事が実はとても難しい問題になります、①②もIMEでは[環境依存]と表示されますが、通常これが問題になる事はないでしょう。そもそもコンピューターの中は2進数だけで表現されているもので、コンピューターの文字とは、</div>
    <strong><a href="EXCEL_VBA_409.html" tppabs="https://excel-ubara.com/excelvba4/EXCEL_VBA_409.html">Byte配列と文字コード関数について</a></strong><div class="details">マクロVBAのデータ型にByte型がありますが、使う機会はかなり限られています。バイト型は、8ビット(1バイト)の変数で、0～255の範囲の単精度の正の数値が格納されます。1バイトで使う事もなくはありませんが、Byte型配列として使われることがしばしばあります。</div>
    <strong><a href="EXCEL_VBA_407.html" tppabs="https://excel-ubara.com/excelvba4/EXCEL_VBA_407.html">Applicationを省略できるApplicationのメソッド・プロパティ一覧</a></strong><div class="details">Applicationには多数のメソッド・プロパティがありますが、この中には、Applicationを記述しなければならないものと、Applicationを省略できるものとが存在します。これらの違いはどこから来るのでしょうか… Applicationの全てのプロパティ・メソッドについては、Applicationのプロパティ、</div>
    <strong><a href="EXCEL_VBA_408.html" tppabs="https://excel-ubara.com/excelvba4/EXCEL_VBA_408.html">PowerQueryの強力な機能をVBAから利用する方法</a></strong><div class="details">Excel2016より標準搭載されたPowerQueryはとても強力な機能ですが、使える環境が限られるので、頻繁に使われだすのはこれからになると思います。PowerQueryが広く使われだすと、色々な使い方が出てくると思います。ここでは、PowerQueryの優れた機能をVBAから利用する場合の手順を説明したものです。</div>
    <strong><a href="EXCEL_VBA_411.html" tppabs="https://excel-ubara.com/excelvba4/EXCEL_VBA_411.html">ShapesとDrawingObjectsの相違点と使い方</a></strong><div class="details">VBAで図（オートシェイプ等）を扱う時にいろいろ調べていくと、図（オブジェクト）のコレクションが二つあることに気づきます。Shapesコレクション DrawingObjectsコレクション WEBのサンプルや書籍では多くはShapesが使われているはずですが、時々DrawingObjectsを見かけることもあります。</div>
    <strong><a href="EXCEL_VBA_412.html" tppabs="https://excel-ubara.com/excelvba4/EXCEL_VBA_412.html">新規挿入可能なシート名の判定</a></strong><div class="details">VBAで、シートの存在確認およびシートとして使える文字列かどうかの判定は、厳密に行おうとするとかなり大変になってきます。この件についてTwitterでやり取りがあり、それらを踏まえた上でのVBAコードを参考として公開しておきます。その時のツイートでのやり取りは、こちら シート名として使える文字列か判定 シート名の制限として、</div>
    <strong><a href="EXCEL_VBA_413.html" tppabs="https://excel-ubara.com/excelvba4/EXCEL_VBA_413.html">VBAにおける配列やコレクションの起点について</a></strong><div class="details">VBAの配列を扱っていると、0から開始されていたり1から開始されていたりします。さすがに、混乱したり、間違ってしまう事もあると思います。0から開始される場合を、「0オリジン」英語では「zero-based」1から開始される場合を、「1オリジン」英語では「one-based」このような呼び方をします。</div>
    <strong><a href="EXCEL_VBA_416.html" tppabs="https://excel-ubara.com/excelvba4/EXCEL_VBA_416.html">VBAのマルチステートメント（複数のステートメントを同じ行に）</a></strong><div class="details">VBAでは、基本的な決まりとして1ステートメントは1行で書くことになっています。しかし、あまりに長くなってしまうと見づらくなります。逆に、短いステートメントが多数行になっていても見づらい場合もあります。</div>
    <strong><a href="EXCEL_VBA_418.html" tppabs="https://excel-ubara.com/excelvba4/EXCEL_VBA_418.html">クリップボードに2次元配列を作成してシートに貼り付ける</a></strong><div class="details">タイトルはいささかとっぴな感じですが、目的はクリップボードのデータ取得とクリップボードへデータを送る方法と、そもそもクリップボードの中に、セル範囲（つまり2次元）のデータがどのように入っているかを確認してみようという事です。そして、それが解ればクリップボードに2次元配列としてデータを用意してシートに貼り付けられるだろうという事です。</div>
    <strong><a href="EXCEL_VBA_419.html" tppabs="https://excel-ubara.com/excelvba4/EXCEL_VBA_419.html">ユーザー定義型の制限とクラスとの使い分け</a></strong><div class="details">VBAにはユーザー定義型(Type)があり、複数の要素（複数のデータ型）を含むデータ型を定義できます。複数の値をひとまとめで扱う方法として配列がありますが、配列は同じ型の値しか扱うことができませんが、ユーザー定義型の変数には、文字列型、数値型等々の複数のデータ型をひとまとめにして入れることができます。</div>
    <strong><a href="EXCEL_VBA_420.html" tppabs="https://excel-ubara.com/excelvba4/EXCEL_VBA_420.html">シングルクォートの削除とコピー（PrefixCharacter）</a></strong><div class="details">セルに入力した先頭の'シングルクォーテーションは特殊なものとなっています。通常は、数値を文字としてセルに入れるときに使っているものです。マクロVBAでセル値を取得すると、この'シングルクォーテーションはValueでは取得できません。</div>
    <strong><a href="EXCEL_VBA_421.html" tppabs="https://excel-ubara.com/excelvba4/EXCEL_VBA_421.html">空文字列の扱い方と処理速度について（&quot;&quot;とvbNullString）</a></strong><div class="details">空文字列と書きましたが、空文字列という表現がかなり曖昧な表現になっています。ここでいう空文字列とは、文字列が入るべき場所に、何も入っていない（ように見える）状態を指しています。VBAにおいては、空文字列の状態が2つあります。</div>
    <strong><a href="EXCEL_VBA_422.html" tppabs="https://excel-ubara.com/excelvba4/EXCEL_VBA_422.html">VBAにおける変数のメモリアドレスについて</a></strong><div class="details">VBA開発においてメモリアドレスを気にすることはほとんど無いと思います。気になる場合があるとしたら、・String変数の処理が遅い ・Variant変数の処理が遅い ・ByRef,ByValの違い ・WindowsAPI使用時 このような場合に多少は気になる事があるくらいではないでしょうか。</div>
    <strong><a href="EXCEL_VBA_424.html" tppabs="https://excel-ubara.com/excelvba4/EXCEL_VBA_424.html">Evaluateメソッド（文字列の数式を実行します）</a></strong><div class="details">Evaluateメソッドは、Excelで使用する名前をオブジェクトまたは値に変換します。簡単に説明すれば、セルに入れる数式を文字列としてVBAで実行できます。Evaluateメソッドの構文 式.Evaluate(name) 式には以下が指定できます。</div>
<strong><a href="EXCEL_VBA_425.html" tppabs="https://excel-ubara.com/excelvba4/EXCEL_VBA_425.html">Rangeオブジェクトの論理演算（差集合と排他的論理和）</a></strong><div class="details">複数のRangeオブジェクトの重なっている範囲や、結合した範囲等々、Rangeオブジェクトを集合として、その集合演算の結果のRangeオブジェクトが必要になってくる場合がVBAでは良くでてきます。VBAで標準でサポートされているものとしては、和集合：Unionメソッド 積集合：Intersectメソッド この二つがありますが、</div>
<strong><a href="EXCEL_VBA_426.html" tppabs="https://excel-ubara.com/excelvba4/EXCEL_VBA_426.html">VBAで写真の撮影日時や音楽動画の長さを取得する</a></strong><div class="details">写真の撮影日時、音楽や動画の再生時間、これらをVBAで取得します。写真や音楽、動画をフォルダにまとめて入れている人は多いのではないでしょうか。しかし、なかなかちゃんと管理できていなかったりしませんか。</div>
<strong><a href="EXCEL_VBA_431.html" tppabs="https://excel-ubara.com/excelvba4/EXCEL_VBA_431.html">VBAでWindowsMediaPlayerを使い動画再生する</a></strong><div class="details">VBAで動画を再生する方法を何通りか試してみます。VBAで直接動画を再生できるわけではないので、コントロールのWindowsMediaPlayerを使って再生します。動画を再生するだけなら簡単そうなのですが、実際にはいろいろと問題がありました。</div>
<strong><a href="EXCEL_VBA_432.html" tppabs="https://excel-ubara.com/excelvba4/EXCEL_VBA_432.html">VBAでWEBカメラ操作する</a></strong><div class="details">VBAでWEBカメラを操作してみます。WEBカメラの映像を映し出し、任意の時点でスナップショットをとるようにしています。私自身にとってはエクセルでやる実用的な意味はほとんどありませんが、技術的な興味でやってみた自身の覚え書きになります。</div>
<strong><a href="EXCEL_VBA_433.html" tppabs="https://excel-ubara.com/excelvba4/EXCEL_VBA_433.html">VBAで電光掲示板を作成</a></strong><div class="details">VBAで電光掲示板っぽいものを作成しました。方眼紙エクセルのセルをドットとしてフォントを表示し、それを移動させています。電光掲示板をVBAで作っても使い道があるとは思えませんが、他に転用できる内容としては、東雲フォントのドットパターンを使い、1ドットを１セルで文字を表示するところでしょう。</div>
<strong><a href="EXCEL_VBA_436.html" tppabs="https://excel-ubara.com/excelvba4/EXCEL_VBA_436.html">ユーザーに絶対に停止させたくない場合のVBA設定</a></strong><div class="details">ユーザー操作によりマクロVBAが実行中に停止させられてしまう場合があります。再実行可能であれば問題ありませんが、途中で強制停止された場合のデータ保証が出来ないと言った場合もあるでしよう。マクロ実行でも、以下のキーボード操作でVBAは停止できてしまいます。</div>
<strong><a href="EXCEL_VBA_437.html" tppabs="https://excel-ubara.com/excelvba4/EXCEL_VBA_437.html">列幅・行高をDPI取得しピクセルで指定する</a></strong><div class="details">VBAでは、ワークシートの列幅は文字数、行高はポイントで設定します。これらでの指定は便利な時もありますが、VBAで設定する場合に不便になる事も多くあります。そもそも、列幅と行高が別々の単位になっているので設定しづらいのです。</div>
<strong><a href="EXCEL_VBA_438.html" tppabs="https://excel-ubara.com/excelvba4/EXCEL_VBA_438.html">VBAでWMIの使い方について</a></strong><div class="details">WMIは、WindowsManagementInstrumentationの略になります。マイクロソフトが実装したWindowsシステムを管理するためのインターフェイスです。WMIは、Windows管理技術の中核を担っていて、ローカルコンピュータとリモートコンピュータの両方の管理に使用できます。</div>
<strong><a href="EXCEL_VBA_440.html" tppabs="https://excel-ubara.com/excelvba4/EXCEL_VBA_440.html">アクティブシート以外のWindowを設定できるWorksheetView</a></strong><div class="details">VBAの中でも非常に分かりづらいオブジェクトにWindowオブジェクトがあります。Windowオブジェクトは、ブックやシートの見方を変えることのできるものです。Windowオブジェクトの集まりがWindowsコレクションです。</div>
<strong><a href="EXCEL_VBA_442.html" tppabs="https://excel-ubara.com/excelvba4/EXCEL_VBA_442.html">LSetとユーザー定義型のコピー（100桁の足し算）</a></strong><div class="details">数の単位に「無量大数」というものがあります。その桁数は10^68（10^88とする場合もあるよう）です。VBAでこの無量大数の足し算をするにはどうしたら良いでしょうか。方法としては、VBAで計算できる桁数にちぎって足し上げていけば良いでしょう。</div>
<strong><a href="EXCEL_VBA_443.html" tppabs="https://excel-ubara.com/excelvba4/EXCEL_VBA_443.html">省略可能なVariant引数の参照不可をラップ関数で利用</a></strong><div class="details">省略可能(Optional)なVariant引数を省略した場合、その引数は「参照不可」となります。この「参照不可」の状態について説明します。そして、これをあえて利用してワークシート関数のラップ関数を作成してみます。</div>
<strong><a href="EXCEL_VBA_446.html" tppabs="https://excel-ubara.com/excelvba4/EXCEL_VBA_446.html">ブックのいろいろな開き方（GetObject,参照設定,アドイン）</a></strong><div class="details">VBAで他ブックを開くいろいろな方法について、サンプルVBAで説明・紹介します。以下の5通りのVBAを紹介します。普通に開く 別のインスタンスで開く GetObjectで開く 参照設定で開く アドインで開く 以下のサンプルVBAの実行確認 サンプルVBAで開くExcelファイルは以下に置きました。</div>
<strong><a href="EXCEL_VBA_447.html" tppabs="https://excel-ubara.com/excelvba4/EXCEL_VBA_447.html">入力規則への貼り付けを禁止する</a></strong><div class="details">ツイッターで以下の発言をしたのをきっかけに作成したマクロVBAです。入力規則は便利なんだけどさ、値貼り付け出来ちゃダメでしょ！では、問題です。シートに入力規則のリストを設定しました。VBAでそのデータを使ったら規則外のデータが入っていてエラーが出てしまいました。</div>
<strong><a href="EXCEL_VBA_449.html" tppabs="https://excel-ubara.com/excelvba4/EXCEL_VBA_449.html">Select Caseでの短絡評価（ショートサーキット）の使い方</a></strong><div class="details">VBAには、AndやOrの短絡評価（ショートサーキット）がありません。プログラミング言語によりますが、&amp;,|これらに対しての&amp;&amp;,||これらが短絡評価です。VB.Netなら、AndAlso,OrElseこれらが短絡評価になります。</div><br><div class="br2"><br></div>
</div>
<div class="main-indent">
<div class="ads1">
<script async src="../../pagead2.googlesyndication.com/pagead/js/adsbygoogle.js" tppabs="https://pagead2.googlesyndication.com/pagead/js/adsbygoogle.js"></script>
<ins class="adsbygoogle"
     style="display:block"
     data-ad-client="ca-pub-6511020045004282"
     data-ad-slot="7467492230"
     data-ad-format="auto"
     data-full-width-responsive="true"></ins>
<script>
     (adsbygoogle = window.adsbygoogle || []).push({});
</script>
</div></div><h3>VBAの制限とエラー対応：マクロVBA技術解説</h3>
<div class="main-indent">
    <strong><a href="EXCEL241.html" tppabs="https://excel-ubara.com/excelvba4/EXCEL241.html">入力規則のドロップダウンが消えてしまうマクロ（Shapes内のDrop Down）</a></strong><div class="details">シートのShapeを全削除すると、入力規則のリストのドロップダウンが消えてしまいます。入力規則のリストのドロップダウンの設定については、エクセル入門.入力規則.リスト こちらを参照して下さい。入力規則のリストのドロップダウンが消えてしまう具体的なマクロは、以下のようなVBAコードになります。</div>
    <strong><a href="EXCEL242.html" tppabs="https://excel-ubara.com/excelvba4/EXCEL242.html">実行時にトラップ可能なエラー番号一覧と対処</a></strong><div class="details">マクロVBA実行時に発生するエラーのエラー番号とエラーメッセージおよび簡単な理由と対策の一覧です。以下の表にあるエラーはトラップ（捕捉）できるエラー一覧になります。OnErrorステートメントおよびErrオブジェクトのNumberロパティを使用して、エラーへの対処を行うことができます。</div>
    <strong><a href="EXCEL250.html" tppabs="https://excel-ubara.com/excelvba4/EXCEL250.html">フォルダー・ファイル・ブック・シートの文字制限</a></strong><div class="details">フォルダーの作成、ファイルの作成、ブックの作成、シートの作成、これらには指定できない文字があります、使用可能な文字に制限があります、特にシートの文字制限について間違った解説が結構見受けられます。フォルダ・ファイル・ブックの文字制限 フォルダ・ファイル・ブックの使用不可文字は以下になります。</div>
    <strong><a href="EXCEL252.html" tppabs="https://excel-ubara.com/excelvba4/EXCEL252.html">Excel2013におけるScreenUpdatingの問題点</a></strong><div class="details">今現在、Excelの最新バージョンであるExcel2013ですが、Application.ScreenUpdating の動作が、それまでとは違ったものになっています。Microsoftサポートにも掲載されています。Excel2013で複数のブックを開きAppliction.ScreenUpdatingプロパティ使用中にアクティブブックが切り替わるとウィ…</div>
    <strong><a href="EXCEL262.html" tppabs="https://excel-ubara.com/excelvba4/EXCEL262.html">Dir関数の制限について</a></strong><div class="details">Dir関数は、VBAでフォルダ・ファイルの存在確認や一覧取得において使われる関数ですが、いくつかの使用上の注意点、制限事項があります。3桁拡張子の指定時の問題 このように指定した場合、xlsxやxlsmも対象となります。3桁の拡張子を指定した場合は、4桁の拡張子も対象となります。</div>
    <strong><a href="EXCEL265.html" tppabs="https://excel-ubara.com/excelvba4/EXCEL265.html">よくあるVBA実行時エラーの解説と対応</a></strong><div class="details">VBAを書き終えて、いざ実行したら意味不明なメッセージが… ここでは初心者向けに、代表的な実行時エラーの解説とその対応について説明します。中級者以上の方は、実行時にトラップ可能なエラー番号一覧と対処 こちらを参考に、エラー対応（OnError等）を実装してください。</div>
    <strong><a href="EXCEL272.html" tppabs="https://excel-ubara.com/excelvba4/EXCEL272.html">Application.Goto使用時の注意</a></strong><div class="details">Applicationのメソッドに、Gotoメソッドがあります、Application.Gotoメソッドは、指定ブックの、指定シートの、指定セル範囲を選択します、そのブック・シートがアクティブでなければアクティブにします。最初に、Application.Gotoの一般的な文法説明をします。</div>
    <strong><a href="EXCEL279.html" tppabs="https://excel-ubara.com/excelvba4/EXCEL279.html">ScreenUpdating=False時にエラー停止後にシートが固まったら</a></strong><div class="details">VBAでは、処理の高速化や画面チラつきを防ぐために、Application.ScreenUpdating=False これを入れていることが多いと思います。これが入っていると、VBAがエラーで停止して、そこで「リセット」した場合に、Excelシートをクリック出来なくなったり、シートタブの切り替えができなくなってしまう場合があります。</div>
    <strong><a href="EXCEL282.html" tppabs="https://excel-ubara.com/excelvba4/EXCEL282.html">標準スタイル違いの問題点：標準フォント複写、列幅をピクセルで合わせる</a></strong><div class="details">VBAでスタイルの標準フォントが違うブック間のコピー等の処理では、列幅や行高の違いが問題となる場合があります。列幅や行高は、標準スタイルの1文字分を基本としているためです。上の画像は、標準フォントが違うブックにおいて、同じ列幅20の時の、列幅の表示です。</div>
    <strong><a href="EXCEL_VBA_415.html" tppabs="https://excel-ubara.com/excelvba4/EXCEL_VBA_415.html">VBAでエラー行位置（行番号）を取得できるErl関数</a></strong><div class="details">VBAのデバッグでエラーが発生した行位置を特定する方法はいくつかあります。エラーが発生したVBAソースの行ラベルを取得することができる関数がErl関数です。Erl関数は、VB6に存在しVBAにも引き継がれ実装されているものです。</div>
<strong><a href="EXCEL226.html" tppabs="https://excel-ubara.com/excelvba4/EXCEL226.html">WorksheetFunction.Matchで配列を指定した場合の制限について</a></strong><div class="details">WorksheetFunctionでMatchを使いデータ検索する事は良くあります。この時、他の部分の記述との関係で、配列を指定してMatchを行う事があります。以下のようなVBAコードになります。これは正しく動作します。</div>
<strong><a href="EXCEL_VBA_434.html" tppabs="https://excel-ubara.com/excelvba4/EXCEL_VBA_434.html">VBAでシート関数使用時の配列要素数制限</a></strong><div class="details">VBAでワークシート関数が使えるのはとても便利です。WorksheetFunctionのシート関数を使う事は多いですが、配列を引数に指定した場合は要素数に制限があります。この制限があることは、ワークシート関数だという事を考えれば仕方ないのかもしれません。</div><br><div class="br2"><br></div>
</div>
<h3>処理速度対策と配列：マクロVBA技術解説</h3>
<div class="main-indent">
<strong><a href="EXCEL209.html" tppabs="https://excel-ubara.com/excelvba4/EXCEL209.html">配列の使い方について</a></strong><div class="details">配列に関する記事は多数掲載していますが、今回は配列についての基礎知識をまとめました。配列に関する基本的事項のみを解説しています。配列とは まずシートのセルを考えて下さい。縦１列だけを取り出した場合は、1次元の配列です。</div>
<strong><a href="EXCEL284.html" tppabs="https://excel-ubara.com/excelvba4/EXCEL284.html">VBAの配列まとめ（静的配列、動的配列）</a></strong><div class="details">VBAで配列を必要とするのは、処理速度を上げる為だと言って良いでしょう。そもそも、エクセルにはセルの2次元配列であるシートがあります。にもかかわらず、VBAの学習を進めると必ず配列が出てきます。ではなぜVBAで配列必須になるかと言うと、セルを使うと処理速度が非常に遅く、これを高速に処理するために配列が必要となるからです。</div>
<strong><a href="EXCEL203.html" tppabs="https://excel-ubara.com/excelvba4/EXCEL203.html">最終行の判定、Rangeオブジェクトと配列、高速化の為に</a></strong><div class="details">最終行の判定 エクセル顧客管理の記事からのスピンオフ記事になります。以前に、モジュール「顧客一覧へ登録」において、.Cells.SpecialCells(xlLastCell).End(xlUp).Row と Cells(Rows.Count,1).End(xlUp).).Row を紹介しましたが、</div>
<strong><a href="EXCEL205.html" tppabs="https://excel-ubara.com/excelvba4/EXCEL205.html">記述による処理速度の違い</a></strong><div class="details">記述の違いで、どの程度処理速度に変化があるかを検証します。どのような記述が処理速度に影響するかという点を分かり易くするために、あえて極端なマクロVBAで検証をしています。※本記事は2013年に書いたものを2019/2に再計測しつつ一部書き直したものです。</div>
<strong><a href="EXCEL212.html" tppabs="https://excel-ubara.com/excelvba4/EXCEL212.html">速度比較決定版【Range,Cells,Do,For,For Each】</a></strong><div class="details">何度も言っているのですが、RangeとCellsでどっちが早いか、とか、DoとForとFor Eachでどれが早いか とか、そもそも、その議論がナンセンスなんです。以下のコードと結果を見て、各自で判断して下さい。巷の議論が、いかに無意味で、実は良く解っていないのだと言う事を、理解してもらいたい。</div>
<strong><a href="EXCEL215.html" tppabs="https://excel-ubara.com/excelvba4/EXCEL215.html">エクセルVBAのパフォーマンス・処理速度に関するレポート</a></strong><div class="details">ExcelのVBAは遅い・重いと良く言われることが多いようですが、VBAが遅い・重いのではなく、その書かれたVBAコードが遅いのです。正しい高速化・速度対策をしたコードなら、それほど遅くはありません。むしろ、巨大なスプレッドシートを扱っている事を考えれば、驚異的なパフォーマンスとも言えるのです。</div>
<strong><a href="EXCEL225.html" tppabs="https://excel-ubara.com/excelvba4/EXCEL225.html">VBAのFindメソッドの使い方には注意が必要です</a></strong><div class="details">vbafindでの検索が極めて多く、Findメソッドは検索からの流入ではトップクラスです、アクセス解析で分かった事ですが正直少し戸惑っています。なぜなら私はFindメソッドをほとんど使いません、Match関数や配列を使って処理したほうが高速かつ確実に動作するからです。</div>
<strong><a href="EXCEL228.html" tppabs="https://excel-ubara.com/excelvba4/EXCEL228.html">マクロVBAの高速化・速度対策の具体的手順と検証</a></strong><div class="details">マクロVBAが遅い・重いという相談が非常に多いので、遅い・重いマクロVBAを高速化・速度対策する場合の具体的な手順をここに解説・検証します。マクロVBAの速度に関する記事は既にいくつか書いています。特に、以下はぜひお読みください。</div>
<strong><a href="EXCEL258.html" tppabs="https://excel-ubara.com/excelvba4/EXCEL258.html">動的2次元配列の次元を入れ替えてシートへ出力（Transpose）</a></strong><div class="details">動的配列を使い様々な処理をした後にシートへ出力しようとしたとき、縦横が違っている為そのまま出力できません、そもそも、動的配列の要素数をRedimで変更できるのは、最下位の次元のみになります。2次元配列の場合、ReDimmyArray(2,10) ReDimmyArray(2,11) これはOKですが、</div>
<strong><a href="EXCEL260.html" tppabs="https://excel-ubara.com/excelvba4/EXCEL260.html">大量データで処理時間がかかる関数の対処方法（WorksheetFunction）</a></strong><div class="details">大量データ処理において、一般的な速度対策をやってさえ、時に何時間もかかってしまう事があります、そういう場合でも、多くの場合は何らかの対策があるものです、個別のロジックの記述でこれらに対応する方法として、一つの有効なマクロVBAコ－ドについて解説します。以下の例で解説します。</div>
<strong><a href="EXCEL270.html" tppabs="https://excel-ubara.com/excelvba4/EXCEL270.html">大量データにおける処理方法の速度王決定戦</a></strong><div class="details">VBAで自動化したが、大量データ処理に時間がかかってしまう… そんな悩みが非常に多いようです、そこで、各種処理方法の速度比較を行い、どの処理方法が最も速いかを検証します。つまり、処理方法の速度王決定戦です。検証する題材としては、最も一般的な集計で行います。</div>
<strong><a href="EXCEL271.html" tppabs="https://excel-ubara.com/excelvba4/EXCEL271.html">遅い文字列結合を最速処理する方法について</a></strong><div class="details">VBAは遅い… よく聞くことですが、確かに普通にコード記述しているととても遅いことがあります、その代表の一つに、文字列結合があります、文字列結合を最速処理する方法について解説します。そもそも文字列結合は、なぜ遅いのか、String型（可変長文字列）についての基礎知識が必要です。</div>
<strong><a href="EXCEL280.html" tppabs="https://excel-ubara.com/excelvba4/EXCEL280.html">大量VlookupをVBAで高速に処理する方法について</a></strong><div class="details">大量データ同士のVlookup処理は、非常に時間のかかる処理となります、マクロVBAで、これを高速に処理する方法について、VBAコードを示し解説します。ワークシート上の関数の場合 シートに関数を入れる場合は、以下を参照してください。【奥義】大量データでの高速VLOOKUP 以下の表で検証します。</div>
<strong><a href="EXCEL_VBA_405.html" tppabs="https://excel-ubara.com/excelvba4/EXCEL_VBA_405.html">Withステートメントのマクロ実行速度と注意点</a></strong><div class="details">マクロVBAにおいてWithステートメントはとても重要です、可読性（読みやすさ、理解しやすさ）、実行速度においては、その役割はとても大きいものになります。本記事では、Withステートメントを使うか使わないかでのマクロ実行速度の差に焦点を絞って検証します。</div>
<strong><a href="EXCEL_VBA_406.html" tppabs="https://excel-ubara.com/excelvba4/EXCEL_VBA_406.html">IfステートメントとIIF関数とMax関数の速度比較</a></strong><div class="details">VBAの実行速度比較はとても良く読まれている人気記事となっていますが、そのほとんどは配列やDictionaryを使った少し高度なVBAでの比較が多くなっています。今回は極めて基本的な、大小比較して大きい方を返すという処理において、Ifステートメント、VBA関数のIIF関数、シート関数のMax関数 これらの処理速度を比較検証してみます。</div>
<strong><a href="EXCEL_VBA_429.html" tppabs="https://excel-ubara.com/excelvba4/EXCEL_VBA_429.html">スピルって速いの?スピルの速度について</a></strong><div class="details">Office365を導入する企業や個人で契約する人もかなり増えてきているようです。自然とスピルや新関数を使う事も増えてくるでしょう。今まで範囲内に同じ数式を入れるときは、絶対参照・相対参照を組み合わせて入れなければならず、これを難しく感じていた人も多いでしょう。</div><br><div class="br2"><br></div>
</div>
<div class="main-indent">
<div class="ads1">
<script async src="../../pagead2.googlesyndication.com/pagead/js/adsbygoogle.js" tppabs="https://pagead2.googlesyndication.com/pagead/js/adsbygoogle.js"></script>
<ins class="adsbygoogle"
     style="display:block; text-align:center;"
     data-ad-layout="in-article"
     data-ad-format="fluid"
     data-ad-client="ca-pub-6511020045004282"
     data-ad-slot="5140526405"></ins>
<script>
     (adsbygoogle = window.adsbygoogle || []).push({});
</script>
</div></div><h3>イベント：マクロVBA技術解説</h3>
<div class="main-indent">
<strong><a href="EXCEL206.html" tppabs="https://excel-ubara.com/excelvba4/EXCEL206.html">イベント処理について</a></strong><div class="details">VBAのイベントについての概要解説です。ワークブックのイベント VBEの操作動画です。上図の、「プロジェクト」で、「ThisWorkbook」を選択し、「表示」→「コード」、または、F7、または「ThisWorkbook」をダブルクリックします。</div>
<strong><a href="EXCEL239.html" tppabs="https://excel-ubara.com/excelvba4/EXCEL239.html">ブックが開いた時に自動実行（Workbook_OpenとAuto_Open）</a></strong><div class="details">Excelブックを開いた時にVBAを自動実行させる方法として、Workbook_OpenとAuto_Open この2通りの方法があります。それぞれの簡単な説明と、動作の違いを解説します。Workbook_Open Workbook_Openは、ブックが開かれたときに起動されるブックのイベントプロシージャーになります。</div>
<strong><a href="EXCEL240.html" tppabs="https://excel-ubara.com/excelvba4/EXCEL240.html">ブックが閉じる時に自動実行（Workbook_BeforeCloseとAuo_Close）</a></strong><div class="details">Excelブックを閉じる時にVBAを自動実行させる方法として、Workbook_BeforeClose Auo_Close この2通りの方法があります。それぞれの簡単な説明と、動作の違いを解説します。Workbook_BeforeClose Workbook_Closeは、ブックが閉じられたときに起動されるブックのイベントプロシージャーになります。</div>
<strong><a href="../vba_class/VBA_CLASS_12.html" tppabs="https://excel-ubara.com/vba_class/VBA_CLASS_12.html">VBAクラスを使ったイベント作成（Event,RaiseEvent,WithEvents）</a></strong><div class="details">VBAクラスを使う事で、ユーザー定義イベントを作成したり、動的にイベントを割り当てる事が出来ます。ユーザー独自のイベントを作成したり、フォームに動的に追加したコントロールにイベントを設定することができます。EventステートメントとRaiseEventステートメントを使う事で、ユーザー定義イベントつまりユーザー独自のイベントを作成できます。</div><br><div class="br2"><br></div>
</div>
<h3>Excel Application外のオブジェクト：マクロVBA技術解説</h3>
<div class="main-indent"><strong><a href="EXCEL227.html" tppabs="https://excel-ubara.com/excelvba4/EXCEL227.html">事前バインディングと遅延バインディング（実行時バインディング）</a></strong><div class="details">VBAでActiveXオブジェクトを操作する場合のVBA記述方法が2通りあります。オブジェクトがオブジェクト変数に代入されるとき、事前バインディングと遅延バインディング（実行時バインディング）の2通りです。バインディングとは バインディングはbindingで、縛るとか束ねると言う意味の英単語です。</div>
<strong><a href="EXCEL216.html" tppabs="https://excel-ubara.com/excelvba4/EXCEL216.html">Dictionary（ディクショナリー）連想配列の使い方について</a></strong><div class="details">「Dictionaryオブジェクトについて簡単な使用例を上げて解説して欲しいです。」との要望をいただいたので、Dictionaryについて基本的な使い方を解説します。Dictionary（ディクショナリー）は名前の通り、辞書機能であり、連想配列とも呼ばれます。</div>
<strong><a href="EXCEL268.html" tppabs="https://excel-ubara.com/excelvba4/EXCEL268.html">Dictionary（ディクショナリー）のパフォーマンスについて</a></strong><div class="details">Dictionary（ディクショナリー）は辞書機能で、連想配列とも呼ばれます。この辞書は、重複は許されず、キーとデータの２つが存在します、今回はこのDictionaryのパフォーマンス（処理速度）を検証します。Dictionaryの基本的な使い方については、こちらを参照してください。</div>
<strong><a href="EXCEL217.html" tppabs="https://excel-ubara.com/excelvba4/EXCEL217.html">VBAでのInternetExplorer自動操作</a></strong><div class="details">VBAでInternetExplorerを操作する場合の基本について解説します。VBAでInternetExplorerを操作し、Webのデータを取得したり、リンクをクリックしたり、これらを自動で行う事が出来ます。定型的なブラウザ操作であれば、VBAで自動化することで大きな省力化になります。</div>
<strong><a href="EXCEL224.html" tppabs="https://excel-ubara.com/excelvba4/EXCEL224.html">VBAでのSQLの基礎（SQL:Structured Query Language）</a></strong><div class="details">SQL(StructuredQueryLanguage：構造化問い合わせ言語)は、データベースの定義や表の操作を行う言語です。データ定義言語であるDDL(datadescriptionlanguage)と データ操作言語であるDML(datamanipulationlanguage)に分けられます。</div>
<strong><a href="EXCEL232.html" tppabs="https://excel-ubara.com/excelvba4/EXCEL232.html">VBAで正規表現を利用する（RegExp）</a></strong><div class="details">正規表現は複雑なパターンマッチングとテキストの検索置換するためのツールです、VBAで正規表現を使う場合はRegExpオブジェクトを使用します、RegExpは、VBScriptに正規表現として用意されているオブジェクトです。目次 メタ文字 正規表現 正規表現RegExpの使い方 RegExpオブジェクト RegExpの使用例 RegExp関連のオブジェクト…</div>
<strong><a href="EXCEL233.html" tppabs="https://excel-ubara.com/excelvba4/EXCEL233.html">VBAでメール送信する（CDO:Microsoft Collaboration Data Objects）</a></strong><div class="details">VBAでメール送信する方法はいろいろありますが、ここでは、CDO(MicrosoftCollaborationDataObjects)を使っての送信方法を解説します。メール送信は、メーラーを使う方法や、フリーのDLLを使う方法等もありますが、まずは、Windowsに標準であるCDOを使ってみましょう。</div>
<strong><a href="EXCEL245.html" tppabs="https://excel-ubara.com/excelvba4/EXCEL245.html">VBAでのOutlook自動操作</a></strong><div class="details">エクセルでメールの送受信する方法はいくつかありますが、なかなか面倒ですし、サポートされない機能（CDOは送信のみ）があったりと、不便な事が多いです。そこで、Excelを使っていると言う事は、大抵はOutlookもインストールされているはずですので、これを使って、メールの送受信を行うという選択をすることは自然な流れです。</div>
<strong><a href="EXCEL273.html" tppabs="https://excel-ubara.com/excelvba4/EXCEL273.html">ADO(ActiveX Data Objects)の使い方の要点</a></strong><div class="details">ADOはMicrosoftが提供するデータベースアクセスのためのソフトウェア部品です。OLEDBをActiveXコントロールの形で使えるようにしたプログラミングインターフェースになります。ここでは、ADOを使用したデータベースへの接続方法を解説します。</div>
<strong><a href="EXCEL293.html" tppabs="https://excel-ubara.com/excelvba4/EXCEL293.html">特殊フォルダの取得（WScript.Shell,SpecialFolders）</a></strong><div class="details">デスクトップのフォルダ、スタートメニューのフォルダ、個人用ドキュメントのフォルダなど、Windowsの特殊フォルダを取得するには、ネイティブのWindowsシェルへのアクセスを提供するWScript.ShellのSpecialFoldersプロパティを使用します。CreateObject関数で作成したWscript.ShellのSpecialFolder…</div>
<strong><a href="EXCEL296.html" tppabs="https://excel-ubara.com/excelvba4/EXCEL296.html">参照設定、CreateObject、オブジェクト式の一覧</a></strong><div class="details">VBAでエクセル外のオブジェクトを使うときには、事前バインディングと遅延バインディング（実行時バインディング）の２通りがあります、この時それぞれ何を指定したらよいのか、指定する文字列が長いので結構探してしまうことが度々あります。そこで、自身の覚え書きとしての意味も含めて、参照設定、CreateObjectのclass、</div>
<strong><a href="EXCEL_VBA_401.html" tppabs="https://excel-ubara.com/excelvba4/EXCEL_VBA_401.html">VBAのスクレイピングを簡単楽にしてくれるSelenium</a></strong><div class="details">VBAでWebスクレイピングする方法としてIE自動操作がありますが、VBA記述が結構面倒になります、もっと簡単にスマートにVBAを書きたいと思ったら…SeleniumBasicを使ってみましょう。SeleniumBasicは、エクセルVBAでのWeb閲覧を自動化することを強力かつ簡単に実現してくれます。</div>
<strong><a href="EXCEL_VBA_402.html" tppabs="https://excel-ubara.com/excelvba4/EXCEL_VBA_402.html">VBA+SeleniumBasicで検索順位チェッカー作成</a></strong><div class="details">VBAでSeleniumBasicを使って検索順位チェッカーを作ってみます。SEO対策として各キーワードでの検索順位チェックは欠かせませんが、簡単に使えてキーワードを大量に指定できる良いツールがなかなかありません。Google検索をスクレイピングすることは、Google利用規約に反する可能性があります。</div>
<strong><a href="EXCEL_VBA_404.html" tppabs="https://excel-ubara.com/excelvba4/EXCEL_VBA_404.html">VBA+SeleniumBasicで検索順位チェッカー（改）</a></strong><div class="details">VBAでSeleniumBasicを使って検索順位チェッカーを作り、Google検索順位の履歴を管理します、既に作成解説した、VBA+SeleniumBasicで検索順位チェッカー作成こちらの改訂版になります。Google検索をスクレイピングすることは、Google利用規約に反する可能性があります。</div><br><div class="br2"><br></div>
</div>

          
<HR>
<div class="ads1">
<center>
<script async src="../../pagead2.googlesyndication.com/pagead/js/adsbygoogle.js" tppabs="https://pagead2.googlesyndication.com/pagead/js/adsbygoogle.js"></script>
<!-- yama3 -->
<ins class="adsbygoogle"
     style="display:block"
     data-ad-client="ca-pub-6511020045004282"
     data-ad-slot="8239480723"
     data-ad-format="auto"
     data-full-width-responsive="true"></ins>
<script>
     (adsbygoogle = window.adsbygoogle || []).push({});
</script>

<script async src="../../pagead2.googlesyndication.com/pagead/js/adsbygoogle.js" tppabs="https://pagead2.googlesyndication.com/pagead/js/adsbygoogle.js"></script>
<ins class="adsbygoogle"
     style="display:block"
     data-ad-format="autorelaxed"
     data-ad-client="ca-pub-6511020045004282"
     data-ad-slot="6847508570"></ins>
<script>
     (adsbygoogle = window.adsbygoogle || []).push({});
</script>
</center>
</div>
          <section>
          
          </section>
          <section id="new">
<br><h3><A name="new">新着記事<span class="newicon">NEW</span> </a>・・・<A href="../EXCELNEW.html" tppabs="https://excel-ubara.com/EXCELNEW.html">新着記事一覧を見る</A></h3><p><A href="../vba100/VBA100_100.html" tppabs="https://excel-ubara.com/vba100/VBA100_100.html">VBA100本ノック 100本目：WEBから100本ノックのリストを取得｜VBA練習問題</A>（3月3日）<br>
<A href="../vba100/VBA100_099.html" tppabs="https://excel-ubara.com/vba100/VBA100_099.html">VBA100本ノック 99本目：自動席替え（行列と前後左右が全て違うように）｜VBA練習問題</A>（3月2日）<br>
<A href="../vba100/VBA100_098.html" tppabs="https://excel-ubara.com/vba100/VBA100_098.html">VBA100本ノック 98本目：席替えルールが守られているか確認｜VBA練習問題</A>（3月1日）<br>
<A href="../vba100/VBA100_097.html" tppabs="https://excel-ubara.com/vba100/VBA100_097.html">VBA100本ノック 97本目：Accessデータを取得（グループ集計）｜VBA練習問題</A>（2月27日）<br>
<A href="../vba100/VBA100_096.html" tppabs="https://excel-ubara.com/vba100/VBA100_096.html">VBA100本ノック 96本目：Accessデータを取得（マスタ結合&amp;抽出）｜VBA練習問題</A>（2月26日）<br>
<A href="../vba100/VBA100_095.html" tppabs="https://excel-ubara.com/vba100/VBA100_095.html">VBA100本ノック 95本目：図形のテキストを検索するフォーム作成｜VBA練習問題</A>（2月24日）<br>
<A href="../vba100/VBA100_094.html" tppabs="https://excel-ubara.com/vba100/VBA100_094.html">VBA100本ノック 94本目：表範囲からHTMLのtableタグを作成｜VBA練習問題</A>（2月23日）<br>
<A href="../vba100/VBA100_093.html" tppabs="https://excel-ubara.com/vba100/VBA100_093.html">VBA100本ノック 93本目：複数ブックを連結して再分割｜VBA練習問題</A>（2月22日）<br>
<A href="../vba100/VBA100_092.html" tppabs="https://excel-ubara.com/vba100/VBA100_092.html">VBA100本ノック 92本目：セルの色を16進で返す関数｜VBA練習問題</A>（2月20日）<br>
<A href="../vba100/VBA100_091.html" tppabs="https://excel-ubara.com/vba100/VBA100_091.html">VBA100本ノック 91本目：時間計算（残業時間の月間合計）｜VBA練習問題</A>（2月19日）<br></p>

          </section>
          <section id="rank">
<br><h3><A name="rank">アクセスランキング </a>・・・ <A href="../EXCELRANK.html" tppabs="https://excel-ubara.com/EXCELRANK.html">ランキング一覧を見る</A></h3><p>1.<A href="../excelvba1/EXCELVBA318.html" tppabs="https://excel-ubara.com/excelvba1/EXCELVBA318.html">最終行の取得（End,Rows.Count）｜VBA入門</A><br>2.<A href="../excelvba1/EXCELVBA311.html" tppabs="https://excel-ubara.com/excelvba1/EXCELVBA311.html">RangeとCellsの使い方｜VBA入門</A><br>3.<A href="../excelvba1/EXCELVBA312.html" tppabs="https://excel-ubara.com/excelvba1/EXCELVBA312.html">変数宣言のDimとデータ型｜VBA入門</A><br>4.<A href="../excelvba1/EXCELVBA301.html" tppabs="https://excel-ubara.com/excelvba1/EXCELVBA301.html">マクロって何？VBAって何？｜VBA入門</A><br>5.<A href="../excelvba1/EXCELVBA310.html" tppabs="https://excel-ubara.com/excelvba1/EXCELVBA310.html">Range以外の指定方法（Cells,Rows,Columns）｜VBA入門</A><br>6.<A href="../excelvba1/EXCELVBA341.html" tppabs="https://excel-ubara.com/excelvba1/EXCELVBA341.html">セルのコピー&amp;値の貼り付け（PasteSpecial）｜VBA入門</A><br>7.<A href="../excelvba1/EXCELVBA316.html" tppabs="https://excel-ubara.com/excelvba1/EXCELVBA316.html">繰り返し処理（For Next)｜VBA入門</A><br>8.<A href="../excelvba1/EXCELVBA308.html" tppabs="https://excel-ubara.com/excelvba1/EXCELVBA308.html">セルに文字を入れるとは（Range,Value）｜VBA入門</A><br>9.<A href="../excelvba1/EXCELVBA304.html" tppabs="https://excel-ubara.com/excelvba1/EXCELVBA304.html">マクロはどこに書くの（VBEの起動）｜VBA入門</A><br>10.<A href="../excelvba1/EXCELVBA306.html" tppabs="https://excel-ubara.com/excelvba1/EXCELVBA306.html">とにかく書いてみよう（Sub,End Sub）｜VBA入門</A><br></p>
          </section>
<br>
          <HR>
          <div><ul>
<li><a href="../index.htm" tppabs="https://excel-ubara.com/">ホーム</a></li>
<li><a href="../excel_vba2.html" tppabs="https://excel-ubara.com/excel_vba2.html">マクロVBA応用編</a></li>
<li><span class="strrev2"><strong>VBA技術解説：マクロで良くある問題や使い方を解説</strong></span></li>
</ul></div><br>
          <strong>このサイトがお役に立ちましたら「シェア」「Bookmark」をお願いいたします。</strong><br>
          <div class="ninja_onebutton">
            <script type="text/javascript">
              //<![CDATA[
              (function(d){
              if(typeof(window.NINJA_CO_JP_ONETAG_BUTTON_dbb4ddbe09aac6bed0b2564afb27c6f2)=='undefined'){
                  document.write("<sc"+"ript type='text\/javascript' src='\/\/omt.shinobi.jp\/b\/dbb4ddbe09aac6bed0b2564afb27c6f2'><\/sc"+"ript>");
              }else{
                  window.NINJA_CO_JP_ONETAG_BUTTON_dbb4ddbe09aac6bed0b2564afb27c6f2.ONETAGButton_Load();}
              })(document);
              //]]>
            </script><span class="ninja_onebutton_hidden" style="display:none;"></span><span style="display:none;" class="ninja_onebutton_hidden"></span>
          </div>
<br>
          <script>
            (function() {
              var cx = 'partner-pub-6511020045004282:1071452572';
              var gcse = document.createElement('script');
              gcse.type = 'text/javascript';
              gcse.async = true;
              gcse.src = 'https://cse.google.com/cse.js?cx=' + cx;
              var s = document.getElementsByTagName('script')[0];
              s.parentNode.insertBefore(gcse, s);
            })();
          </script>
          <gcse:searchbox-only></gcse:searchbox-only>
<br>
          記述には細心の注意をしたつもりですが、<br>
          間違いやご指摘がありましたら、<A href="../query.html" tppabs="https://excel-ubara.com/query.html" target="_blank">「お問い合わせ」</A>からお知らせいただけると幸いです。<br>
          掲載のVBAコードは動作を保証するものではなく、あくまでVBA学習のサンプルとして掲載しています。<br>
          掲載のVBAコードは自己責任でご使用ください。万一データ破損等の損害が発生しても責任は負いません。
        </section>
      </div> <!--/#main-->

      <div id="sub">
        <nav>
          <h2>エクセル全般</h2>
          <ul class="submenu">
            <li><A href="../excel1/index.htm" tppabs="https://excel-ubara.com/excel1/">エクセル入門</A></li>
            <li><A href="../excel2/index.htm" tppabs="https://excel-ubara.com/excel2/">エクセル基本操作</A></li>
            <li><A href="../excel3/index.htm" tppabs="https://excel-ubara.com/excel3/">エクセル関数応用</A></li>
            <li><A href="../excel4/index.htm" tppabs="https://excel-ubara.com/excel4/">エクセル挑戦問題</A></li>
            <li><A href="../EXCEL/excel_reference.html" tppabs="https://excel-ubara.com/EXCEL/excel_reference.html">Excelリファレンス</A></li>
            <li><A href="../excel5/index.htm" tppabs="https://excel-ubara.com/excel5/">エクセル雑感</A></li>
          </ul>
          <h2>マクロVBA入門編</h2>
          <ul class="submenu">
            <li><A href="../excelvba1/index.htm" tppabs="https://excel-ubara.com/excelvba1/">マクロVBA入門</A></li>
            <li><A href="../excelvba1r/index.htm" tppabs="https://excel-ubara.com/excelvba1r/">マクロVBA再入門</A></li>
            <li><A href="../excelvba2/index.htm" tppabs="https://excel-ubara.com/excelvba2/">マクロ記録でVBA</A></li>
            <li><A href="../excelvba9/index.htm" tppabs="https://excel-ubara.com/excelvba9/">マクロVBA練習問題</A></li>
            <li><A href="../MOS_VBA/index.htm" tppabs="https://excel-ubara.com/MOS_VBA/">VBAエキスパート対策</A></li>
            <li><A href="../excelvba8/index.htm" tppabs="https://excel-ubara.com/excelvba8/">マクロVBA関数</A></li>
            <li><A href="../vba100/index.htm" tppabs="https://excel-ubara.com/vba100/">VBA100本ノック</A></li>
          </ul>
          <h2>マクロVBA応用編</h2>
          <ul class="submenu">
            <li><A href="../excelvba3/index.htm" tppabs="https://excel-ubara.com/excelvba3/">ユーザーフォーム入門</A></li>
            <li><A href="../vba_class/index.htm" tppabs="https://excel-ubara.com/vba_class/">VBAクラス入門</A></li>
            <li><A href="../excelvba5/index.htm" tppabs="https://excel-ubara.com/excelvba5/">マクロVBAサンプル集</A></li>
            <li><A href="index.htm" tppabs="https://excel-ubara.com/excelvba4/">マクロVBA技術解説</A></li>
            <li><A href="../excelvba7/index.htm" tppabs="https://excel-ubara.com/excelvba7/">エクセル顧客管理</A></li>
            <li><A href="../EXCEL/vba_reference.html" tppabs="https://excel-ubara.com/EXCEL/vba_reference.html">VBAリファレンス</A></li>
          </ul>
          <h2>その他（Excel以外）</h2>
          <ul class="submenu">
            <li><a href="../vba_sql/index.htm" tppabs="https://excel-ubara.com/vba_sql/">SQL入門</a></li>
            <li><A href="../spreadsheet1/index.htm" tppabs="https://excel-ubara.com/spreadsheet1/">スプレッドシート入門</A></li>
            <li><A href="../apps_script1/index.htm" tppabs="https://excel-ubara.com/apps_script1/">GAS入門</A></li>
            <li><A href="../python/index.htm" tppabs="https://excel-ubara.com/python/">Python入門</A></li>
          </ul>
          <h2>サイト案内</h2>
          <ul class="submenu">
            <li><A href="../EXCELNEW.html" tppabs="https://excel-ubara.com/EXCELNEW.html">新着記事一覧</A></li>
            <li><A href="../EXCELRANK.html" tppabs="https://excel-ubara.com/EXCELRANK.html">アクセスランキング</A></li>
            <li><A href="../sitemap.html" tppabs="https://excel-ubara.com/sitemap.html">サイトマップ</A></li>
            <li><a href="../business/index.htm" tppabs="https://excel-ubara.com/business/">事業案内</a></li>
            <li><A href="../query.html" tppabs="https://excel-ubara.com/query.html">お問い合わせ&nbsp&nbsp</A></li>
          </ul>
        </nav>

        <section>
          
<HR>
<div class="ads1">
<CENTER>
<script async src="../../pagead2.googlesyndication.com/pagead/js/adsbygoogle.js" tppabs="https://pagead2.googlesyndication.com/pagead/js/adsbygoogle.js"></script>
<!-- yama22 -->
<ins class="adsbygoogle"
     style="display:block"
     data-ad-client="ca-pub-6511020045004282"
     data-ad-slot="9686142173"
     data-ad-format="auto"
     data-full-width-responsive="true"></ins>
<script>
     (adsbygoogle = window.adsbygoogle || []).push({});
</script>
</CENTER>
</div>
          

          

          <HR>
          <div><ul>
<li><a href="../index.htm" tppabs="https://excel-ubara.com/">ホーム</a></li>
<li><a href="../excel_vba2.html" tppabs="https://excel-ubara.com/excel_vba2.html">マクロVBA応用編</a></li>
<li><span class="strrev2"><strong>VBA技術解説：マクロで良くある問題や使い方を解説</strong></span></li>
</ul></div><br>
          このサイトがお役に立ちましたら「シェア」「Bookmark」をお願いいたします。<br>

          <div class="ninja_onebutton">
            <script type="text/javascript">
              //<![CDATA[
              (function(d){
              if(typeof(window.NINJA_CO_JP_ONETAG_BUTTON_dbb4ddbe09aac6bed0b2564afb27c6f2)=='undefined'){
                  document.write("<sc"+"ript type='text\/javascript' src='\/\/omt.shinobi.jp\/b\/dbb4ddbe09aac6bed0b2564afb27c6f2'><\/sc"+"ript>");
              }else{
                  window.NINJA_CO_JP_ONETAG_BUTTON_dbb4ddbe09aac6bed0b2564afb27c6f2.ONETAGButton_Load();}
              })(document);
              //]]>
            </script><span class="ninja_onebutton_hidden" style="display:none;"></span><span style="display:none;" class="ninja_onebutton_hidden"></span>
          </div>
          本文下部へ<br>
          <div class="main-indent">
            <strong><A href="#same">同じテーマの記事</A></strong><br>
            <strong><A href="#new">新着記事</A></strong><br>
            <strong><A href="#rank">アクセスランク</A></strong><br>
          </div>
          <div class="ads2">
            <script>
              (function() {
                var cx = 'partner-pub-6511020045004282:1071452572';
                var gcse = document.createElement('script');
                gcse.type = 'text/javascript';
                gcse.async = true;
                gcse.src = 'https://cse.google.com/cse.js?cx=' + cx;
                var s = document.getElementsByTagName('script')[0];
                s.parentNode.insertBefore(gcse, s);
              })();
            </script>
            <gcse:searchbox-only></gcse:searchbox-only>
          </div>
          
          

          
<HR>
<div class="ads2">
<script async src="../../pagead2.googlesyndication.com/pagead/js/adsbygoogle.js" tppabs="https://pagead2.googlesyndication.com/pagead/js/adsbygoogle.js"></script>
<!-- 新サイド下 -->
<ins class="adsbygoogle"
     style="display:block"
     data-ad-client="ca-pub-6511020045004282"
     data-ad-slot="1968934163"
     data-ad-format="auto"
     data-full-width-responsive="true"></ins>
<script>
     (adsbygoogle = window.adsbygoogle || []).push({});
</script>
</div><br>
        </section>
      </div> <!--/#sub-->
    </div> <!--/#contents-in-->
  </div> <!--/#contents-->

  <footer>
    <div id="footermenu" class="inner">
      <ul>
        <li><a href="../excel_index.html" tppabs="https://excel-ubara.com/excel_index.html">■Excel全般</a></li>
        <li><A href="../excel1/index.htm" tppabs="https://excel-ubara.com/excel1/">エクセル入門</A></li>
        <li><A href="../excel2/index.htm" tppabs="https://excel-ubara.com/excel2/">エクセル基本操作</A></li>
        <li><A href="../excel3/index.htm" tppabs="https://excel-ubara.com/excel3/">エクセル関数応用</A></li>
        <li><A href="../excel4/index.htm" tppabs="https://excel-ubara.com/excel4/">エクセル挑戦問題</A></li>
        <li><A href="../EXCEL/excel_reference.html" tppabs="https://excel-ubara.com/EXCEL/excel_reference.html">Excelリファレンス</A></li>
        <li><A href="../excel5/index.htm" tppabs="https://excel-ubara.com/excel5/">エクセル雑感</A></li>
      </ul>
      <ul>
        <li><a href="../excel_vba1.html" tppabs="https://excel-ubara.com/excel_vba1.html">■マクロVBA入門編</a></li>
        <li><A href="../excelvba1/index.htm" tppabs="https://excel-ubara.com/excelvba1/">マクロVBA入門</A></li>
        <li><A href="../excelvba1r/index.htm" tppabs="https://excel-ubara.com/excelvba1r/">マクロVBA再入門</A></li>
        <li><A href="../excelvba2/index.htm" tppabs="https://excel-ubara.com/excelvba2/">マクロ記録でVBA</A></li>
        <li><A href="../excelvba9/index.htm" tppabs="https://excel-ubara.com/excelvba9/">マクロVBA練習問題</A></li>
        <li><A href="../MOS_VBA/index.htm" tppabs="https://excel-ubara.com/MOS_VBA/">VBAエキスパート対策</A></li>
        <li><A href="../excelvba8/index.htm" tppabs="https://excel-ubara.com/excelvba8/">マクロVBA関数</A></li>
        <li><A href="../vba100/index.htm" tppabs="https://excel-ubara.com/vba100/">VBA100本ノック</A></li>
      </ul>
      <ul>
        <li><a href="../excel_vba2.html" tppabs="https://excel-ubara.com/excel_vba2.html">■マクロVBA応用編</a></li>
        <li><A href="../excelvba3/index.htm" tppabs="https://excel-ubara.com/excelvba3/">ユーザーフォーム入門</A></li>
        <li><A href="../vba_class/index.htm" tppabs="https://excel-ubara.com/vba_class/">VBAクラス入門</A></li>
        <li><A href="../excelvba5/index.htm" tppabs="https://excel-ubara.com/excelvba5/">マクロVBAサンプル集</A></li>
        <li><A href="index.htm" tppabs="https://excel-ubara.com/excelvba4/">マクロVBA技術解説</A></li>
        <li><A href="../excelvba7/index.htm" tppabs="https://excel-ubara.com/excelvba7/">エクセル顧客管理</A></li>
        <li><A href="../EXCEL/vba_reference.html" tppabs="https://excel-ubara.com/EXCEL/vba_reference.html">VBAリファレンス</A></li>
      </ul>
      <ul>
        <li><A href="../python/index.htm" tppabs="https://excel-ubara.com/python/">■Python入門</A></li>
        <li><a href="../vba_sql/index.htm" tppabs="https://excel-ubara.com/vba_sql/">■SQL入門</a></li>
        <li><A href="../spreadsheet1/index.htm" tppabs="https://excel-ubara.com/spreadsheet1/">■スプレッドシート入門</A></li>
        <li><A href="../apps_script1/index.htm" tppabs="https://excel-ubara.com/apps_script1/">■Google Apps Script入門</A></li>
        <li><A href="../excel_course/index.htm" tppabs="https://excel-ubara.com/excel_course/">■エクセル講座セミナー</A></li>
        <li><A href="../business/index.htm" tppabs="https://excel-ubara.com/business/">■事業案内</A></li>
        <li><A href="../business/sitemap.html" tppabs="https://excel-ubara.com/business/sitemap.html">■サイトマップ</A></li>
      </ul>
    </div> <!--/footermenu-->
    <div id="copyright">
      <small>エクセルの神髄 ｜ Copyright&copy; 2010 <A href="../index.htm" tppabs="https://excel-ubara.com/">鵜原パソコンソフト研究所</A></small>
    </div>
  </footer>

  <p class="nav-fix-pos-pagetop"><a href="#">↑</a></p>

  <script type="text/javascript">
    var _gaq = _gaq || [];
    _gaq.push(['_setAccount', 'UA-37178461-1']);
    _gaq.push(['_trackPageview']);
    (function() {
      var ga = document.createElement('script'); ga.type = 'text/javascript'; ga.async = true;
      ga.src = ('https:' == document.location.protocol ? 'https://ssl' : 'https://www') + '.google-analytics.com/ga.js';
      var s = document.getElementsByTagName('script')[0]; s.parentNode.insertBefore(ga, s);
    })();
  </script>
<!--License20150309TPg-->
</body>
</html>
