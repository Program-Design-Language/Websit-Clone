<!DOCTYPE html>
<html>
<head>
<meta charset="utf-8">
<title>構文 - とほほのWWW入門</title>
<meta name="viewport" content="width=device-width,initial-scale=1.0">
<link rel="stylesheet" href="../style3.css" tppabs="http://www.tohoho-web.com/style3.css">
</head>
<body>

<h2>構文</h2>
<a href="index.htm" tppabs="http://www.tohoho-web.com/js/index.htm">[up]</a>
<a href="basic.htm" tppabs="http://www.tohoho-web.com/js/basic.htm">[prev]</a>
<a href="operator.htm" tppabs="http://www.tohoho-web.com/js/operator.htm">[next]</a>

<h4>一覧</h4>
<div class=i>
<a href="#break">break</a>,
<a href="#case">case</a>,
<a href="#catch">catch</a>,
<a href="#const">const</a>,
<a href="#continue">continue</a>,
<a href="#debugger">debugger</a>,
<a href="#do">do</a>,
<a href="#else">else</a>,
<a href="#finally">finally</a>,
<a href="#for">for</a>,
<a href="#for2">for in</a>,
<a href="#goto">goto</a>,
<a href="#if">if</a>,
<a href="#let">let</a>,
<a href="#switch">switch</a>,
<a href="#throw">throw</a>,
<a href="#try">try</a>,
<a href="#while">while</a>,
<a href="#var">var</a>,
<a href="#with">with</a>
</div>

<h4 id="block">複文(ブロック)</h4>
<div class=i>
<p>複数の文を { ... } で囲むことにより、ひとつの文として扱うことができます。これを複文またはブロックと呼びます。</p>
<div class="title-tab">JavaScript</div>
<pre class=c2>
<em>{</em>
  xx = 3;
  yy = 5;
  zz = xx + yy;
<em>}</em>
</pre>
</div>

<h4 id="var_let">変数・定数宣言</h4>

<h5 id="var">◆ 変数宣言(var)</h5>
<div class=i>
<p>変数の使用開始を明示的に宣言するには、<b>var</b> を用います。</p>
<div class="title-tab">JavaScript</div>
<pre class=c2>
<em>var</em> xx = 5;
<em>var</em> yy = 8;
<em>var</em> zz = xx + yy;
</pre>
</div>

<h5 id="let">◆ 変数宣言(let)</h5>
<div class=i>
<p><a href="what.htm#version" tppabs="http://www.tohoho-web.com/js/what.htm#version">ES2015(ES6)</a> からは、<b>var</b> の後継として <b>let</b> がサポートされました。let で定義した変数は、そのブロックの中だけで有効な局所変数となります。これにより、ブロック内で使用する変数が、ブロック外の変数の値を誤って上書きしてしまうリスクを低減することができます。Chrome 41, Firefox 44, Internet Explorer 11, Edge 12, Opera 17 から使用可能です。</p>
<div class="title-tab">JavaScript</div>
<pre class=c2>
var a = 3;
<em>let</em> b = 3;
{
  var a = 5;
  <em>let</em> b = 5;
}
console.log(a);    <span class="comment">// 5 (ブロック内で上書きされてしまう)</span>
console.log(b);    <span class="comment">// 3 (ブロック内で上書きされない)</span>
</pre>
<p><a href="statement.htm#for" tppabs="http://www.tohoho-web.com/js/statement.htm#for">for文</a> で使用する変数にも let を用いることで、ループ変数をより安全に使用することができます。</p>
<div class="title-tab">JavaScript</div>
<pre class=c2>
for (<em>let</em> i = 0; i &lt; 10; i++) {
  console.log(i);
}
</pre>
</div>

<h5 id="const">◆ 定数宣言(const)</h5>
<div class=i>
<p><a href="what.htm#version" tppabs="http://www.tohoho-web.com/js/what.htm#version">ES6(ES2015)</a> ではまた、定数を定義する <b>const</b> がサポートされました。const を用いて定義された定数に値を代入しようとすると、TypeError が発生します。Chrome 21, Firefox 36, Internet Explorer 11, Edge 12, Opera 12, Safari 5.1 から使用可能です。</p>
<div class="title-tab">JavaScript</div>
<pre class=c2>
<em>const</em> a = 5;
a = 8;        <span class="comment">// TypeError</span>
</pre>
</div>

<h4 id="stIf">条件分岐（if）</h4>

<h5 id="if">◆ if (<i>expression</i>) <i>statements1</i> <span id="else">else</span> <i>statements2</i></h5>
<div class=i>
<p><i>expression</i> が真であれば <i>statements1</i> を、さもなくば <i>statements2</i> を実行します。例えば次の例では、変数 n の値が 10 より小さければ、Small! を、さもなくば Big! を表示します。</p>
<div class="title-tab">JavaScript</div>
<pre class=c2>
n = 5;
<em>if (</em>n &lt; 10<em>) {</em>
  alert("Small!");
<em>} else {</em>
  alert("Big!");
<em>}</em>
</pre>
<p>else 以降は記述しない場合もあります。</p>
<div class="title-tab">JavaScript</div>
<pre class=c2>
if (n &lt; 10) {
  alert("Small!");
}
</pre>
<p>次のような書き方もできます。</p>
<div class="title-tab">JavaScript</div>
<pre class=c2>
if (n &lt; 10) {
  alert("Small!");      <span class="comment">// 10より小さければ Small! を</span>
} else if (n &gt; 20) {
  alert("Big!");        <span class="comment">// 20より大きければ Big! を</span>
} else {
  alert("Normal");      <span class="comment">// さもなくば Normal を表示</span>
}
</pre>
</div>

<h4 id="stSwitch">条件分岐（switch）</h4>

<h5 id="switch">◆ switch (<i>expression</i>) { <span id="case">case <i>value</i>: <i>statements</i>; ...; <span id="default">default</span> <i>statements</i> }</span></h5>
<div class=i>
<p><i>expression</i> の値に応じて処理を振り分けます。次の例では、n の値が 1 なら One を、2 なら Tow を、3 か 4 なら Three or Four を、それ以外なら Other を表示します。</p>
<div class="title-tab">JavaScript</div>
<pre class=c2>
n = 2;
<em>switch (</em>n<em>) {</em>
<em>case</em> 1<em>:</em>
  alert("One");
  break;
<em>case</em> 2<em>:</em>
  alert("Two");
  break;
<em>case</em> 3<em>:</em>
<em>case</em> 4<em>:</em>
  alert("Three or Four");
  break;
<em>default:</em>
  alert("Other");
  break;
<em>}</em>
</pre>
<p>break は <i>statements</i> の終わりを意味します。書き忘れると、次の case の <i>statements</i> まで実行されます。下記の例では、n が 1 の時、One と Two と Other が表示されます。</p>
<div class="title-tab">JavaScript</div>
<pre class=c2>
n = 1;
switch (n) {
case 1:
  alert("One");
case 2:
  alert("Two");
default:
  alert("Other");
}
</pre>
</div>

<h4 id="stWhile">繰り返し（while）</h4>

<h5 id="while">◆ while (<i>expression</i>) <i>statements</i></h5>
<div class=i>
<p><i>expression</i> が真である間、<i>statements</i> を繰り返します。次の例では n が 10 未満の間処理を繰り返し、0123456789 と表示します。</p>
<div class="title-tab">JavaScript</div>
<pre class=c2>
n = 0;
<em>while (</em>n &lt; 10<em>) {</em>
  document.write(n);
  n++;
<em>}</em>
</pre>
</div>

<h4 id="stDo">繰り返し（do）</h4>

<h5 id="do">◆ do <i>statements</i> while (<i>expression</i>)</h5>
<div class=i>
<p><i>expression</i> が真である間、<i>statements</i> を繰り返します。次の例では 0123456789 と表示されます。最初から <i>expression</i> が偽であっても、<i>statements</i> が少なくとも1回は実行される点が while (...) {...} と異なります。</p>
<div class="title-tab">JavaScript</div>
<pre class=c2>
n = 0;
<em>do {</em>
  document.write(n);
  n++;
<em>} while (</em>n &lt; 10<em>)</em>;
</pre>
</div>

<h4 id="stFor">繰り返し（for）</h4>

<h5 id="for">◆ for (<i>expression1</i>; <i>expression2</i>; <i>expression3</i>) <i>statements</i></h5>
<div class=i>
<p>最初に <i>expression1</i> を実行し、次に、<i>statements</i> と <i>expression3</i> を <i>expression2</i> が真である間繰り返します。次の例は10回繰り返す処理の典型的な例で、0123456789 と表示されます。</p>
<div class="title-tab">JavaScript</div>
<pre class=c2>
<em>for (</em>i = 0<em>;</em> i &lt; 10<em>;</em> i++<em>) {</em>
  console.log(i);
<em>}</em>
</pre>
</div>

<h5 id="for2">◆ for (<i>variable</i> in <i>array</i>) <i>statements</i></h5>
<div class=i>
<p><a href="array.htm" tppabs="http://www.tohoho-web.com/js/array.htm">配列</a>のすべての要素に関する処理を行います。次の例では BlueRedYellow が表示されます。</p>
<div class="title-tab">JavaScript</div>
<pre class=c2>
xx = [ "Blue", "Red", "Yellow" ];
<em>for (</em>i <em>in</em> xx<em>) {</em>
  console.log(xx[i]);
<em>}</em>
</pre>
<p><a href="object.htm" tppabs="http://www.tohoho-web.com/js/object.htm">オブジェクト</a> に対して使用することもできます。オブジェクトの場合、順序は不定でしたが、<a href="what.htm#es2020" tppabs="http://www.tohoho-web.com/js/what.htm#es2020">ES2020</a> からは順序が保障されるようになりました。</p>
<div class="title-tab">JavaScript</div>
<pre class=c2>
var data = { name: "Yamada", age: 26, country: "Japan" };
<em>for (</em>var d <em>in</em> data<em>) {</em>
  console.log(d, data[d]);
<em>}</em>
</pre>
<p>for を用いて<a href="object.htm" tppabs="http://www.tohoho-web.com/js/object.htm">オブジェクト</a>が持つ属性の一覧を調べることもできます。下記の例では、navigator オブジェクトが持つ属性の一覧を表示します。ただし、これで調べられない属性（DontEnum属性を持つ属性）もあります。</p>
<div class="title-tab">JavaScript</div>
<pre class=c2>
<em>for (</em>var attr <em>in</em> navigator<em>) {</em>
  console.log(attr);
<em>}</em>
</pre>
</div>

<h5 id="for_of">◆ for (<i>variable</i> of <i>iterable</i>) <i>statements</i></h5>
<div class=i>
<p><a href="what.htm#version" tppabs="http://www.tohoho-web.com/js/what.htm#version">ES6(ES2015)</a> では、for (... of ...) のループがサポートされました。<a href="map.htm" tppabs="http://www.tohoho-web.com/js/map.htm">Map</a> や <a href="set.htm" tppabs="http://www.tohoho-web.com/js/set.htm">Set</a> をはじめとして、イテラブルなオブジェクトに対するループを実現します。</p>
<div class="tab">JavaScript</div>
<pre class=c2>
var set = new Set();
set.add("Tanaka");
set.add("Suzuki");
for (var value <em>of</em> set) {
  console.log(value);
}
</pre>
</div>

<h4 id="stBreak">ループを抜ける（break）</h4>

<h5 id="break">◆ break</h5>
<h5 id="break2">◆ break <i>label</i></h5>
<div class=i>
<p>break は、最も内側の for、while、do ループや、switch 文の case 節を抜けます。次の例では、01234 と表示されます。</p>
<div class="title-tab">JavaScript</div>
<pre class=c2>
for (i = 0; i &lt; 10; i++) {
  if (i == 5) {
    <em>break;</em>
  }
  document.write(i);
}
</pre>
<p><i>label</i> は入れ子になったループを一度に抜けたい場合に用います。次の例では、i が 20 より大きくなったときに、外側の for ループを抜けます。</p>
<div class="title-tab">JavaScript</div>
<pre class=c2>
<em>abc:</em>
  for (i = 0; i &lt; 10; i++) {
    for (j = 0; j &lt; 10; j++) {
      xx = i * 10 + j;
      if (xx &gt; 20) {
        <em>break abc;</em>
      }
      document.write(xx + "&lt;br&gt;");
    }
  }
</pre>
</div>

<h4 id="stContinue">ループを続ける（continue）</h4>

<h5 id="continue">◆ continue</h5>
<h5 id="continue2">◆ continue <i>label</i></h5>
<div class=i>
<p>ループ内の残りの処理をスキップし、もっとも内側の for, while, do ループの次のループを実行します。次の例では 5 がスキップされて 012346789 と表示されます。</p>
<div class="title-tab">JavaScript</div>
<pre class=c2>
for (i = 0; i &lt; 10; i++) {
  if (i == 5) {
    <em>continue;</em>
  }
  document.write(i);
}
</pre>
<p><i>label</i> を指定した場合は、ラベルで指定したループの次のループを実行します。</p>
<div class="title-tab">JavaScript</div>
<pre class=c2>
<em>abc:</em>
  for (i = 0; i &lt; 10; i++) {
    for (j = 0; j &lt; 10; j++) {
      xx = i * 10 + j;
      if (xx == 55) {
        <em>continue abc;</em>
      }
    }
  }
</pre>
</div>

<h4 id="stLabel">ラベル（label）</h4>

<h5 id="label">◆ <i>label</i>:</h5>
<div class=i>
<p>スクリプト中の位置にラベルをつけます。ラベルは break 文や continue 文で参照します。JavaScript 1.2 以降で使用可能です。</p>
<div class="title-tab">JavaScript</div>
<pre class=c2>
<em>label1:</em>
  for (i = 0; i &lt; 10; i++) {
    for (j = 0; j &lt; 10; j++) {
      if (func(i, j) {
        break label1;
      }
    }
  }
</pre>
</div>

<h4 id="stWith">オブジェクト参照（with）</h4>

<h5 id="with">◆ with (<i>obj</i>) <i>statements</i></h5>
<div class=i>
<p><i>obj</i> で指定したオブジェクトについて処理を行います。例えば、次の例は、</p>
<div class="title-tab">JavaScript</div>
<pre class=c2>
document.write(document.bgColor);
document.write(document.fgColor);
</pre>
<p>with を用いて、次のように書くことができます。</p>
<div class="title-tab">JavaScript</div>
<pre class=c2>
<em>with (</em>document<em>) {</em>
  write(bgColor);
  write(fgColor);
<em>}</em>
</pre>
</div>

<h4 id="exception">例外処理</h4>

<h5 id="try">◆ try { ... } <span id="catch">catch</span> (...) <span id="finally">fainally</span> { ... }</h5>
<div class=i>
<p><b>try</b>, <b>catch</b>, <b>finally</b> は、JavaScript 1.4, <a href="what.htm#version" tppabs="http://www.tohoho-web.com/js/what.htm#version">ES3</a> で定義された構文で、例外処理を扱う際に使用されます。try { ... } の中でエラーが発生し、<b id="throw">throw</b> によって例外が投げられると、try { ... } の残りの処理はスキップされ、catch { ... } の処理が実行されます。finally { ... } の処理は例外の有無に関わらず実行されます。</p>
<div class="title-tab">JavaScript</div>
<pre class=c2>
<em>try</em> {
  error = doSomething();
  if (error) {
    <em>throw</em> "myException";
  }
  <span class="comment">// エラーが発生するとこの部分の処理はスキップされます</span>
} <em>catch</em> (e) {
  <span class="comment">// 例外が発生するとこの部分の処理が実行されます</span>
  console.log(e);    <span class="comment">// "myException"</span>
} <em>finally</em> {
  <span class="comment">// この部分の処理は例外発生の有無に関わらず実行されます</span>
  console.log("finally");
}
</pre>
<p><a href="what.htm#es2019" tppabs="http://www.tohoho-web.com/js/what.htm#es2019">ES2019(ES10)</a> では、catch の引数を省略できるようになりました。</p>
<div class="title-tab">JavaScript</div>
<pre class=c2>
try {
   :
} catch {
   :
}
</pre>
</div>

<h4 id="modules">モジュール(export, import)</h4>
<div class=i>
<p>モジュールは、<a href="what.htm#version" tppabs="http://www.tohoho-web.com/js/what.htm#version">ES6(ES2015)</a> でサポートされた機能で、PHP の require や Python の import と同様に、スクリプトから他のスクリプトファイルを読み込みます。Chrome 62, Safari 10.3 で使用可能です。</p>
<p>まず、読み込まれるファイル側で、公開する関数や変数を <b>export</b> 宣言します。</p>
<div class="title-tab">module.js</div>
<pre class=c2>
<em>export</em> function hello_world() {
  alert("Hello world!!");
}
</pre>
<p>上記で公開(エクスポート)された関数を、別のスクリプトファイルから <b>import</b> します。</p>
<div class="title-tab">test.js</div>
<pre class=c2>
<em>import { hello_world } from "./module.js";</em>
hello_world();
</pre>
<p>これを、HTML ファイルから呼び出します。ES6 modules を使用するスクリプトは type="module" 属性をつけて呼び出します。</p>
<div class="title-tab">HTML</div>
<pre class=c2>
&lt;script <em>type="module"</em> src="test.js"&gt;&lt;/script&gt;
</pre>
</div>

<h5 id="export">◆ export</h5>
<div class=i>
<p>外部に公開する変数や関数などを宣言します。</p>
<div class="title-tab">JavaScript</div>
<pre class=c2>
<em>export</em> var a1 = 5;          <span class="comment">// 変数 a1 をエクスポートする</span>
<em>export</em> let a2 = 5;          <span class="comment">// 変数 a2 をエクスポートする</span>
<em>export</em> const a3 = 5;        <span class="comment">// 定数 a3 をエクスポートする</span>
<em>export</em> function f1() {...}  <span class="comment">// 関数 f1 をエクスポートする</span>
</pre>
</div>

<h5 id="import">◆ import</h5>
<div class=i>
<p>外部ファイルから、エクスポートされた変数や関数などを読み込みます。</p>
<div class="title-tab">JavaScript</div>
<pre class=c2>
<em>import</em> "./module.js";                                <span class="comment">// module.js からエクスポートされているものすべてをインポートする</span>
import <em>{ a1, a2 } from</em> "./module.js";                <span class="comment">// module.js から a1 と a2 をインポートする</span>
import { a1 <em>as b1</em>, a2 <em>as b2</em> } from "./module.js";    <span class="comment">// a1 を b1、a2 を b2 という名前でインポートする</span>
import <em>* as mod</em> from "./module.js";                  <span class="comment">// mod という名前でインポートする (mod.a1, mod.a2, ...)</span>
</pre>
<p><a href="what.htm#es2020" tppabs="http://www.tohoho-web.com/js/what.htm#es2020">ES2020</a> からは、ダイナミックインポートがサポートされました。モジュールを非同期にインポートし、インポートが完了した際に関数を実行することができます。</p>
<div class="title-tab">JavaScript</div>
<pre class=c2>
<em>import(</em>"./module.js"<em>)</em>.then(mod => {
   console.log(mod.a1);
});
</pre>
<p><a href="what.htm#es2020" tppabs="http://www.tohoho-web.com/js/what.htm#es2020">ES2020</a> ではまた、import したものを直接 export することも可能となりました。</p>
<div class="title-tab">JavaScript</div>
<pre class=c2>
import * as mod from "./module.js";	<span class="cm">// この2行を</span>
export { mod };
   ↓
<em>export</em> * as mod from "./module.js";	<span class="cm">// 1行で記述できる</span>
</pre>
<p><a href="what.htm#es2020" tppabs="http://www.tohoho-web.com/js/what.htm#es2020">ES2020</a> ではまた、<b>import.meta</b> オブジェクトがサポートされました。インポートされたモジュールの URL などのメタ情報を保持します。</p>
<div class="title-tab">JavaScript</div>
<pre class=c2>
console.log(<em>import.meta</em>);
</pre>
</div>

<h4 id="debug">デバッグ</h4>

<h5 id="debugger">◆ debugger</h5>
<div class=i>
<p><a href="what.htm#version" tppabs="http://www.tohoho-web.com/js/what.htm#version">EC5.1</a> で追加された機能で、ブラウザのデバッガ機能を使用する場合のブレークポイントを設定します。[F12] キー(Mac の場合は [Command]+[Option]+i) で開発ツールを開いた状態で下記を実行すると、<b>debugger</b> の箇所で実行が止まり、デバッグモードになります。変数やコンソールログを確認しながら、ステップ実行することも可能です。</p>
<div class="title-tab">JavaScript</div>
<pre class=c2>
console.log("A");
console.log("B");
<em>debugger;</em>
console.log("C");
console.log("D");
</pre>
</div>

<h4 id="stGoto">ジャンプ（goto）</h4>

<h5 id="goto">◆ goto <i>label</i></h5>
<div class=i>
<p>JavaScript では goto 文はサポートされていません。</p>
</div>

<hr>
<a href="index.htm" tppabs="http://www.tohoho-web.com/js/index.htm">[up]</a>
<a href="basic.htm" tppabs="http://www.tohoho-web.com/js/basic.htm">[prev]</a>
<a href="operator.htm" tppabs="http://www.tohoho-web.com/js/operator.htm">[next]</a>
<div>Copyright (C) 1996-2020 杜甫々</div>
<div>改訂版初版：2001年5月20日、最終更新日：2020年12月27日</div>
<div>http://www.tohoho-web.com/js/statement.htm</div>
</body>
</html>
