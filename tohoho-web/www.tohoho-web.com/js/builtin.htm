<!DOCTYPE html>
<html>
<head>
<meta charset="utf-8">
<title>ビルトイン関数 - とほほのWWW入門</title>
<meta name="viewport" content="width=device-width,initial-scale=1.0">
<link rel="stylesheet" href="../style3.css" tppabs="http://www.tohoho-web.com/style3.css">
</head>
<body>

<h2>ビルトイン関数</h2>
<a href="index.htm" tppabs="http://www.tohoho-web.com/js/index.htm">[up]</a>
<a href="onevent.htm" tppabs="http://www.tohoho-web.com/js/onevent.htm">[prev]</a>
<a href="number.htm" tppabs="http://www.tohoho-web.com/js/number.htm">[next]</a>

<h4>一覧</h4>
<div class=i>
<a href="#decodeURI">decodeURI()</a>,
<a href="#decodeURIComponent">decodeURIComponent()</a>,
<a href="#encodeURI">encodeURI()</a>,
<a href="#encodeURIComponent">encodeURIComponent()</a>,
<a href="#escape">escape()</a>,
<a href="#eval">eval()</a>,
<a href="#isFinite">isFinite()</a>,
<a href="#isNaN">isNaN()</a>,
<a href="#parseFloat">parseFloat()</a>,
<a href="#parseInt">parseInt()</a>,
<a href="#unescape">unescape()</a>
</div>

<h4 id="about">ビルトイン関数とは</h4>
<div class=i>
<p>特定のオブジェクトに依存せず、JavaScript の中から直接呼び出すことができる関数群です。グローバル関数とも呼ばれます。JavaScript の初期のバージョンでいくつか定義されましたが、モジュール化の考えから、parseInt() は Number.parseInt() として再定義されるなど、ビルトイン関数は縮小化の方向にあります。</p>
</div>

<h4 id="toNumber">数値変換</h4>

<h5 id="parseInt">◆ parseInt(<span class="nb"><i>string</i> [, <i>radix</i>]</span>)</h5>
<div class=i>
<p><a href="number.htm#parseInt" tppabs="http://www.tohoho-web.com/js/number.htm#parseInt">Number.parseInt()</a> を参照してください。</p>
</div>

<h5 id="parseFloat">◆ parseFloat(<i>string</i>)</h5>
<div class=i>
<p><a href="number.htm#parseFloat" tppabs="http://www.tohoho-web.com/js/number.htm#parseFloat">Number.parseFloat()</a> を参照してください。</p>
</div>

<h4 id="encode">エンコード</h4>

<h5 id="escape">◆ escape(<i>string</i>) <span class="nb">[廃止予定]</span></h5>
<div class=i>
<p><i>string</i> の文字列のうち、半角英数文字とハイフン(-)やアンダーバー(_)など一部の記号を除く文字を、%<i>xx</i> または %u<i>xxxx</i> の形式にエンコードします。この機能は廃止予定です。代わりに <a href="#encodeURI">encodeURI()</a> または <a href="#encodeURIComponent">encodeURIComponent()</a> を使用してください。</p>
<div class="title-tab">HTML</div>
<pre class=c2>
<em>escape(</em>"いろは"<em>)</em>;   <span class="comment">// =&gt; "%u3044%u308D%u306F"</span>
</pre>
</div>

<h5 id="unescape">◆ unescape(<i>string</i>) <span class="nb">[廃止予定]</span></h5>
<div class=i>
<p>%<i>nn</i> や %u<i>xxxx</i> の形式に変換された文字列を元の文字列に逆変換します。この機能は廃止予定です。代わりに <a href="#decodeURI">decodeURI()</a> または <a href="#decodeURIComponent">decodeURIComponent()</a> を使用してください。</p>
<div class="title-tab">JavaScript</div>
<pre class=c2>
<em>unescape(</em>"%u3044%u308D%u306F"<em>)</em>;    <span class="comment">// =&gt; "いろは"</span>
</pre>
</div>

<h5 id="encodeURI">◆ encodeURI(<i>string</i>)</h5>
<div class=i>
<p>encodeURI() は文字列 <i>string</i> を UTF-8 の %<i>xx</i> 表現形式にエンコードします。</p>
<div class="title-tab">JavaScript</div>
<pre class=c2>
<em>encodeURI(</em>"いろは"<em>)</em>;   <span class="comment">// => "%E3%81%84%E3%82%8D%E3%81%AF"</span>
</pre>
<p>半角英数字、および下記の文字はエンコードされません。URI では &amp; や = は意味を持つ文字ですが、エンコードされません。URI として安全なエンコードを行うには <a href="#encodeURIComponent">encodeURIComponent()</a> を使用してください。</p>
<div class="title-tab">除外文字</div>
<pre class=c2>
; , / ? : @ &amp; = + $ - _ . ! ~ * ' ( ) #
</pre>
</div>

<h5 id="decodeURI">◆ decodeURI(<i>string</i>)</h5>
<div class=i>
<p>decodeURI() は、encodeURI() の逆変換を行います。</p>
<div class="title-tab">JavaScript</div>
<pre class=c2>
<em>decodeURI(</em>"%E3%81%84%E3%82%8D%E3%81%AF"<em>)</em>;   <span class="comment">// => "いろは"</span>
</pre>
</div>

<h5 id="encodeURIComponent">◆ encodeURIComponent(<i>string</i>)</h5>
<div class=i>
<p>encodeURIComponent() は文字列 <i>string</i> を UTF-8 の %<i>xx</i> 表現形式にエンコードします。&amp; や = など、URI で意味を持つ記号もエンコードします。</p>
<div class="title-tab">JavaScript</div>
<pre class=c2>
<em>encodeURIComponent(</em>"いろは"<em>)</em>;   <span class="comment">// =&gt; "%E3%81%84%E3%82%8D%E3%81%AF"</span>
</pre>
<p>下記の記号文字が除外されます。</p>
<div class="title-tab">除外文字</div>
<pre class=c2>
- _ . ! ~ * ' ( ) #
</pre>
</div>

<h5 id="decodeURIComponent">◆ decodeURIComponent(<i>string</i>)</h5>
<div class=i>
<p>decodeURIComponent() は、encodeURIComponent() の逆変換を行います。</p>
<div class="title-tab">JavaScript</div>
<pre class=c2>
<em>decodeURIComponent(</em>"%E3%81%84%E3%82%8D%E3%81%AF"<em>)</em>;   <span class="comment">// => "いろは"</span>
</pre>
</div>

<h4 id="isXxx">値判断</h4>

<h5 id="isNaN">◆ isNaN(<i>value</i>)</h5>
<div class=i>
<p><a href="number.htm#isNuN" tppabs="http://www.tohoho-web.com/js/number.htm#isNuN">Number.isNaN()</a> を参照してください。</p>
</div>

<h5 id="isFinite">◆ isFinite(<i>num</i>)</h5>
<div class=i>
<p><a href="number.htm#isFinite" tppabs="http://www.tohoho-web.com/js/number.htm#isFinite">Number.isFinite()</a> を参照してください。</p>
</div>

<h4 id="doEval">スクリプト実行</h4>

<h5 id="eval">◆ eval(<i>statements</i>)</h5>
<div class=i>
<p><i>statements</i> を JavaScript の構文と解釈して実行し、その結果を返します。次の例では ans に 27 が代入されます。</p>
<div class="title-tab">JavaScript</div>
<pre class=c2>
ans = <em>eval(</em>"3 + (6 * 4)"<em>)</em>;
</pre>
</div>

<hr>
<a href="index.htm" tppabs="http://www.tohoho-web.com/js/index.htm">[up]</a>
<a href="onevent.htm" tppabs="http://www.tohoho-web.com/js/onevent.htm">[prev]</a>
<a href="number.htm" tppabs="http://www.tohoho-web.com/js/number.htm">[next]</a>
<div>Copyright (C) 1996-2019 杜甫々</div>
<div>改訂版初版：2001年5月20日、最終更新：2019年2月17日</div>
<div>http://www.tohoho-web.com/js/builtin.htm</div>
</body>
</html>
