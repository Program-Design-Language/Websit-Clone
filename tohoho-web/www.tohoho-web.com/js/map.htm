<!DOCTYPE html>
<html>
<head>
<meta charset="utf-8">
<title>マップ（Map） - とほほのWWW入門</title>
<meta name="viewport" content="width=device-width,initial-scale=1.0">
<link rel="stylesheet" href="../style3.css" tppabs="http://www.tohoho-web.com/style3.css">
</head>
<body>

<h2>マップ（Map）</h2>
<a href="index.htm" tppabs="http://www.tohoho-web.com/js/index.htm">[up]</a>
<a href="array.htm" tppabs="http://www.tohoho-web.com/js/array.htm">[prev]</a>
<a href="set.htm" tppabs="http://www.tohoho-web.com/js/set.htm">[next]</a>

<h4>一覧</h4>
<div class=i>
<a href="#Map">Map()</a>,
<a href="#clear">clear()</a>,
<a href="#delete">delete()</a>,
<a href="#entries">entries()</a>,
<a href="#forEach">forEach()</a>,
<a href="#get">get()</a>,
<a href="#has">has()</a>,
<a href="#keys">keys()</a>,
<a href="#set">set()</a>,
<a href="#size">size</a>,
<a href="#values">values()</a>
</div>

<h4 id="map">マップ(Map)</h4>

<h5 id="newMap">◆ <i>map</i> = new Map(<span class="nb">[<i>iterable</i>]</span>)</h5>
<h5 id="set">◆ <i>map</i>.set(<i>key</i>, <i>value</i>)</h5>
<h5 id="get">◆ <i>map</i>.get(<i>key</i>)</h5>
<div class=i>
<p><a href="what.htm#version" tppabs="http://www.tohoho-web.com/js/what.htm#version">ES6(ES2015)</a> でサポートされたオブジェクトで、キーとバリューのリストを保持します。Chrome 38, Firefox 13, Internet Explorer 11, Opera 25, Safari 7.1 以降で使用できます。Map と <a href="object.htm#newObject" tppabs="http://www.tohoho-web.com/js/object.htm#newObject">Object</a> は似ていますが、Map には、文字列や Symbol 以外の値もキーとして利用できる、リストの個数を size で簡単に得ることができる、for (... of ...) で簡単にループ処理できる、などの利点があります。</p>
<div class="tab">JavaScript</div>
<pre class=c2>
var map = <em>new Map()</em>;
map.<em>set</em>("width", 160);
map.<em>set</em>("height", 120);
map.<em>get</em>("width");       <span class="cm">// 160</span>
map.<em>get</em>("height");      <span class="cm">// 120</span>
</pre>
<p>コンストラクタにはキーとバリューの二次元配列を指定できます。Internet Explorer と Safari ではサポートされていません。</p>
<div class="tab">JavaScript</div>
<pre class=c2>
var map = new Map(<em>[["width", 160], ["height", 120]]</em>);
</pre>
</div>

<h5 id="size">◆ <i>map</i>.size</h5>
<div class=i>
<p>リストの個数を返します。</p>
<div class="tab">JavaScript</div>
<pre class=c2>
var map = <em>new Map()</em>;
map.<em>set</em>("width", 160);
map.<em>set</em>("height", 120);
map.size;                        <span class="cm">// =&gt; 2</span>
</pre>
</div>

<h5 id="keys">◆ <i>map</i>.keys()</h5>
<h5 id="values">◆ <i>map</i>.values()</h5>
<h5 id="entries">◆ <i>map</i>.entries()</h5>
<div class=i>
<p>for ... of 文でキー・バリューのリストを扱うことができます。Internet Explorer と Opera ではサポートされていません。</p>
<div class="tab">JavaScript</div>
<pre class=c2>
<em>for</em> (var [key, value] <em>of</em> map) {
  console.log(key, ":", value);
}
for (var key of map.<em>keys()</em>) {
  console.log(key, ":", map.get(key));
}
for (var value of map.<em>values()</em>) {
  console.log(value);
}
for (var [key, value] of map.<em>entries()</em>) {
  console.log(key, ":", value);
}
</pre>
</div>

<h5 id="forEach">◆ <i>map</i>.forEach(<span class="nb"><i>function</i>[, <i>this</i>]</span>)</h5>
<div class=i>
<p>forEach 文でキー・バリューのリストを扱うことができます。こちらは、Internet Explorer でもサポートされていますが、Opera でサポートされていません。</p>
<div class="tab">JavaScript</div>
<pre class=c2>
map.<em>forEach(</em>function(<em>value</em>) {
  console.log(value);
})
map.forEach(function(value, <em>key</em>) {
  console.log(key, ":", value);
})
map.forEach(function(value, key, <em>map</em>) {
  map.set(key, value * 2);
  console.log(key, ":", map.get(key));  <span class="cm">// map自体を変更することが可能</span>
});
map.forEach(function(value, key) {
  this.set(key, value * 2);
  console.log(key, ":", <em>this</em>.get(key));
}, <em>map</em>);   <span class="cm">// mapをthisとして引き渡す</span>
</pre>
</div>

<h5 id="has">◆ <i>map</i>.has(<i>key</i>)</h5>
<div class=i>
<p><i>key</i> で指定したマップが存在すれば true を、存在しなければ false を返します。</p>
<div class="tab">JavaScript</div>
<pre class=c2>
var map = new Map();
map.set("width", 160);
map.<em>has</em>("width");               <span class="cm">// =&gt; true</span>
</pre>
</div>

<h5 id="delete">◆ <i>map</i>.delete(<i>key</i>)</h5>
<div class=i>
<p><i>key</i> で指定したマップを削除します。</p>
<div class="tab">JavaScript</div>
<pre class=c2>
var map = new Map();
map.set("width", 160);
map.<em>delete</em>("width");
</pre>
</div>

<h5 id="clear">◆ <i>map</i>.clear()</h5>
<div class=i>
<p>clear() はマップの情報を消去します。Opera ではサポートされていません。</p>
<div class="tab">JavaScript</div>
<pre class=c2>
map.<em>clear()</em>;   <span class="cm">// mapの中身をすべて消去</span>
</pre>
</div>

<h4 id="weakmap">WeakMap</h4>
<div class="i">
<p>WeakMap は Map と似た機能ですが、(1) キーとして利用できるのはオブジェクトのみ、(2) キーは弱参照されガベージコレクションの変数保持の対象とならない、(3) 弱参照のため keys() 等によるキーの一覧を取得することはできない、などの特徴を持ちます。使用例は下記を参照してください。</p>
<div class="title-tab">JavaScript</div>
<pre class="c2">
<span class="cm">// Personクラスを定義する</span>
class Person {
    constructor(name) { this.name = name }
    getName() { return(this.name); }
}

<span class="cm">// 趣味(favorites)強参照マップと、宗教(religions)弱参照マップを定義する</span>
const favorites = new Map();
const religions = new WeakMap();

<span class="cm">// 処理の中で趣味マップと、宗教マップを利用する</span>
function doSomething() {
    <span class="cm">// 山田さんオブジェクトを生成</span>
    let p1 = new Person("Yamada", 26);
    console.log(p1.getName());

    <span class="cm">// 山田さんの趣味は野球</span>
    favorites.set(p1, "Baseball");
    console.log(favorites.get(p1));

    <span class="cm">// 山田さんの宗教は仏教</span>
    religions.set(p1, "Buddhism");
    console.log(religions.get(p1));
}
doSomething();

<span class="cm">// 趣味マップは強参照のため、後からでも参照できるけど、ガベージコレクションされない</span>
for (var key of favorites.keys()) {
    console.log(key.name + ":" + favorites.get(key));
}

<span class="cm">// 宗教マップは弱参照のため、後から参照できないけど、ガベージコレクションされる
for (var key of religions.keys()) {       // TypeError
    console.log(key.name + ":" + religions.get(key));
}</span>
</pre>
</div>

<hr>
<a href="index.htm" tppabs="http://www.tohoho-web.com/js/index.htm">[up]</a>
<a href="array.htm" tppabs="http://www.tohoho-web.com/js/array.htm">[prev]</a>
<a href="set.htm" tppabs="http://www.tohoho-web.com/js/set.htm">[next]</a>
<div>Copyright (C) 2018-2019 杜甫々</div>
<div>初版：2018年1月21日、最終更新：2019年12月31日</div>
<div>http://www.tohoho-web.com/js/map.htm</div>
</body>
</html>
