<!DOCTYPE html>
<html>
<head>
<meta charset="utf-8">
<title>配列（Array） - とほほのWWW入門</title>
<meta name="viewport" content="width=device-width,initial-scale=1.0">
<link rel="stylesheet" href="../style3.css" tppabs="http://www.tohoho-web.com/style3.css">
</head>
<body>

<h2>配列（Array）</h2>
<a href="index.htm" tppabs="http://www.tohoho-web.com/js/index.htm">[up]</a>
<a href="boolean.htm" tppabs="http://www.tohoho-web.com/js/boolean.htm">[prev]</a>
<a href="map.htm" tppabs="http://www.tohoho-web.com/js/map.htm">[next]</a>

<h4>一覧</h4>
<div class=i>
<a href="#newArray">Array()</a>,
<a href="#concat">concat()</a>,
<a href="#concat">concat()</a>,
<a href="#copyWithin">copyWithin()</a>,
<a href="#delete">delete</a>,
<a href="#entries">entries()</a>,
<a href="#every">every()</a>,
<a href="#fill">fill()</a>,
<a href="#filter">filter()</a>,
<a href="#find">find()</a>,
<a href="#findIndex">findIndex()</a>,
<a href="#flat">flat()</a>,
<a href="#flatMap">flatMap()</a>,
<a href="#for">for (...)</a>,
<a href="#forEach">forEach()</a>,
<a href="#from">from()</a>,
<a href="#in">in</a>,
<a href="#includes">includes()</a>,
<a href="#indexOf">indexOf()</a>,
<a href="#isArray">isArray()</a>,
<a href="#join">join()</a>,
<a href="#keys">keys()</a>,
<a href="#length">length</a>,
<a href="#map">map()</a>,
<a href="#of">of()</a>,
<a href="#pop">pop()</a>,
<a href="#push">push()</a>,
<a href="#reduce">reduce()</a>,
<a href="#reduceRight">reduceRight()</a>,
<a href="#reverse">reverse()</a>,
<a href="#shift">shift()</a>,
<a href="#slice">slice()</a>,
<a href="#some">some()</a>,
<a href="#sort">sort()</a>,
<a href="#splice">splice()</a>,
<a href="#toString">toString()</a>,
<a href="#toLocaleString">toLocaleString()</a>,
<a href="#unshift">unshift()</a>,
<a href="#values">values()</a>
</div>

<h4 id="createArray">配列の作成</h4>

<h5 id="newArray4">◆ <i>array</i> = [<i>e1</i>, <i>e2</i>, ...]</h5>
<div class=i>
<p><i>e1</i>, <i>e2</i>, ...を要素とする配列を作成します。配列のインデックスは 0 から始まります。</p>
<div class="tab">JavaScript</div>
<pre class=c2>
var arr = ["Red", "Green", "Blue"];
console.log(arr);                     <span class="comment">// =&gt; ["Red", "Green", "Blue"]</span>
console.log(arr[0]);                  <span class="comment">// =&gt; "Red"</span>
console.log(arr[1]);                  <span class="comment">// =&gt; "Green"</span>
console.log(arr[2]);                  <span class="comment">// =&gt; "Blue"</span>
</pre>
</div>

<h5 id="newArray">◆ <i>array</i> = new Array()</h5>
<h5 id="newArray2">◆ <i>array</i> = new Array(<i>n</i>)</h5>
<h5 id="newArray3">◆ <i>array</i> = new Array(<i>e1</i>, <i>e2</i>, ...)</h5>
<div class=i>
<p>配列を作成するのに、以前は new Array() を使用していましたが、今ではあまり使用されません。</p>
<div class="tab">JavaScript</div>
<pre class=c2>
var arr1 = new Array();     <span class="comment">// 要素が0個の配列を作成</span>
var arr2 = new Array(3);    <span class="comment">// 要素が3個の空配列を作成</span>
var arr3 = new Array("Red", "Green", "Blue");  <span class="comment">// var arr3 = ["Red", "Green", "Blue"]と等価</span>
</pre>
</div>

<h5 id="from">◆ Array.from(<span class="nb"><i>arrayLike</i>[, <i>mapFunc</i>, [<i>thisArg</i>]]</span>)</h5>
<div class=i>
<p><a href="what.htm#es2015" tppabs="http://www.tohoho-web.com/js/what.htm#es2015">ES2015(ES6)</a> から追加されたもので、String, Set, Map などの配列ライクなオブジェクトや反復可能オブジェクト <i>arrayLike</i> から新しい配列を作成します。</p>
<div class="tab">JavaScript</div>
<pre class=c2>
var str = "ABC";
var arr1 = Array.from(str);
console.log(arr1);                  <span class="comment">// =&gt; ["A", "B", "C"]</span>

var set = new Set([123, "ABC"]);
var arr2 = Array.from(set);
console.log(arr2);                  <span class="comment">// =&gt; [123, "ABC"]</span>

var map = new Map([[1, 2], [2, 4], [4, 8]]);
var arr3 = Array.from(map);
console.log(arr3);                  <span class="comment">// =&gt; [[1, 2], [2, 4], [4, 8]]</span>
</pre>
<p><i>mapFunc</i> は、配列を作成する際に各要素に対して実行されるマップ関数です。<i>thisArg</i> にはマップ関数で this で参照される値を指定します。</p>
<div class="tab">JavaScript</div>
<pre class=c2>
var arr = Array.from([1, 2, 3], function(x) { return(x * 2); });
console.log(arr);                  <span class="comment">// =&gt; [2, 4, 6]</span>
</pre>
</div>

<h5 id="of">◆ Array.of(<i>e1</i>, <i>e2</i>, ...)</h5>
<div class=i>
<p><a href="what.htm#es2015" tppabs="http://www.tohoho-web.com/js/what.htm#es2015">ES2015</a> で追加されたメソッドで、可変引数 <i>e1</i>, <i>e2</i> ... を受け取り、新しい配列を作成します。<a href="what.htm#version" tppabs="http://www.tohoho-web.com/js/what.htm#version">ES2015(ES6)</a> で定義されたもので、IE11 ではサポートされていません。</p>
<div class="tab">JavaScript</div>
<pre class=c2>
var arr = Array.of(1, 2, 3);
console.log(arr);                  <span class="comment">// =&gt; [1, 2, 3]</span>
</pre>
<p>new Array() とほぼ同じ動作ですが、引数が単一の数値の場合、new Array() は指定個数分の空配列を返すのに対し、Array.of() は常に引数の個数分の要素を持つ配列を返します。</p>
<div class="tab">JavaScript</div>
<pre class=c2>
var arr1 = new Array(3);
console.log(arr1);                  <span class="comment">// =&gt; [empty, empty, empty]</span>

var arr2 = Array.of(3);
console.log(arr2);                  <span class="comment">// =&gt; [3]</span>
</pre>
</div>

<h4 id="multidimension">多次元配列</h4>
<div class=i>
<p>以下のようにして多次元の配列も扱うことができます。</p>
<div class="tab">JavaScript</div>
<pre class=c2>
var arr = [];
for (i = 0; i &lt; 3; i++) {
  arr[i] = [];
  for (j = 0; j &lt; 4; j++) {
    arr[i][j] = i * 100 + j;
  }
}
console.log(arr[2][3]);                  <span class="comment">// =&gt; 203</span>
</pre>
</div>

<h4 id="arrayLength">配列の長さ</h4>

<h5 id="length">◆ <i>array</i>.length</h5>
<div class=i>
<p>配列要素の個数を得るには length プロパティを参照します。</p>
<div class="tab">JavaScript</div>
<pre class=c2>
var arr = ["Red", "Green", "Blue"];
console.log(arr.length);                  <span class="comment">// =&gt; 3</span>
</pre>
<p>length に 0 を代入することで、配列の要素をすべて削除することができます。</p>
<div class="tab">JavaScript</div>
<pre class=c2>
arr.length = 0;
</pre>
</div>

<h4 id="arrayLoop">配列のループ</h4>

<h5 id="for">◆ for (...)</h5>
<div class=i>
<p>下記の様にして配列の各要素に対して処理を行うことができます。</p>
<div class="tab">JavaScript</div>
<pre class=c2>
var arr = ["Red", "Green", "Blue"];
for (var i = 0; i &lt; arr.length; i++) {
  console.log(arr[i]);                  <span class="comment">// =&gt; "Red", "Green", "Blue"</span>
}
</pre>
<p>下記の様に記述することもできます。</p>
<div class="tab">JavaScript</div>
<pre class=c2>
var arr = ["Red", "Green", "Blue"];
for (var i in arr) {
  console.log(arr[i]);                  <span class="comment">// =&gt; "Red", "Green", "Blue"</span>
}
</pre>
</div>

<h5 id="forEach">◆ <i>array</i>.forEach (<span class="nb"><i>callback</i>[, <i>this</i>]</span>)</h5>
<div class=i>
<p>配列の各要素を引数にして <i>callback</i> を実行します。<i>this</i> はコールバック関数の中で this として参照される値です。コールバックの引数には、要素値(value)、要素のインデックス(index)、配列自体(array)が渡されます。</p>
<div class="tab">JavaScript</div>
<pre class=c2>
var arr = ["Red", "Green", "Blue"];
arr.forEach(function(value, index, array) {
  console.log(value);                  <span class="comment">// =&gt; "Red", "Green", "Blue"</span>
});
</pre>
</div>

<h5 id="entries">◆ <i>array</i>.entries()</h5>
<h5 id="keys">◆ <i>array</i>.keys()</h5>
<h5 id="values">◆ <i>array</i>.values()</h5>
<div class=i>
<p><i>array</i> の各要素について、entries() は key と value からなるイテレータ、keys() は key のみからなるイテレータ、values() は value のみからなるイテレータを返します。<a href="what.htm#version" tppabs="http://www.tohoho-web.com/js/what.htm#version">ES2015(ES6)</a> で追加された機能で、IE11 ではサポートされていません。</p>
<div class="tab">JavaScript</div>
<pre class=c2>
var arr = ["Red", "Green", "Blue"];
for (var elem of arr.entries()) {
  console.log(elem[0] + ":" + elem[1]);   <span class="comment">// =&gt; "0:Red", "1:Green", "2:Blue"</span>
}
for (var key of arr.keys()) {
  console.log(key);                       <span class="comment">// =&gt; 0, 1, 2</span>
}
for (var value of arr.values()) {
  console.log(value);                      <span class="comment">// =&gt; "Red", "Green", "Blue"</span>
}
</pre>
</div>

<h5 id="map">◆ <i>array</i>.map(<span class="nb"><i>callback</i>[, <i>this</i>]</span>)</h5>
<div class=i>
<p>配列の各要素に対して <i>callback</i> を実行し、<i>callback</i> の戻り値からなる配列を返します。<i>this</i> はコールバック関数の中で this として参照される値です。コールバックの引数には、要素値(<i>value</i>)、要素のインデックス(<i>index</i>)、配列自体(<i>array</i>)が渡されます。下記の例は、配列要素の各要素を2倍にした配列を返します。<a href="what.htm#version" tppabs="http://www.tohoho-web.com/js/what.htm#version">ES5.1</a> で定義されたもので、IE9 から利用可能です。</p>
<div class="tab">JavaScript</div>
<pre class=c2>
var arr1 = [1, 2, 3, 4, 5];
var arr2 = arr1.map(function(value, index, array) {
  return value * 2;
});
console.log(arr2);                  <span class="comment">// =&gt; [2, 4, 6, 8, 10]</span>
</pre>
</div>

<h5 id="reduce">◆ <i>array</i>.reduce(<span class="nb"><i>callback</i>[, <i>initial</i>]</span>)</h5>
<h5 id="reduceRight">◆ <i>array</i>.reduceRight(<span class="nb"><i>callback</i>[, <i>initial</i>]</span>)</h5>
<div class=i>
<p>配列の各要素に対して <i>callback</i> を実行し、最終的なアキュムレータの値を返します。コールバックの引数には、アキュムレータ(<i>acc</i>)、要素値(<i>cur</i>)、要素のインデックス(<i>index</i>)、配列自体(<i>array</i>)が渡されます。reduce() は要素の左から右へ、reduceRight() は右から左へむけて呼び出します。最初にコールバックが呼ばれた時、<i>initial</i> が指定されていればアキュムレータは <i>initial</i> が渡されます。<i>initial</i> が指定されていない場合は一つ目の要素の値がアキュムレータ値となり、二つ目の要素からコールバックが呼ばれます。二回目以降のコールバックでは、アキュムレータには前回のコールバックの戻り値が渡されます。最後のコールバックの戻り値が reduce() の戻り値となります。下記の例は、アキュムレータにそれまでの最大値を覚えておきながら、配列の中の最大値を返却します。<a href="what.htm#version" tppabs="http://www.tohoho-web.com/js/what.htm#version">ES5.1</a> で定義されたもので、IE9 から利用可能です。</p>
<div class="tab">JavaScript</div>
<pre class=c2>
var arr = [4, 3, 8, 2, 6];
var max = arr.reduce(function(acc, cur, index, array) {
  console.log(acc, cur, index, array);    <span class="comment">// =&gt; 4 3 1 [4, 3, 8, 2, 6]</span>
                                          <span class="comment">// =&gt; 4 8 2 [4, 3, 8, 2, 6]</span>
                                          <span class="comment">// =&gt; 8 2 3 [4, 3, 8, 2, 6]</span>
                                          <span class="comment">// =&gt; 8 6 4 [4, 3, 8, 2, 6]</span>
  return (acc &lt; cur) ? cur : acc;
});
console.log(max);                  <span class="comment">// =&gt; 8</span>
</pre>
</div>

<h4 id="arrayFind">配列の検査</h4>

<h5 id="indexOf">◆ <i>array</i>.indexOf(<i>e1</i>)</h5>
<div class=i>
<p>配列の中に <i>e1</i> とマッチする要素が最初に出現するインデックスを返します。見つからない場合は -1 を返します。</p>
<div class="tab">JavaScript</div>
<pre class=c2>
var arr = ["Red", "Green", "Blue"];
console.log(arr.indexOf("Red"));       <span class="comment">// =&gt; 0</span>
console.log(arr.indexOf("Green"));     <span class="comment">// =&gt; 1</span>
console.log(arr.indexOf("Blue"));      <span class="comment">// =&gt; 2</span>
console.log(arr.indexOf("Yellow"));    <span class="comment">// =&gt; -1</span>
</pre>
</div>

<h5 id="includes">◆ <i>array</i>.includes(<i>e1</i>)</h5>
<div class=i>
<p><a href="what.htm#es2016" tppabs="http://www.tohoho-web.com/js/what.htm#es2016">ES2016(ES7)</a> で追加されたメソッドで、要素にマッチするものの有無を true/false で返却します。indexOf() よりも直観的に有無を調べることができます。</p>
<div class="tab">JavaScript</div>
<pre class=c2>
var arr = ["Red", "Green", "Blue"];

if (arr.indexOf("Green") != -1) { ... }     <span class="comment">// 古い書き方</span>
if (arr.includes("Green")) { ... }          <span class="comment">// ES2016以降の新しい書き方</span>
</pre>
</div>

<h5 id="isArray">◆ Array.isArray(<i>value</i>)</h5>
<div class=i>
<p><a href="what.htm#es51" tppabs="http://www.tohoho-web.com/js/what.htm#es51">ES5.1</a> で追加されたメソッドで、<i>value</i> が配列か否かを true/false で返します。</p>
<div class="tab">JavaScript</div>
<pre class=c2>
console.log(Array.isArray("ABC"));           <span class="comment">// false</span>
console.log(Array.isArray(["A", "B", "C"]);  <span class="comment">// true</span>
</pre>
</div>

<h5 id="in">◆ <i>index</i> in <i>array</i></h5>
<div class=i>
<p>該当のインデックスの要素が存在するかどうかを調べるには「インデックス in 配列」を用います。</p>
<div class="tab">JavaScript</div>
<pre class=c2>
var arr = ["Red", "Green", "Blue"];
console.log(2 in arr);                  <span class="comment">// =&gt; true</span>
console.log(3 in arr);                  <span class="comment">// =&gt; false</span>
</pre>
</div>

<h5 id="every">◆ <i>array</i>.every(<span class="nb"><i>callback</i>[, <i>this</i>]</span>)</h5>
<h5 id="some">◆ <i>array</i>.some(<span class="nb"><i>callback</i>[, <i>this</i>]</span>)</h5>
<div class=i>
<p>every() は配列の各要素に対して <i>callback</i> を実行し、<i>callback</i> の戻り値がすべて真であれば、真を返します。<i>this</i> はコールバック関数の中で this として参照される値です。コールバックの引数には、要素値(<i>value</i>)、要素のインデックス(<i>index</i>)、配列自体(<i>array</i>)が渡されます。下記の例は、配列要素がすべて 80以上であることを確認しています。<a href="what.htm#version" tppabs="http://www.tohoho-web.com/js/what.htm#version">ES5.1</a> で定義されたもので、IE9 から利用可能です。</p>
<div class="tab">JavaScript</div>
<pre class=c2>
var arr = [89, 87, 93, 65, 88];
var bool = arr.every(function(value, index, array) {
  return (value &gt;= 80);
});
console.log(bool);                  <span class="comment">// =&gt; false</span>
</pre>
<p>some() は、<i>callback</i> の戻り値がひとつでも真であれば真を返します。下記の例は、配列要素がひとつでも 90以上であることを確認しています。</p>
<div class="tab">JavaScript</div>
<pre class=c2>
var arr = [89, 87, 93, 65, 88];
var bool = arr.some(function(value, index, array) {
  return (value &gt;= 90);
});
console.log(bool);                  <span class="comment">// =&gt; true</span>
</pre>
</div>

<h5 id="find">◆ <i>array</i>.find(<span class="nb"><i>callback</i>[, <i>this</i>]</span>)</h5>
<h5 id="findIndex">◆ <i>array</i>.findIndex(<span class="nb"><i>callback</i>[, <i>this</i>]</span>)</h5>
<div class=i>
<p>find() は配列の各要素に対して <i>callback</i> を実行し、<i>callback</i> の戻り値が最初に真となった要素の値を返します。<i>this</i> はコールバック関数の中で this として参照される値です。コールバックの引数には、要素値(<i>value</i>)、要素のインデックス(<i>index</i>)、配列自体(<i>array</i>)が渡されます。下記の例は、配列要素の中で最初に 90以上の要素を返します。<a href="what.htm#version" tppabs="http://www.tohoho-web.com/js/what.htm#version">ES5.1</a> で定義されたもので、IE9 から利用可能です。</p>
<div class="tab">JavaScript</div>
<pre class=c2>
var arr = [89, 87, 93, 65, 88];
var value = arr.find(function(value, index, array) {
  return (value &gt;= 90);
});
console.log(value);                  <span class="comment">// =&gt; 93</span>
</pre>
<p>findIndex() は見つかった要素のインデックスを返します。</p>
<div class="tab">JavaScript</div>
<pre class=c2>
var arr = [89, 87, 93, 65, 88];
var index = arr.findIndex(function(value, index, array) {
  return (value &gt;= 90);
});
console.log(index);                  <span class="comment">// =&gt; 2</span>
</pre>
</div>

<h4 id="arrayConcat">配列の連結</h4>

<h5 id="concat">◆ <i>array</i>.concat(<i>array2</i>, ...)</h5>
<div class=i>
<p><i>array</i> と <i>array2</i> を連結した配列を返します。<i>array</i> は変更されません。引数に複数指定することも可能です。</p>
<div class="tab">JavaScript</div>
<pre class=c2>
var arr1 = ["Red", "Green"];
var arr2 = ["Blue", "Yellow"];
var arr3 = arr1.concat(arr2);
console.log(arr3);              <span class="comment">// =&gt; ["Red", "Green", "Blue", "Yellow"]</span>
</pre>
</div>

<h5 id="join">◆ <i>array</i>.join(<span class="nb">[<i>separator</i>]</span>)</h5>
<div class=i>
<p><i>array</i> の各要素の値を <i>separator</i> で連結した文字列を返します。<i>separator</i> を省略した場合は通常カンマ（,）で連結されますが、JavaScript のバージョンによって動作が異なるので省略しない方が無難です。<i>array</i> は変更されません。</p>
<div class="tab">JavaScript</div>
<pre class=c2>
var arr = ["2000", "12", "31"];
var str = arr.join("/");
console.log(str);              <span class="comment">// =&gt; "2000/12/31"</span>
</pre>
</div>

<h4 id="arrayGet">配列要素の取り出しと追加</h4>

<h5 id="unshift">◆ <i>array</i>.unshift(<i>e1</i>, <i>e2</i>, ...) (N4)</h5>
<h5 id="push">◆ <i>array</i>.push(<i>e1</i>, <i>e2</i>, ...) (N4)</h5>
<div class=i>
<p>unshift() は <i>array</i> の先頭に <i>e1</i>, <i>e2</i>, ... の配列要素を加えます。push() は <i>array</i> の最後に配列要素を加えます。戻り値は JavaScript のバージョンによって異なります。</p>
<div class="tab">JavaScript</div>
<pre class=c2>
var arr = ["Green"];
arr.unshift("Red");         <span class="comment">// =&gt; ["Red", "Green"]</span>
arr.push("Blue");           <span class="comment">// =&gt; ["Red", "Green", "Blue"]</span>
</pre>
</div>

<h5 id="shift">◆ <i>array</i>.shift() (N4)</h5>
<h5 id="pop">◆ <i>array</i>.pop() (N4)</h5>
<div class=i>
<p>shift() は <i>array</i> の最初の要素を削除します。pop() は <i>array</i> の最後の要素を削除します。<i>array</i> 自身が変更されます。戻り値は削除した値となります。</p>
<div class="tab">JavaScript</div>
<pre class=c2>
var arr = ["Red", "Green", "Blue"];
arr.shift();                   <span class="comment">// =&gt; ["Green", "Blue"]</span>
arr.pop();                     <span class="comment">// =&gt; ["Green"]</span>
</pre>
</div>

<h5 id="splice">◆ <i>array</i>.splice(<i>start</i>, <i>n</i>, <i>e1</i>, <i>e2</i>, ...) (N4)</h5>
<div class=i>
<p>0 から数えて、<i>start</i> 番目から <i>n</i> 個の要素を削除し、その代わりに <i>e1</i>, <i>e2</i>, ...を値とする要素を埋め込みます。戻り値は JavaScript のバージョンによって異なります。</p>
<div class="tab">JavaScript</div>
<pre class=c2>
var arr = ["A", "B", "C", "D", "E", "F", "G"];
arr.splice(2, 3, "X", "Y", "Z");
console.log(arr);              <span class="comment">// =&gt; ["A", "B", "X", "Y", "Z", "F", "G"]</span>
</pre>
</div>

<h5 id="slice">◆ <i>array</i>.slice(<span class="nb"><i>start</i> [, <i>end</i>]</span>)</h5>
<div class=i>
<p>0 から数えて、<i>start</i> 番目～ <i>end</i> - 1 番目までの要素を抜き出した配列を返します。<i>end</i> を省略した場合は最後までの要素を返します。<i>array</i> は変化しません。</p>
<div class="tab">JavaScript</div>
<pre class=c2>
var arr = ["A", "B", "C", "D", "E", "F", "G"];
console.log(arr.slice(2, 4));    <span class="comment">// =&gt; ["C", "D"]</span>
</pre>
</div>

<h5 id="delete">◆ delete <i>array</i>[<i>n</i>]</h5>
<div class=i>
<p>要素を削除するには delete を用います。この場合、arr[1] は undefined になりますが、arr[0] や arr[2] はそのまま残ります。配列要素を削除するには、<i>array</i>.splice() を用いるのが一般的です。</p>
<div class="tab">JavaScript</div>
<pre class=c2>
var arr = ["Red", "Green", "Blue"];
delete arr[1];
console.log(arr);                     <span class="comment">// =&gt; ["Red", empty, "Blue"]</span>
console.log(arr[0]);                  <span class="comment">// =&gt; "Red"</span>
console.log(arr[1]);                  <span class="comment">// =&gt; undefined</span>
console.log(arr[2]);                  <span class="comment">// =&gt; "Blue"</span>
</pre>
</div>

<h5 id="filter">◆ <i>array</i>.filter(<span class="nb"><i>callback</i>[, <i>this</i>]</span>)</h5>
<div class=i>
<p>配列の各要素に対して <i>callback</i> を実行し、<i>callback</i> の戻り値が真であるものの要素からなる配列を返します。<i>this</i> はコールバック関数の中で this として参照される値です。コールバックの引数には、要素値(<i>value</i>)、要素のインデックス(<i>index</i>)、配列自体(<i>array</i>)が渡されます。下記の例は、配列要素から80以上のものを抜き出しています。<a href="what.htm#version" tppabs="http://www.tohoho-web.com/js/what.htm#version">ES5.1</a> で定義されたもので、IE9 から利用可能です。</p>
<div class="tab">JavaScript</div>
<pre class=c2>
var arr1 = [89, 87, 93, 65, 88];
var arr2 = arr1.filter(function(value, index, array) {
  return (value &gt;= 80);
});
console.log(arr2);                  <span class="comment">// =&gt; [89, 87, 93, 88]</span>
</pre>
</div>

<h4 id="arraySort">配列の並べ替え</h4>

<h5 id="sort">◆ <i>array</i>.sort(<span class="nb">[<i>func</i>]</span>)</h5>
<div class=i>
<p><i>array</i> をソートしてその結果の配列を返します。<i>array</i> 自身がソートされます。<i>func</i> で比較関数を指定することも可能です。比較関数では負数、0、正数によって順序を返すようにします。</p>
<div class="tab">JavaScript</div>
<pre class=c2>
var arr = [3, 7, 8, 1];
arr.sort();
console.log(arr);                  <span class="comment">// =&gt; [1, 3, 7, 8]</span>
</pre>
<p>ソート関数を指定することもできます。ソート関数では等しければ 0 を、小さければ負の値を、大きければ正の値を返します。下記の例では、大文字・小文字を無視して文字列をソートしています。</p>
<div class="tab">JavaScript</div>
<pre class=c2>
function hikaku(a, b) {
  var str1 = a.toUpperCase();
  var str2 = b.toUpperCase();
  if (str1 == str2) { return 0; }
  if (str1 &gt; str2) { return -1; }
  if (str1 &lt; str2) { return 1; }
}

var arr = ["a", "x", "B", "y", "c", "Z"];
arr.sort(hikaku);
console.log(arr);           <span class="comment">// =&gt; ["a", "B", "c", "x", "y", "Z"]</span>
</pre>
</div>

<h5 id="reverse">◆ <i>array</i>.reverse()</h5>
<div class=i>
<p><i>array</i> を逆順に並べ替えてその結果の配列を返します。<i>array</i> 自身が並べ替えられます。</p>
<div class="tab">JavaScript</div>
<pre class=c2>
var arr = ["Red", "Green", "Blue"];
arr.reverse();
console.log(arr);           <span class="comment">// =&gt; ["Blue", "Green", "Red"]</span>
</pre>
</div>

<h4 id="convertToString">配列から文字列への変換</h4>

<h5 id="toString">◆ <i>array</i>.toString()</h5>
<div class=i>
<p>配列を文字列に変換します。</p>
<div class="tab">JavaScript</div>
<pre class=c2>
var arr = [1, 2, 3, "A", "B", "C"];
arr.toString();        <span class="comment">// =&gt; "1,2,3,A,B,C"</span>
</pre>
</div>

<h5 id="toLocaleString">◆ <i>array</i>.toLocaleString(<span class="nb">[<i>locales</i>[, <i>options</i>]]</span>)</h5>
<div class=i>
<p>配列をロケールに応じた文字列に変換します。</p>
<div class="tab">JavaScript</div>
<pre class=c2>
var arr = [1, 'A', new Date('31 Dec 1999 14:59:59 UTC')];
var str = arr.toLocaleString('ja', {timeZone: "Asia/Tokyo"});
console.log(str);        <span class="comment">// =&gt; "1,A,1999/12/31 23:59:59"</span>
arr.toString();
</pre>
</div>

<h4 id="modifyArray">配列要素の変更</h4>

<h5 id="fill">◆ <i>array</i>.fill(<span class="nb"><i>value</i>[, <i>start</i>[, <i>end</i>]]</span>)</h5>
<div class=i>
<p>0から数えて <i>start</i>番目から <i>end</i> - 1番目の要素の値を <i>value</i> に置換します。<i>array</i> 自身を書き換えます。<i>start</i> が省略された場合は 0番目から、<i>end</i> が省略された場合は最後までを置換します。<a href="what.htm#version" tppabs="http://www.tohoho-web.com/js/what.htm#version">ES2015(ES6)</a> で追加された機能で、IE11 ではサポートされていません。</p>
<div class="tab">JavaScript</div>
<pre class=c2>
var arr = ["0", "1", "2", "3", "4", "5"];
arr.fill("A", 2, 5);
console.log(arr);           <span class="comment">// =&gt; ["0", "1", "A", "A", "A", "5"]</span>
</pre>
</div>

<h5 id="copyWithin">◆ <i>array</i>.copyWithin(<span class="nb"><i>target</i>[, <i>start</i>[, <i>end</i>]]</span>)</h5>
<div class=i>
<p><i>start</i>番目から <i>end</i> - 1番目の要素を、<i>target</i> 番目からの要素と置き換えます。<i>array</i> 自体を書き換えます。<i>start</i> が省略された場合は 0番目から、<i>end</i> が省略された場合は最後までをコピーします。下記の例では、0から数えて8番目から 10-1=9番目の要素を、2番目からの要素にコピーしています。<a href="what.htm#version" tppabs="http://www.tohoho-web.com/js/what.htm#version">ES2015(ES6)</a> で追加された機能で、IE11 ではサポートされていません。</p>
<div class="tab">JavaScript</div>
<pre class=c2>
var arr = ["0", "1", "2", "3", "4", "5", "6", "7", "8", "9"];
arr.copyWithin(2, 8, 10);
console.log(arr);    <span class="comment">// =&gt; ["0", "1", "8", "9", "4", "5", "6", "7", "8", "9"]</span>
</pre>
</div>

<h5 id="flat">◆ <i>array</i>.flat(<i>depth</i>)</h5>
<div class=i>
<p><a href="what.htm#es2019" tppabs="http://www.tohoho-web.com/js/what.htm#es2019">ES2019(ES10)</a> で追加された機能で、多次元配列を低次元の配列にフラット化します。<i>depth</i> には何次元までの配列をフラット化するかを指定します。</p>
<div class="tab">JavaScript</div>
<pre class=c2>
var arr = [[[1, 2], [3, 4]], [5, 6]];
console.log(arr.flat(2));              <span class="cm">// =&gt; [1, 2, 3, 4, 5, 6]</span>
</pre>
</div>

<h5 id="flatMap">◆ <i>array</i>.flatMap(<i>callback</i>)</h5>
<div class=i>
<p><a href="what.htm#es2019" tppabs="http://www.tohoho-web.com/js/what.htm#es2019">ES2019(ES10)</a> で追加された機能で、配列に対して <a href="#map">map()</a> を行い、結果として得られた多次元配列を <a href="#flat">flat()</a> でフラット化します。</p>
<div class="tab">JavaScript</div>
<pre class=c2>
var arr = ["Blue Green", "Red Yellow"];
console.log(arr.flatMap(x => x.split(" ")));  <span class="cm">// =&gt; ["Blue", "Green", "Red", "Yellow"]</span>
</pre>
</div>

<h4 id="destructuringAssignment">分割代入</h4>
<div class=i>
<p><a href="what.htm#es2015" tppabs="http://www.tohoho-web.com/js/what.htm#es2015">ES2015(ES6)</a>では、分割代入という機能がサポートされました。</p>
<div class="tab">JavaScript</div>
<pre class=c2>
[x, y] = [10, 20];    <span class="cm">// x=10, y=20</span>
[x, y, ...z] = [10, 20, 30, 40, 50];   <span class="cm">// z=[30, 40, 50]</span>
</pre>
</div>

<h4 id="spreadSyntax">スプレッド構文</h4>
<div class=i>
<p><a href="what.htm#es2015" tppabs="http://www.tohoho-web.com/js/what.htm#es2015">ES2015(ES6)</a>で追加された構文で、配列名に ... をつけることで、配列要素をカンマで連結した構文に展開されます。</p>
<div class="tab">JavaScript</div>
<pre class=c2>
args = [10, 20, 30];
func(...args);            <span class="cm">// func(10, 20, 30)</span>
</pre>
</div>

<h4 id="typedArray">型付き配列</h4>
<div class=i>
<p><a href="what.htm#es2015" tppabs="http://www.tohoho-web.com/js/what.htm#es2015">ES2015(ES6)</a>で追加された機能で、バイナリデータを高速に扱う際などで用いられます。バッファを確保する ArrayBuffer() および、Int8Array, Uint8Array, Uint8ClampedArray, Int16Array, Uint16Array, Int32Array, Uint32Array, Float32Array, Float64Array などが定義されています。</p>
<div class="tab">JavaScript</div>
<pre class=c2>
var arr = new Uint8Array(4);
for (var i = 0; i &lt; 4; i++) {
    arr[i] = 0x30 + i;
}
console.log(arr);
</pre>
</div>

<hr>
<a href="index.htm" tppabs="http://www.tohoho-web.com/js/index.htm">[up]</a>
<a href="boolean.htm" tppabs="http://www.tohoho-web.com/js/boolean.htm">[prev]</a>
<a href="map.htm" tppabs="http://www.tohoho-web.com/js/map.htm">[next]</a>
<div>Copyright (C) 1996-2019 杜甫々</div>
<div>改訂版初版：2001年5月20日、最終更新：2019年11月17日</div>
<div>http://www.tohoho-web.com/js/array.htm</div>
</body>
</html>
