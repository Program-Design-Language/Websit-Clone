<!DOCTYPE html>
<html>
<head>
<meta charset="utf-8">
<title>イベント（Event） - とほほのWWW入門</title>
<meta name="viewport" content="width=device-width,initial-scale=1.0">
<link rel="stylesheet" href="../style3.css" tppabs="http://www.tohoho-web.com/style3.css">
</head>
<body>

<h2>イベント（Event）</h2>
<a href="index.htm" tppabs="http://www.tohoho-web.com/js/index.htm">[up]</a>
<a href="form.htm" tppabs="http://www.tohoho-web.com/js/form.htm">[prev]</a>
<a href="layer.htm" tppabs="http://www.tohoho-web.com/js/layer.htm">[next]</a>

<h4>一覧</h4>
<div class=i>
<a href="#altKey">altKey</a>,
<a href="#button">button</a>,
<a href="#cancelBubble">cancelBubble</a>,
<a href="#captureEvents">captureEvents()</a>,
<a href="#clientX">clientX</a>,
<a href="#clientY">clientY</a>,
<a href="#ctrlKey">ctrlKey</a>,
<a href="#data">data</a>,
<a href="#event">event</a>,
<a href="#fromElement">fromElement</a>,
<a href="#height">height</a>,
<a href="#keyCode">keyCode</a>,
<a href="#layerX">layerX</a>,
<a href="#layerY">layerY</a>,
<a href="#modifires">modifiers</a>,
<a href="#offsetX">offsetX</a>,
<a href="#offsetY">offsetY</a>,
<a href="#pageX">pageX</a>,
<a href="#pageY">pageY</a>,
<a href="#reason">reason</a>,
<a href="#returnValue">returnValue</a>,
<a href="#screenXe">screenX(IE)</a>,
<a href="#screenXn">screenX(N)</a>,
<a href="#screenYe">screenY(IE)</a>,
<a href="#screenYn">screenY(N)</a>,
<a href="#shiftKey">shiftKey</a>,
<a href="#srcElement">srcElement</a>,
<a href="#srcFilter">srcFilter</a>,
<a href="#target">target</a>,
<a href="#typeIE">type(IE)</a>,
<a href="#typeNN">type(N)</a>,
<a href="#which">which</a>,
<a href="#width">width</a>,
<a href="#x">x</a>,
<a href="#y">y</a>
</div>

<h4 id="EventIE">イベントオブジェクト(Internet Explorer)</h4>

<h5 id="event">◆ <i>window</i>.event</h5>
<div class=i>
<p>onClick="..." などのイベントハンドラの中で参照できるイベントオブジェクトです。イベントの概要については「<a href="onevent.htm" tppabs="http://www.tohoho-web.com/js/onevent.htm">イベントハンドラ</a>」を参照してください。</p>
</div>

<h5 id="typeIE">◆ <i>window</i>.event.type</h5>
<div class=i>
<p>イベントタイプ。たとえば、onClick の時は "click" という文字列となります。</p>
<div class="tab">HTML</div>
<pre class=c2>
&lt;input type="button" value="Click Me!!"
  onclick="alert(window.event.type)"&gt;
</pre>
</div>

<h5 id="keyCode">◆ <i>window</i>.event.keyCode</h5>
<h5 id="shiftKey">◆ <i>window</i>.event.shiftKey</h5>
<h5 id="ctrlKey">◆ <i>window</i>.event.ctrlKey</h5>
<h5 id="altKey">◆ <i>window</i>.event.altKey</h5>
<h5 id="button">◆ <i>window</i>.event.button</h5>
<div class=i>
<p>keyCode は、イベントが発生した時に、キーボード上のどのキーが押されていたかを示す値（ASCIIコード）。shiftKey、ctrlKey、altKey は、イベントが発生した時に、Shiftキー、Ctrlキー、Altキーが押されていたかどうかを示す真偽値。button は、イベントが発生した時に、マウスのどのボタンが押されていたかを示す値。1 は左ボタン、2 は右ボタン、4 は真中ボタンを示し、2 つ以上のボタンが押された場合はその合計値となります。</p>
<div class="tab">HTML</div>
<pre class=c2>
&lt;input type="text" onkeypress="alert(window.event.keyCode)"&gt;
&lt;input type="button" value="Click Me!!"
  onclick="alert(window.event.button)"&gt;
</pre>
</div>

<h5 id="screenXe">◆ <i>window</i>.event.screenX</h5>
<h5 id="screenYe">◆ <i>window</i>.event.screenY</h5>
<h5 id="clientX">◆ <i>window</i>.event.clientX</h5>
<h5 id="clientY">◆ <i>window</i>.event.clientY</h5>
<h5 id="x">◆ <i>window</i>.event.x</h5>
<h5 id="y">◆ <i>window</i>.event.y</h5>
<h5 id="offsetX">◆ <i>window</i>.event.offsetX</h5>
<h5 id="offsetY">◆ <i>window</i>.event.offsetY</h5>
<div class=i>
<p>このイベントが発生した場所の座標。screenX、screenY はスクリーン上の座標、clientX、clientY はクライアント領域（ウィンドウ）上の座標、x、y は配置された親要素（通常は BODY 要素）上の座標、offsetX、offsetY は、クリックした要素上の座標を示します。</p>
<div class="tab">HTML</div>
<pre class=c2>
&lt;img src="xxx.gif" alt="xxx" onclick="alert(
  'screen=' + event.screenX + ',' + event.screenY +
  ', client=' + event.clientX + ',' + event.clientY +
  ', xy=' + event.x + ',' + event.y +
  ', offset=' + event.offsetX + ',' + event.offsetY)"&gt;
</pre>
</div>

<h5 id="srcElement">◆ <i>window</i>.event.srcElement</h5>
<h5 id="fromElement">◆ <i>window</i>.event.fromElement</h5>
<div class=i>
<p>srcElement は、このイベントが発生した要素を示すオブジェクト。fromElement は、onMouseOver および onMouseOut イベントが発生した際の、マウスの移動元の要素を示すオブジェクト。</p>
<div class="tab">HTML</div>
<pre class=c2>
&lt;img src="xxx.gif" alt="xxx" onclick="alert(event.srcElement.src)"&gt;
</pre>
</div>

<h5 id="srcFilter">◆ <i>window</i>.event.srcFilter</h5>
<div class=i>
<p>onFilterChange イベントが発生した際の、発生元フィルタオブジェクト。</p>
</div>

<h5 id="cancelBubble">◆ <i>window</i>.event.cancelBubble</h5>
<div class=i>
<p>このイベントを上位の要素のイベントハンドラに渡すかどうかを示す真偽値。true を代入すると、上位のイベントハンドラが呼ばれなくなります。</p>
<div class="tab">HTML</div>
<pre class=c2>
&lt;script&gt;
function child() {
  alert("child");
  event.cancelBubble = true;
}
function parent() {
  alert("parent");
}
&lt;/script&gt;
&lt;div style="background-color:red; width:200; height:200;"
   onclick="parent()"&gt;
 &lt;div style="background-color:blue; width:100; height:100;"
    onclick="child()"&gt;
 &lt;/div&gt;
&lt;/div&gt;
</pre>
</div>

<h5 id="returnValue">◆ <i>window</i>.event.returnValue = <i>value</i></h5>
<div class=i>
<p>このイベントハンドラの戻り値。通常は「return <i>value</i>;」とするのと同等です。false を代入することにより、「Submitボタンを押した」や「リンクをクリックした」などの、イベント本来の動作を抑制することができます。</p>
</div>

<h5 id="reason">◆ <i>window</i>.event.reason</h5>
<div class=i>
<p>データソースオブジェクトにおけるデータ転送の状態。0 は成功、1 は中断、2 は失敗を示します。</p>
</div>

<h4 id="EventNS">イベントオブジェクト(Netscape Communicator)</h4>

<h5 id="captureEvents">◆ <i>object</i>.captureEvents(<i>eventName</i>)</h5>
<div class=i>
<p>Netscape Communicator 4.0 でサポートされたイベント処理技術で、イベントのキャプチャを開始します。<i>eventName</i> には、Event.イベント名 を指定します。</p>
</div>

<h5 id="Nevent">◆ <i>event</i></h5>
<div class=i>
<p>イベントハンドラの中で参照可能な event オブジェクトです。</p>
<div class="tab">HTML</div>
<pre class=c2>
&lt;script&gt;
function func(e) {
  alert(e.height + "," + e.width);
}
&lt;/script&gt;
&lt;form action="#"&gt;
&lt;input type="button" name="B1" onclick="func(event)" value="OK"&gt;
&lt;/form&gt;
</pre>
<p>「onxxxx = 関数名」でキャプチャしたイベントハンドラには引数として渡されます。</p>
<div class="tab">HTML</div>
<pre class=c2>
&lt;script&gt;
window.captureEvents(Event.CLICK);
window.onclick = func;
function func(e) {
  alert(e.height + "," + e.width);
}
&lt;/script&gt;
</pre>

</div>

<h5 id="target">◆ <i>event</i>.target</h5>
<div class=i>
<p>イメージオブジェクトやボタンオブジェクトなど、最初にイベントが送られたオブジェクトを示します。</p>
</div>

<h5 id="typeNN">◆ <i>event</i>.type</h5>
<div class=i>
<p>発生したイベントのタイプを "click" などの文字列で表します。</p>
</div>

<h5 id="data">◆ <i>event</i>.data</h5>
<div class=i>
<p>DragDrop の際、ドラッグ＆ドロップしたオブジェクト（ファイルなど）の URL を示す文字列の配列。</p>
</div>

<h5 id="which">◆ <i>event</i>.which</h5>
<div class=i>
<p>どのマウスボタンが押されたかを示します。1 が左ボタン、2 が（あれば）真ん中ボタン、3 が右ボタンとなります。</p>
<div class="tab">JavaScript</div>
<pre class=c2>
document.onmousedown = func;
function func(e) { alert(e.which); }
</pre>
</div>

<h5 id="modifires">◆ <i>event</i>.modifiers</h5>
<div class=i>
<p>イベント発生時にどの特殊キーが押されていたかを示します。Windows の場合は Alt（1）、Ctrl（2）、Shift（4）、Meta（8）の、Macintosh の場合はOption（1）、Ctrl（2）、Shift（4）、Command（8）の合計が値となります。</p>
</div>

<h5 id="screenXn">◆ <i>event</i>.screenX</h5>
<h5 id="screenYn">◆ <i>event</i>.screenY</h5>
<h5 id="pageX">◆ <i>event</i>.pageX</h5>
<h5 id="pageY">◆ <i>event</i>.pageY</h5>
<h5 id="width">◆ <i>event</i>.width</h5>
<h5 id="height">◆ <i>event</i>.height</h5>
<h5 id="layerX">◆ <i>event</i>.layerX</h5>
<h5 id="layerY">◆ <i>event</i>.layerY</h5>
<div class=i>
<p>イベントが発生した場所の、screenX、screenY はスクリーン（ディスプレイ）上の座標、pageX、pageY はページ上の座標、width、height はウィンドウ（フレーム）上の座標、layerX、layerY はレイヤー上の座標、を示します。</p>
</div>

<hr>
<a href="index.htm" tppabs="http://www.tohoho-web.com/js/index.htm">[up]</a>
<a href="form.htm" tppabs="http://www.tohoho-web.com/js/form.htm">[prev]</a>
<a href="layer.htm" tppabs="http://www.tohoho-web.com/js/layer.htm">[next]</a>
<div>Copyright (C) 1996-2001 杜甫々</div><div>改訂版初版：2001年5月20日</div>
<div>http://www.tohoho-web.com/js/event.htm</div>
</body>
</html>
