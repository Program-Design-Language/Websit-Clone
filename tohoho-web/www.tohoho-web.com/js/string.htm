<!DOCTYPE html>
<html>
<head>
<meta charset="utf-8">
<title>文字列（String） - とほほのWWW入門</title>
<meta name="viewport" content="width=device-width,initial-scale=1.0">
<link rel="stylesheet" href="../style3.css" tppabs="http://www.tohoho-web.com/style3.css">
</head>
<body>

<h2>文字列（String）</h2>
<a href="index.htm" tppabs="http://www.tohoho-web.com/js/index.htm">[up]</a>
<a href="number.htm" tppabs="http://www.tohoho-web.com/js/number.htm">[prev]</a>
<a href="boolean.htm" tppabs="http://www.tohoho-web.com/js/boolean.htm">[next]</a>

<h4>一覧</h4>
<div class=i>
<a href="#anchor">anchor()</a>,
<a href="#big">big()</a>,
<a href="#blink">blink()</a>,
<a href="#bold">bold()</a>,
<a href="#charAt">charAt()</a>,
<a href="#charCodeAt">charCodeAt()</a>,
<a href="#codePointAt">codePointAt()</a>,
<a href="#concat">concat()</a>,
<a href="#endsWith">endsWith()</a>,
<a href="#fixed">fixed()</a>,
<a href="#fontcolor">fontcolor()</a>,
<a href="#fontsize">fontsize()</a>,
<a href="#fromCharCode">fromCharCode()</a>,
<a href="#fromCodePoint">fromCodePoint()</a>,
<a href="#includes">includes()</a>,
<a href="#indexOf">indexOf()</a>,
<a href="#italics">italics()</a>,
<a href="#JSON.parse">JSON.parse()</a>,
<a href="#JSON.stringify">JSON.stringify()</a>,
<a href="#lastIndexOf">lastIndexOf()</a>,
<a href="#length">length</a>,
<a href="#link">link()</a>,
<a href="#match">match()</a>,
<a href="#normalize">normalize()</a>,
<a href="#repeat">repeat()</a>,
<a href="#replace">replace()</a>,
<a href="#search">search()</a>,
<a href="#slice">slice()</a>,
<a href="#small">small()</a>,
<a href="#split">split()</a>,
<a href="#startsWith">startsWith()</a>,
<a href="#strike">strike()</a>,
<a href="#newString">String()</a>,
<a href="#sub">sub()</a>,
<a href="#substr">substr()</a>,
<a href="#substring">substring()</a>,
<a href="#sup">sup()</a>,
<a href="#toLowerCase">toLowerCase()</a>,
<a href="#toUpperCase">toUpperCase()</a>,
<a href="#trim">trim()</a>,
<a href="#trimStart">trimStart()</a>,
<a href="#trimEnd">trimEnd()</a>
</div>

<h4 id="String">文字列</h4>
<div class=i>
<p>JavaScriptでは、文字列をダブルクォーテーション（"）またはシングルクォーテーション（'）で囲んで表現します。</p>
<div class="tab">JavaScript</div>
<pre class=c2>
xx = "ABCDEFG";
yy = 'ABCDEFG';
</pre>
</div>

<h4 id="Escape">エスケープ文字</h4>
<div class=i>
<p>文字列の中では、バックスラッシュ（\）に続く 1 文字は特別な意味を持ちます。これらの文字をエスケープ文字と呼びます。</p>
<table class="tb1">
<tr><th>文字</th><th>説明</th></tr>
<tr><td>\n</td><td>ニューライン（改行文字）</td></tr>
<tr><td>\f</td><td>フォームフィード</td></tr>
<tr><td>\b</td><td>バックスペース</td></tr>
<tr><td>\r</td><td>キャリッジリターン（復帰文字）</td></tr>
<tr><td>\t</td><td>タブ文字</td></tr>
<tr><td>\'</td><td>シングルクォート（'）</td></tr>
<tr><td>\"</td><td>ダブルクォート（"）</td></tr>
<tr><td>\\</td><td>バックスラッシュ（\）</td></tr>
<tr><td>\<i>nnn</i></td><td>8進数による文字コード指定（例えば "A" は "\101"）</td></tr>
<tr><td>\x<i>nn</i></td><td>16進数による文字コード指定（例えば "A" は "\x41"）</td></tr>
<tr><td>\u<i>nnnn</i></td><td>Unicode文字（例えば "あ" は "\u3042"）</td></tr>
<tr><td>\u{<i>nnnnnn</i>}</td><td>サロゲートペアを含むUnicode文字 (例: \u{20B9F})</td></tr>
</table>
<p>例えば、alert() によるダイアログ中でメッセージを改行するには、次のようにします。</p>
<div class="tab">JavaScript</div>
<pre class=c2>
alert("ざんねんでした。\nまたきてね。");
</pre>
</div>

<h4 id="Quot">ダブルクォートとシングルクォート</h4>
<div class=i>
<p>ダブルクォート（"）の中でダブルクォート（"）を使用することはできません。シングルクォート（'）の中のシングルクォート（'）も同様です。</p>
<div class="tab">JavaScript</div>
<pre class=c2>
str = "ダブルクォートは " です。";     <span class="comment">// error!!</span>
str = 'シングルクォートは ' です。';   <span class="comment">// error!!</span>
</pre>
<p>どうしても使用したい場合は、"..." の中でシングルクォート（'）を使うか、'...' の中でダブルクォート（"）を使うか、\" や \' を使います。</p>
<div class="tab">JavaScript</div>
<pre class=c2>
str = "シングルクォートは ' です。";
str = 'ダブルクォートは " です。';
str = "ダブルクォート \" で、シングルクォートは \' です。";
</pre>
</div>

<h4 id="Template">テンプレート文字列</h4>

<h5>◆ テンプレート文字列</h5>
<div class=i>
<p><a href="what.htm#version" tppabs="http://www.tohoho-web.com/js/what.htm#version">ES6(2015)</a> では、文字列の中で変数を展開可能なテンプレート文字列がサポートされました。ダブルクォート(")、シングルクォート(')の代わりにバッククォート(`) を使用します。</p>
<div class="tab">JavaScript</div>
<pre class=c2>
var name = "Yamada";
var str = `ようこそ ${name} さん`;
console.log(str);  <span class="comment">// ようこそ Yamada さん</span>
</pre>
<p>{ ... } の間には JavaScript 構文を記述することが可能です。</p>
<div class="tab">JavaScript</div>
<pre class=c2>
var a = 3;
var b = 5;
var str = `Answer is ${ a + b }`;   <span class="comment">// Answer is 8</span>
</pre>
</div>

<h5>◆ タグ付きテンプレート</h5>
<div class=i>
<p>タグ付きのテンプレート文字列では、タグに対応する関数が呼ばれます。第一引数には文字列の配列が、残りの引数には ${...} に指定したパラメータが渡されます。</p>
<div class="tab">JavaScript</div>
<pre class=c2>
var width = '30px';
var height = '40px';
function <em>tag</em>(strings, ...values) {
  console.log(strings);   <span class="comment">// ["Heightは ", " Widthは ", " です"]</span>
  console.log(values);    <span class="comment">// ["30px", "40px"]</span>
  var str = "";
  for (var i = 0; i &lt; strings.length - 1; i++) {
    str += (strings[i] + values[i]);
  }
  str += strings[i];
  return str;
};
var str = <em>tag`</em>Heightは ${height} Widthは ${width} です`;
console.log(str);     <span class="comment">// "Heightは 30px Widthは 40px です"</span>
</pre>
</div>

<h5 id="templateEs2018">◆ ES2018での強化</h5>
<div class=i>
<p>テンプレート文字列内に、LaTeX などで使用される "\unicode" など、\u や \x などの特殊文字が含まれているとシンタックスエラーとなっていましたが、<a href="what.htm#es2018" tppabs="http://www.tohoho-web.com/js/what.htm#es2018">ES2018(ES9)</a> では、タグ付きテンプレート文字列でのみ、strings.raw で元の文字列を参照できるようになりました。</p>
<div class="tab">JavaScript</div>
<pre class=c2>
var width = '30px';
var height = '40px';
function tag(strings, ...values) {
  var str = "";
  for (var i = 0; i &lt; strings.length - 1; i++) {
    str += (strings<em>.raw[i]</em> + values[i]);
  }
  str += strings<em>.raw[i]</em>;
  return str;
};
var str = tag`<em>\unicode</em> Heightは ${height} Widthは ${width} です`;
console.log(str);     // "\unicode Heightは 30px Widthは 40px です"
</pre>
</div>

<h4 id="Multiline">マルチライン</h4>
<div class=i>
<p>"..." や '...' や `...` では、行末にバックスラッシュ(\)を記載することでマルチラインの文字列を記述できます。</p>
<div class="tab">JavaScript</div>
<pre class=c2>
str = "ERROR: 404\n\
File not found.";              <span class="comment">// "ERROR: 404\nFile not found."</span>
</pre>
<p>`...` ではバックスラッシュを省略した場合、改行コードで連結されます。</p>
<div class="tab">JavaScript</div>
<pre class=c2>
str = `ERROR: 404
File not found.`;              <span class="comment">// "ERROR: 404\nFile not found."</span>
</pre>
</div>

<h4 id="ObjString">文字列オブジェクト</h4>

<h5 id="newString">◆ <i>string</i> = new String(<i>string</i>)</h5>
<div class=i>
<p>文字列オブジェクトを生成します。ビルトイン関数の <a href="builtin.htm#String" tppabs="http://www.tohoho-web.com/js/builtin.htm#String">String()</a> とは別物です。「すべての型をオブジェクトタイプとして実装する」というポリシーで用意されていますが、あまり使用されることはありません。</p>
<div class="tab">JavaScript</div>
<pre class=c2>
xx = new String("ABC");
</pre>
</div>

<h4 id="convert-to-string">文字列への変換</h4>
<h5 id="string">◆ <i>string</i> = String(<i>value</i>)</h5>
<div class="i">
<p><i>value</i> を文字列に変換します。</p>
<div class="tab">JavaScript</div>
<pre class="c2">
var str = String(123);
</pre>
</div>

<h4 id="StrLength">文字列の長さ</h4>
<h5 id="length">◆ <i>string</i>.length</h5>
<div class=i>
<p>文字列の長さを求めます。初期のブラウザでは日本語1文字を2と数えるものもありましたが、通常は言語に関わらず、1文字を1と数えます。ただし、<a href="#surrogate-pair">サロゲートペア</a>領域の文字に対しては、1文字を 2と数えます。</p>
<div class="tab">JavaScript</div>
<pre class=c2>
str = "あいうえお";
console.log(str.length);           <span class="comment">// =&gt; 5</span>
</pre>
<p>サロゲートペア領域文字も1文字として数えるには次のようにします。</p>
<div class="tab">JavaScript</div>
<pre class=c2>
function strLength(str) {
  var length = 0;
  for (var i = 0; i &lt;= str.length; i++) {
    var ch = str.charCodeAt(i);
    if ((ch &lt; 0xdc00) || (0xdfff &lt; ch)) {
      length++;
    }
  }
  return(length);
}
</pre>
</div>

<h4 id="Part">文字列の部分取り出し</h4>

<h5 id="charAt">◆ <i>string</i>.charAt(<i>n</i>)</h5>
<div class=i>
<p><i>string</i> の <i>n</i> 番目（最初の文字を0番目とする）の文字を返します。</p>
<div class="tab">JavaScript</div>
<pre class=c2>
str = "あいうえお";
for (var i = 0; i &lt; str.length; i++) {
  console.log(str.charAt(i));  <span class="comment">// =&gt; あ い う え お</span>
}
</pre>
</div>

<h5 id="substring">◆ <i>string</i>.substring(<span class="nb"><i>from</i> [, <i>to</i>]</span>)</h5>
<div class=i>
<p><i>string</i> の <i>from</i>～<i>to</i> - 1 文字目（最初の文字を 0 番とする）の文字列を返します。負の値を指定すると 0 番目と見なされます。<i>to</i> を省略すると残りのすべてを返します。</p>
<div class="tab">JavaScript</div>
<pre class=c2>
"ABCDEFG".substring(2, 4);    <span class="comment">// =&gt; "CD"</span>
</pre>
</div>

<h5 id="slice">◆ <i>string</i>.slice(<span class="nb"><i>from</i> [, <i>to</i>]</span>)</h5>
<div class=i>
<p><i>string</i> の <i>from</i>～<i>to</i> - 1 文字目（最初の文字を 0 番目とする）の文字列を返します。負の値を指定すると後ろから数える点が substring() と異なります。<i>to</i> を省略すると残りのすべてを返します。</p>
<div class="tab">JavaScript</div>
<pre class=c2>
"ABCDEFG".slice(2, 4);    <span class="comment">// =&gt; "CD"</span>
"ABCDEFG".slice(2);       <span class="comment">// =&gt; "CDEFG"</span>
</pre>
</div>

<h5 id="substr">◆ <i>string</i>.substr(<span class="nb"><i>from</i> [, <i>len</i>]</span>)</h5>
<div class=i>
<p><i>string</i> の <i>from</i> 番目から <i>len</i> 文字分（最初の文字を 0 番目とする）の文字列を返します。<i>from</i> に負の値を指定すると後ろから数えます（IE6は未対応）。<i>len</i> を省略すると残りのすべてを返します。</p>
<div class="tab">JavaScript</div>
<pre class=c2>
"ABCDEFG".substr(2, 4);    <span class="comment">// =&gt; "CDEF"</span>
</pre>
</div>

<h5 id="trim">◆ <i>string</i>.trim()</h5>
<div class=i>
<p><i>string</i> の前後のホワイトスペースを取り除いた文字列を返します。<a href="what.htm#version" tppabs="http://www.tohoho-web.com/js/what.htm#version">ES5.1</a> で追加されたもので、Chrome, Firefox, Safari, Edge, IE9 以降で使用可能です。</p>
<div class="tab">JavaScript</div>
<pre class=c2>
"   ABC   ".trim();        <span class="comment">// =&gt; "ABC"</span>
</pre>
</div>

<h5 id="trimStart">◆ <i>string</i>.trimStart()</h5>
<h5 id="trimEnd">◆ <i>string</i>.trimEnd()</h5>
<div class=i>
<p><a href="what.htm#es2019" tppabs="http://www.tohoho-web.com/js/what.htm#es2019">ES2019(ES10)</a> で追加された機能で、trimStart() は文字列の前方の、trimEnd() は文字列の後方のホワイトスペースを取り除いた文字列を帰ります。</p>
<div class="tab">JavaScript</div>
<pre class=c2>
"   ABC   ".trimStart();      <span class="comment">// =&gt; "ABC   "</span>
"   ABC   ".trimEnd();        <span class="comment">// =&gt; "   ABC"</span>
</pre>
</div>

<h4 id="Spcat">文字列の分割と連結</h4>

<h5 id="split">◆ <i>string</i>.split(<span class="nb">[<i>sep</i> [, <i>limit</i>]]</span>)</h5>
<div class=i>
<p><i>string</i> を <i>sep</i> を区切り文字として分割し、その配列を返します。<i>limit</i> は配列の個数を制限します。<i>sep</i> を省略すると <i>string</i> 全体を唯一の要素とする配列を返します。</p>
<div class="tab">JavaScript</div>
<pre class=c2>
a = "23:59:59".split(":");
console.log(a[0] + "時" + a[1] + "分" + a[2] + "秒");   <span class="comment">// =&gt; "23時59分59秒"</span>
</pre>
</div>

<h5 id="concat">◆ <i>string</i>.concat(<i>str2</i>, <i>str3</i>, ...)</h5>
<div class=i>
<p><i>string</i> に <i>str2</i>, <i>str3</i>, ... を連結した文字列を返します。</p>
<div class="tab">JavaScript</div>
<pre class=c2>
"ABC".concat("DEF", "EFG");         <span class="comment">// =&gt; "ABCDEFG"</span>
</pre>
</div>

<h5 id="repeat">◆ <i>string</i>.repeat(<i>n</i>)</h5>
<div class=i>
<p><i>string</i> を <i>n</i> 回繰り返した文字列を返します。IE11 ではサポートされていません。</p>
<div class="tab">JavaScript</div>
<pre class=c2>
"ABC".repeat(3);      <span class="comment">// =&gt; "ABCABCABC"</span>
</pre>
</div>

<h4 id="Repl">文字列の置換</h4>

<h5 id="replace">◆ <i>string</i>.replace(<i>regexp</i>, <i>newString</i>)</h5>
<div class=i>
<p><i>string</i> の内、<i>regexp</i> で指定した文字列や <a href="regexp.htm" tppabs="http://www.tohoho-web.com/js/regexp.htm">正規表現</a> にマッチする部分文字列を <i>newString</i> に置き換えたものを返します。</p>
<div class="tab">JavaScript</div>
<pre class=c2>
"This is a pen.".replace("pen", "book");     <span class="comment">// =&gt; "This is a book."</span>
</pre>
<p><i>newString</i> では、$ で始まる特殊文字を使用することができます。$&amp; はマッチした文字列全体、$1～$100 は正規表現中の (...) に対応する部分文字列、$` はマッチ部分より前の文字列、$' はマッチ部分より後ろの文字列、$$ は $ 自身を示します。</p>
<div class="tab">JavaScript</div>
<pre class=c2>
console.log("[23:59:59]".replace(/(\d+):(\d+):(\d+)/, "$1時$2分$3秒")); <span class="comment">// =&gt; "[23時59分59秒]"</span>
    <span class="comment">// $&amp; =&gt; "23:59:59"、$1 =&gt; "23"、$2 =&gt; "59"、$3 =&gt; "59"</span>
    <span class="comment">// $` =&gt; "["、$' =&gt; "]"、$$ =&gt; "$"</span>
</pre>
<p>JavaScript 1.3 以降では <i>newString</i> の部分に関数を指定することができます。<i>match</i> は $&amp;、<i>p1</i>～<i>p3</i> は $1～$3、<i>offset</i> はマッチした文字列の位置(0開始)、<i>str</i> は元の文字列全体を示します。</p>
<div class="tab">JavaScript</div>
<pre class=c2>
xx = "[23:59:59]".replace(/(\d+):(\d+):(\d+)/, function(match, p1, p2, p3, offset, str) {
  console.log(match);   <span class="comment">// =&gt; "23:59:59"</span>
  console.log(p1);      <span class="comment">// =&gt; "23"</span>
  console.log(p2);      <span class="comment">// =&gt; "59"</span>
  console.log(p3);      <span class="comment">// =&gt; "59"</span>
  console.log(offset);  <span class="comment">// =&gt; 1</span>
  console.log(str);     <span class="comment">// =&gt; "[23:59:59]"</span>
  return(p1 + "時" + p2 + "分" + p3 + "秒");     <span class="comment">// =&gt; "23時59分59秒"</span>
});
console.log(xx);          <span class="comment">// =&gt; "[23時59分59秒]"</span>
</pre>
</div>

<h5 id="toUpperCase">◆ <i>string</i>.toUpperCase()</h5>
<h5 id="toLowerCase">◆ <i>string</i>.toLowerCase()</h5>
<div class=i>
<p><i>string</i> を大文字・小文字に変換した文字列を返します。</p>
<div class="tab">JavaScript</div>
<pre class=c2>
"Abc".toUpperCase();   <span class="comment">// =&gt; "ABC"</span>
"Abc".toLowerCase();   <span class="comment">// =&gt; "abc"</span>
</pre>
</div>

<h4 id="Find">文字列の検索</h4>

<h5 id="indexOf">◆ <i>string</i>.indexOf(<span class="nb"><i>key</i> [, <i>from</i>]</span>)</h5>
<div class=i>
<p><i>string</i> の <i>from</i> 番目（最初の文字を0番目とする）から後方に検索し、最初に <i>key</i> が現れる位置（<i>string</i> の最初の文字を0番目とする）を、見つからない場合は -1 を返します。</p>
<div class="tab">JavaScript</div>
<pre class=c2>
"ABCABC".indexOf("C");       <span class="comment">// =&gt; 2</span>
"ABCABC".indexOf("C", 3);    <span class="comment">// =&gt; 5</span>
</pre>
</div>

<h5 id="lastIndexOf">◆ <i>string</i>.lastIndexOf(<span class="nb"><i>key</i> [, <i>from</i>]</span>)</h5>
<div class=i>
<p><i>string</i> の <i>from</i> 番目（最初の文字を0番目とする）から前方に、最初に <i>key</i> が現れる位置（<i>string</i> の最初の文字を0番目とする）を、見つからない場合は -1 を返します。</p>
<div class="tab">JavaScript</div>
<pre class=c2>
fileName = "xxx.gif";
if ((n = fileName.lastIndexOf(".")) != -1) {
  ext = fileName.substring(n);
}
</pre>
</div>

<h5 id="startsWith">◆ <i>string</i>.startsWith(<i>str</i>)</h5>
<h5 id="endsWith">◆ <i>string</i>.endsWith(<i>str</i>)</h5>
<h5 id="includes">◆ <i>string</i>.includes(<i>str</i>)</h5>
<div class=i>
<p><i>string</i> の中に <i>str</i> を含んでいるか否かを判断します。startsWith() は <i>str</i> で始まっていれば、endsWith() は <i>str</i> で終わっていれば、includes() は <i>str</i> を含んでいれば true を、さもなくば false を返します。IE11 ではサポートされていません。</p>
<div class="tab">JavaScript</div>
<pre class=c2>
"ABCDEFG".startsWith("ABC");        <span class="comment">// =&gt; true</span>
"ABCDEFG".endsWith("EFG");          <span class="comment">// =&gt; true</span>
"ABCDEFG".includes("DEF");          <span class="comment">// =&gt; true</span>
</pre>
</div>

<h4 id="Matching">文字列のマッチング</h4>

<h5 id="match">◆ <i>string</i>.match(<i>regexp</i>)</h5>
<div class=i>
<p><a href="regexp.htm" tppabs="http://www.tohoho-web.com/js/regexp.htm">正規表現</a> <i>regexp</i> に最初にマッチした部分の文字列を返します。マッチしなかった時は null 値を返します。</p>
<div class="tab">JavaScript</div>
<pre class=c2>
if ("ABCDEFG".match(/def/i)) {
  console.log("Match");
}
</pre>
</div>

<h5 id="search">◆ <i>string</i>.search(<i>regexp</i>)</h5>
<div class=i>
<p><i>string</i> から <a href="regexp.htm" tppabs="http://www.tohoho-web.com/js/regexp.htm">正規表現</a> <i>regexp</i> にマッチする部分の位置を返します。見つからなければ -1 を返します。</p>
<div class="tab">JavaScript</div>
<pre class=c2>
if ("ABCDEFG".search(/def/i) != -1) {
  console.log("Match");
}
</pre>
</div>

<h4 id="StrCode">文字と文字コードの変換</h4>

<h5 id="charCodeAt">◆ <i>string</i>.charCodeAt(<i>n</i>)</h5>
<div class=i>
<p><i>string</i> の <i>n</i> 番目（最初の文字を0番目とする）の文字の、UTF-16 における文字コードを返します。サロゲートペアには対応していません。</p>
<div class="tab">JavaScript</div>
<pre class=c2>
str = "日本語";
for (var i = 0; i &lt; str.length; i++) {
  console.log(str.charCodeAt(i).toString(16));       <span class="comment">// =&gt; 65e5 672c 8a9e</span>
}
</pre>
</div>

<h5 id="codePointAt">◆ <i>string</i>.codePointAt(<i>n</i>)</h5>
<div class=i>
<p><i>string</i> の <i>n</i> 番目（最初の文字を0番目とする）の文字の、UTF-16 における文字コードを返します。サロゲートペアに対応しています。Chrome, Firefox, Safari, Edge ではサポートされていますが、IE11 ではサポートされていません。</p>
<div class="tab">JavaScript</div>
<pre class=c2>
str = "𠮟る";
for (var i = 0; i &lt; str.length; i++) {
  console.log(str.codePointAt(i).toString(16));  <span class="comment">// =&gt; 20b9f 308b</span>
  var ch = str.charCodeAt(i);
  if ((0xd800 &lt;= ch) && (ch &lt;= 0xdbff)) {        <span class="comment">// サロゲートの場合は1文字読み飛ばす</span>
    i++;
  }
}
</pre>
</div>

<h5 id="fromCharCode">◆ String.fromCharCode(<i>num1</i>, ..., <i>numN</i>)</h5>
<div class=i>
<p>文字コード <i>num1</i>, ..., <i>numN</i> で表される文字列を返します。サロゲートペアには対応していません。</p>
<div class="tab">JavaScript</div>
<pre class=c2>
String.fromCharCode(0x41, 0x42, 0x43);           <span class="comment">// =&gt; "ABC"</span>
String.fromCharCode(0x65e5, 0x672c, 0x8a9e);     <span class="comment">// =&gt; "日本語"</span>
</pre>
</div>

<h5 id="fromCodePoint">◆ String.fromCodePoint(<i>num1</i>, ..., <i>numN</i>)</h5>
<div class=i>
<p>UTF-16 における文字コード <i>num1</i>, ..., <i>numN</i> で表される文字列を返します。サロゲートペアに対応しています。IE11 ではサポートされていません。</p>
<div class="tab">JavaScript</div>
<pre class=c2>
String.fromCodePoint(0x20b9f, 0x308b);           <span class="comment">// =&gt; "𠮟る"</span>
</pre>
</div>

<h4 id="Tag">文字列のタグつけ</h4>

<h5 id="bold">◆ <i>string</i>.bold()</h5>
<h5 id="italics">◆ <i>string</i>.italics()</h5>
<h5 id="fixed">◆ <i>string</i>.fixed()</h5>
<h5 id="big">◆ <i>string</i>.big()</h5>
<h5 id="small">◆ <i>string</i>.small()</h5>
<h5 id="blink">◆ <i>string</i>.blink()</h5>
<h5 id="strike">◆ <i>string</i>.strike()</h5>
<h5 id="sup">◆ <i>string</i>.sup()</h5>
<h5 id="sub">◆ <i>string</i>.sub()</h5>
<h5 id="fontcolor">◆ <i>string</i>.fontcolor(<i>color</i>)</h5>
<h5 id="fontsize">◆ <i>string</i>.fontsize(<i>size</i>)</h5>
<h5 id="anchor">◆ <i>string</i>.anchor(<i>name</i>)</h5>
<h5 id="link">◆ <i>string</i>.link(<i>name</i>)</h5>
<div class=i>
<p><i>string</i> を &lt;b&gt;、&lt;i&gt;、&lt;tt&gt;、&lt;big&gt;、&lt;small&gt;、&lt;blink&gt;、&lt;strike&gt;、&lt;sup&gt;、&lt;sub&gt;、&lt;font color="<i>color</i>"&gt;、&lt;font size="<i>size</i>"&gt;、&lt;a name="<i>name</i>"&gt;、&lt;a href="<i>name</i>"&gt; の開始タグ、終了タグで囲んだ文字列を返します。</p>
<div class="tab">JavaScript</div>
<pre class=c2>
"ABC".bold();                <span class="comment">// =&gt; &lt;b&gt;ABC&lt;/b&gt;</span>
"ABC".italics();             <span class="comment">// =&gt; &lt;i&gt;ABC&lt;/i&gt;</span>
"ABC".fixed();               <span class="comment">// =&gt; &lt;tt&gt;ABC&lt;/tt&gt;</span>
"ABC".big();                 <span class="comment">// =&gt; &lt;big&gt;ABC&lt;/big&gt;</span>
"ABC".small();               <span class="comment">// =&gt; &lt;small&gt;ABC&lt;/small&gt;</span>
"ABC".blink();               <span class="comment">// =&gt; &lt;blink&gt;ABC&lt;/blink&gt;</span>
"ABC".strike();              <span class="comment">// =&gt; &lt;strike&gt;ABC&lt;/strike&gt;</span>
"ABC".sup();                 <span class="comment">// =&gt; &lt;sup&gt;ABC&lt;/sup&gt;</span>
"ABC".sub();                 <span class="comment">// =&gt; &lt;sub&gt;ABC&lt;/sub&gt;</span>
"ABC".fontcolor("red");      <span class="comment">// =&gt; &lt;font color="red"&gt;ABC&lt;/font&gt;</span>
"ABC".fontsize(7);           <span class="comment">// =&gt; &lt;font size="7"&gt;ABC&lt;/font&gt;</span>
"ABC".anchor("xxx");         <span class="comment">// =&gt; &lt;a name="xxx"&gt;ABC&lt;/a&gt;</span>
"ABC".link("index.html");    <span class="comment">// =&gt; &lt;a href="index.html"&gt;ABC&lt;/a&gt;</span>
</pre>
</div>

<h4 id="Padding">文字列のパディング</h4>

<h5 id="padStart">◆ <i>string</i>.padStart(<span class="nb"><i>length</i>[, <i>str</i>]</span>)</h5>
<h5 id="padEnd">◆ <i>string</i>.padEnd(<span class="nb"><i>length</i>[, <i>str</i>]</span>)</h5>
<div class=i>
<p>padStart() は文字列の前方に、padEnd() は文字列の後方にパディングを行います。<i>length</i> はパディング後の長さ、<i>string</i> はパディングする文字を指定します。<i>string</i> が <i>length</i> よりも長い時は何も行いません。<i>str</i> を省略すると半角スペースでパディングします。</p>
<div class="tab">JavaScript</div>
<pre class=c2>
str = "123";
console.log(str.padStart(5, "0"));      <span class="cm">// "00123"</span>
console.log(str.padEnd(5, "_"));        <span class="cm">// "123__"</span>
</pre>
</div>

<h4 id="JSON">JSON文字列の変換</h4>

<h5 id="JSON.parse">◆ JSON.parse(<i>str</i>)</h5>
<h5 id="JSON.stringify">◆ JSON.stringify(<i>obj</i>)</h5>
<div class=i>
<p><a href="what.htm#es2017" tppabs="http://www.tohoho-web.com/js/what.htm#es2017">ES2017(ES8)</a> で追加された機能で、<a href="what.htm#version" tppabs="http://www.tohoho-web.com/js/what.htm#version">ES5</a> からは、JSON 文字列と JavaScript オブジェクトを相互変換する機能が追加されました。<a href="what.htm#version" tppabs="http://www.tohoho-web.com/js/what.htm#version">ES5</a> で定義され、Chrome, Firefox, Safari, Edge, IE8 で利用可能です。</p>
<div class="tab">JavaScript</div>
<pre class=c2>
var str = '{"width":160, "height":120}';
var obj = <em>JSON.parse(str)</em>;
console.log(obj);  <span class="comment">// {width: 160, height: 120}</span>
var str2 = <em>JSON.stringify(obj);</em>  <span class="comment">// {"width":160,"height":120}</span>
</pre>
</div>

<h4 id="Unicode">Unicode文字列</h4>

<h5 id="surrogate-pair">◆ サロゲートペア</h5>
<div class=i>
<p>Unicodeでは、世界中の文字を基本的に、BMP(Basic Multilingual Plane:基本多言語面) と呼ばれる U+0000～U+FFFF までの 65535文字の空間で表現することを試みていました。Shift_JIS には存在しない「髙(はしごだか:U+9AD9)」や「鷗(森鴎外の難しい方の漢字:U+9DD7)」も BMP に含まれます。しかし、BMP の範囲では収まりきらなくなったため、16面増やし、U+10000～U+10FFFF までの範囲を拡張しました。「𠮟(叱の異体文字:U+20B9F)」や「🍔(ハンバーガーの絵文字:U+1F354)」などがこれにあたります。しかし、UTF-16 では U+0000～U+FFFF までの文字しか表現することができないため、拡張分の文字は、上位サロゲート(U+D800～U+DBFF)＋下位サロゲート(U+DC00～U+DFFF)の 2文字を組み合わせて表現します。これを「サロゲートペア」と呼びます。</p>
<p>最近のブラウザは概ねサロゲートペアに対応しているものの、文字の長さを数える際は、サロゲートペア領域の文字を2文字とカウントするので注意が必要です。下記では、サロゲートペア領域の文字を 2文字として配列にしたり、1文字として配列にしたり、1文字とした場合の文字数をカウントしています。</p>
<div class="tab">JavaScript</div>
<pre class=c2>
function func(str) {
  var arr1 = [];   <span class="comment">// サロゲートペアを1文字として扱う</span>
  var arr2 = [];   <span class="comment">// サロゲートペアを2文字として扱う</span>
  var length = 0;
  for (var i = 0; i &lt; str.length; i++) {
    var ch = str.charCodeAt(i);
    arr2.push(ch);
    if ((ch &lt; 0xdc00) || (0xdfff &lt; ch)) {     <span class="comment">// 下位サロゲートでなければ</span>
      arr1.push(str.codePointAt(i));
      length++;
    }
  }
  console.log(arr1);      <span class="comment">// =&gt; [0x68ee, 0x9dd7, 0x5916, 0x20b9f,        0x308b]</span>
  console.log(arr2);      <span class="comment">// =&gt; [0x68ee, 0x9dd7, 0x5916, 0xd842, 0xdf9f, 0x308b]</span>
  console.log(length);    <span class="comment">// =&gt; 5</span>
}

func('森鷗外𠮟る');
</pre>
</div>

<h5 id="normalize">◆ <i>string</i>.normalize(<span class="nb">[<i>form</i>]</span>)</h5>
<div class=i>
<p>Unicode文字列 <i>string</i> を正規化したものを返します。
<i>form</i> には変換形式を NFC、NFD、NFKC、NFKD のいずれか(省略時はNFC)で指定します。
合成は「か(\u304b)」と濁点文字(\u3099)からなる「が(\u304b\u3099)」を1文字の「が(\u304c)」に合成すること、
分解は「が(\u304c)」を「か(\u304b)」と濁点文字(\u3099)に分解することを言います。
正準等価とは「が(\u304b\u3099)」と「が(\u304c)」の様にコードは異なるが見栄えも意味も同じとみなすこと、
互換等価とは半角カナの「ｶ(\uff76)」と全角カナの「カ(\u30ab)」の様にコードや見栄えは異なるが同じ文字とみなすことを言います。
例えば、「㌀(\u3300)」と「アパート(\u30a2\u30d1\u30fc\u30c8)」は互換等価です。IE11 ではサポートされていません。</p>
<div class="tab">JavaScript</div>
<pre class=c2>
var str1 = '\u304b\u3099';      <span class="comment">// が(\u304b\u3099)</span>
<span class="comment">// NFC(正規化形式C): 正準等価性に基づく分解後、正準等価性に基づいて再度合成</span>
str1.normalize('NFC');          <span class="comment">// =&gt; が(\u304c)</span>
<span class="comment">// NFD(正規化形式D): 正準等価性に基づく分解</span>
str1.normalize('NFD');          <span class="comment">// =&gt; が(\u304b\u3099)</span>

var str2 = 'ｶﾞ';                <span class="comment">// =&gt; ｶﾞ(\uff76\uff9e)</span>
<span class="comment">// NFKC(正規化形式KC): 互換等価性に基づく分解後、正準等価性に基づいて再度合成</span>
str2.normalize('NFKC');         <span class="comment">// =&gt; が(\u304c)</span>
<span class="comment">// NFKD(正規化形式KD): 互換等価性に基づく分解</span>
str2.normalize('NFKD');         <span class="comment">// =&gt; が(\u304b\u3099)</span>
</pre>
</div>

<hr>
<a href="index.htm" tppabs="http://www.tohoho-web.com/js/index.htm">[up]</a>
<a href="number.htm" tppabs="http://www.tohoho-web.com/js/number.htm">[prev]</a>
<a href="boolean.htm" tppabs="http://www.tohoho-web.com/js/boolean.htm">[next]</a>
<div>Copyright (C) 1996-2019 杜甫々</div>
<div>改訂版初版：2006年11月12日、最終更新：2019年2月24日</div>
<div>http://www.tohoho-web.com/js/string.htm</div>
</body>
</html>
