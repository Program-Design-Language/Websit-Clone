<!DOCTYPE html>
<html>
<head>
<meta charset="utf-8">
<title>ウィンドウ（Window） - とほほのWWW入門</title>
<meta name="viewport" content="width=device-width,initial-scale=1.0">
<link rel="stylesheet" href="../style3.css" tppabs="http://www.tohoho-web.com/style3.css">
</head>
<body>

<h2>ウィンドウ（Window）</h2>
<a href="index.htm" tppabs="http://www.tohoho-web.com/js/index.htm">[up]</a>
<a href="symbol.htm" tppabs="http://www.tohoho-web.com/js/symbol.htm">[prev]</a>
<a href="navigator.htm" tppabs="http://www.tohoho-web.com/js/navigator.htm">[next]</a>

<h4>一覧</h4>
<div class=i>
<a href="#addEventListener">addEventListener()</a>,
<a href="#alert">alert()</a>,
<a href="#applicationCache">applicationCache</a>,
<a href="#atob">atob()</a>,

<a href="#back">back()</a>,
<a href="#blur">blur()</a>,
<a href="#btoa">btoa()</a>,

caches,
cancelAnimationFrame,
cancelIdleCallback,
<a href="#captureEvents">captureEvents()</a>,
chrome,
<a href="#clearInterval">clearInterval()</a>,
<a href="#clearTimeout">clearTimeout()</a>,
<a href="#clientInformation">clientInformation</a>,
<a href="#close">close()</a>,
<a href="#closed">closed</a>,
<a href="#confirm">confirm()</a>,
createImageBitmap,
crypto,
customElements,

<a href="#defaultStatus">defaultStatus</a>,
defaultstatus,
devicePixelRatio,
<a href="#dialogArguments">dialogArguments</a>,
<a href="#dialogHeight">dialogHeight</a>,
<a href="#dialogLeft">dialogLeft</a>,
<a href="#dialogTop">dialogTop</a>,
<a href="#dialogWidth">dialogWidth</a>,
<a href="#disableExternalCapture">disableExternalCapture()</a>,
dispatchEvent(),
<a href="#document">document</a>,

<a href="#enableExternalCapture">enableExternalCapture()</a>,
<a href="#execScript">execScript()</a>,
external,

fetch(),
<a href="#find">find()</a>,
<a href="#focus">focus()</a>,
<a href="#forward">forward()</a>,
frameElement,
<a href="#frames">frames</a>,

getComputedStyle(),
<a href="#getSelection">getSelection()</a>,

<a href="#handleEvent">handleEvent()</a>,
<a href="#history">history</a>,
<a href="#home">home()</a>,

<a href="#indexedDB">indexedDB</a>,
<a href="#innerHeight">innerHeight</a>,
<a href="#innerWidth">innerWidth</a>,
isSecureContext,

<a href="#length">length</a>,
list,
<a href="#localStorage">localStorage</a>,
<a href="#location">location</a>,
<a href="#locationbar">locationbar</a>,

matchMedia,
<a href="#menubar">menubar</a>,
<a href="#moveBy">moveBy()</a>,
<a href="#moveTo">moveTo()</a>,

<a href="#name">name</a>,
<a href="#navigator">navigator</a>,

<a href="#offscreenBuffering">offscreenBuffering</a>,
<a href="#open">open()</a>,
<a href="#openDatabase">openDatabase()</a>,
<a href="#opener">opener</a>,
origin,
<a href="#outerHeight">outerHeight</a>,
<a href="#outerWidth">outerWidth</a>,

<a href="#pageXOffset">pageXOffset</a>,
<a href="#pageXOffset">pageYOffset</a>,
<a href="#parent">parent</a>,
performance,
<a href="#personalbar">personalbar</a>,
<a href="#postMessage">postMessage()</a>,
<a href="#print">print()</a>,
<a href="#prompt">prompt()</a>,

<a href="#releaseEvents">releaseEvents()</a>,
<a href="#removeEventListener">removeEventListener()</a>,
requestAnimationFrame(),
requestIdleCallback(),
<a href="#resizeBy">resizeBy()</a>,
<a href="#resizeTo">resizeTo()</a>,
<a href="#returnValue">returnValue</a>,
<a href="#routeEvent">routeEvent()</a>,

screen,
screenLeft,
screenTop,
screenX,
screenY,
<a href="#scroll">scroll()</a>,
<a href="#scrollBy">scrollBy()</a>,
<a href="#scrollTo">scrollTo()</a>,
<a href="#scrollbar">scrollbars</a>,
scrollX,
scrollY,
<a href="#self">self</a>,
sessionStorage,
<a href="#setInterval">setInterval()</a>,
<a href="#setTimeout">setTimeout()</a>,
<a href="#showHelp">showHelp()</a>,
<a href="#showModalDialog">showModalDialog()</a>,
speechSynthesis,
<a href="#status">status</a>,
<a href="#statusbar">statusbar</a>,
<a href="#stop">stop()</a>,
styleMedia,

<a href="#toolbar">toolbar</a>,
<a href="#top">top</a>,

visualViewport,

<a href="#window">window</a>
</div>

<h4 id="objWindow">ウィンドウオブジェクト</h4>

<h5 id="window">◆ window</h5>
<div class=i>
<p>自分自身のウィンドウオブジェクト（ウィンドウやフレームの総称）を示します。&lt;script&gt;～&lt;/script&gt; の間では window. を省略することができ、下記の window.top や window.parent は単に top や parent と記述することができます。</p>
</div>

<h5 id="self"><i>◆ window</i>.self</h5>
<h5 id="top"><i>◆ window</i>.top</h5>
<h5 id="parent"><i>◆ window</i>.parent</h5>
<div class=i>
<p>self は自分自身、top はフレーム分割の際のトップ、parent はフレーム分割のひとつ親の、<i>name</i> はその名前を持つウィンドウ（フレーム）オブジェクトを示します。例えば下記の例では、mokuji フレームから見た main フレームの名前は window.top.main または window.parent.main となります。</p>
</div>

<h5 id="opener"><i>◆ window</i>.opener</h5>
<div class=i>
<p>自分自身を開いた親ウィンドウを示すウィンドウオブジェクトです。親ウィンドウに &lt;form name="FORM1"&gt; の &lt;input type="text" name="TEXT1"&gt; があるとき、下記のようにして親ウィンドウの入力項目に値を設定することができます。</p>
<pre class=c>
window.opener.document.FORM1.TEXT1.value = "ABCDEFG";
</pre>
</div>

<h5 id="length"><i>◆ window</i>.length</h5>
<div class=i>
<p>ウィンドウ内に含まれるサブフレームの個数を示します。</p>
</div>

<h5><i>◆ window</i>.<i>name</i></h5>
<div class=i>
<p>&lt;frame&gt; の name 属性で指定した名前でウィンドウを指定します。例えば、ウィンドウが下記のように2つのフレームに分割されている場合、それぞれのフレーム（ウィンドウオブジェクト）は top.mokuji、top.main で参照することができます。</p>
<pre class=c>
&lt;frameset cols="100,*"&gt;
  &lt;frame name="mokuji" src="mokuji.html"&gt;
  &lt;frame name="main" src="main.html"&gt;
&lt;/frameset&gt;
</pre>
</div>

<h4 id="Dialog">ダイアログ表示</h4>

<h5 id="alert">◆ <i>window</i>.alert(<i>message</i>)</h5>
<div class=i>
<p><i>message</i> をメッセージとする警告ダイアログを表示します。改行には \n を用います。本来は警告用ダイアログなのですが、手軽にメッセージを表示できるため、実際には警告以外の様々な目的で使用されています。</p>
<pre class=c>
window.alert("○○が発生しました!!");
</pre>
</div>

<h5 id="confirm">◆ <i>window</i>.confirm(<i>message</i>)</h5>
<div class=i>
<p><i>message</i> をメッセージとする確認ダイアログを表示します。[OK] ボタンを押すと真（true）が、キャンセルボタンを押すと偽（false）が返されます。</p>
<pre class=c>
if (window.confirm("よろしいですか？")) {
  document.F1.submit();
}
</pre>
</div>

<h5 id="prompt">◆ <i>window</i>.prompt(<i>message</i> [, <i>default</i>])</h5>
<div class=i>
<p>文字列入力ダイアログを表示します。<i>message</i> には説明を、<i>default</i> には文字列の初期値を指定します。入力された文字列は関数の戻り値として返されます。キャンセルボタンが押されると特殊値 null が返されます。</p>
<pre class=c>
pwd = window.prompt("パスワードを入力してください。", "");
</pre>
</div>

<h5 id="showModalDialog">◆ <i>window</i>.showModalDialog(<i>url</i> [, <i>arg</i> [, <i>opt</i>]])</h5>
<h5 id="showModelessDialog">◆ <i>window</i>.showModelessDialog(<i>url</i> [, <i>arg</i> [, <i>opt</i>]])</h5>
<h5 id="dialogArguments">◆ <i>window</i>.dialogArguments</h5>
<h5 id="dialogHeight">◆ <i>window</i>.dialogHeight</h5>
<h5 id="dialogWidth">◆ <i>window</i>.dialogWidth</h5>
<h5 id="dialogLeft">◆ <i>window</i>.dialogLeft</h5>
<h5 id="dialogTop">◆ <i>window</i>.dialogTop</h5>
<h5 id="returnValue">◆ <i>window</i>.returnValue</h5>
<div class=i>
<p>この機能は Chrome 43, Firefox 56 で廃止されました。他のブラウザでも順次廃止される可能性があります。<i>url</i> を内容とするダイアログを表示します。<i>arg</i> には数値、文字列、配列などの引数を指定します。<i>opt</i> には dialogWidth:<i>px</i>, dialogHeight:<i>px</i>, dialogTop:<i>px</i>, dialogLeft:<i>px</i>, center:(yes|no), dialogHide:(yes|no), edge:(sunken|raised), resizable:(yes|no), scroll:(yes|no), status:(yes|no), unadorned:(yes|no) を指定できます。ダイアログ側は dialogArguments により引数を参照可能。ダイアログを閉じる際に returnValue に設定されていた値が showModalDialog() の戻り値となります。</p>
<pre class=c>
args = new Array();
args[0] = "AAA";
args[1] = "BBB";
val = showModalDialog("dlg.htm", args,
  "dialogHeight:100px;dialogWidth:300px");
</pre>
</div>

<h4 id="Operate">ウィンドウ制御</h4>

<h5 id="focus">◆ <i>window</i>.focus()</h5>
<h5 id="blur">◆ <i>window</i>.blur()</h5>
<div class=i>
<p>focus() はこのウィンドウにフォーカスをあてます。blur() はこのウィンドウからフォーカスをはずします。</p>
</div>

<h5 id="scroll">◆ <i>window</i>.scroll(<i>x</i>, <i>y</i>)</h5>
<h5 id="scrollTo">◆ <i>window</i>.scrollTo(<i>x</i>, <i>y</i>)</h5>
<h5 id="scrollBy">◆ <i>window</i>.scrollBy(<i>x</i>, <i>y</i>)</h5>
<div class=i>
<p>scroll() および scrollTo() は絶対座標で、scrollBy() は現在の位置からの相対座標で <i>x</i>、<i>y</i> の位置に画面をスクロールさせます。scroll() は古い仕様で、過去の互換性のために残されています。</p>
</div>

<h5 id="resizeTo">◆ <i>window</i>.resizeTo(<i>x</i>, <i>y</i>)</h5>
<h5 id="resizeBy">◆ <i>window</i>.resizeBy(<i>x</i>, <i>y</i>)</h5>
<div class=i>
<p>resizeTo() は絶対座標で、resizeBy() は現在の大きさからの相対座標で、ウィンドウの大きさを <i>x</i>、<i>y</i> に変更します。100×100 よりも小さくすることはできないように、通常は制限されています。</p>
</div>

<h5 id="moveTo">◆ <i>window</i>.moveTo(<i>x</i>, <i>y</i>)</h5>
<h5 id="moveBy">◆ <i>window</i>.moveBy(<i>x</i>, <i>y</i>)</h5>
<div class=i>
<p>moveTo() は絶対座標で、moveBy() は現在の位置からの相対座標で、ウィンドウの位置を <i>x</i>、<i>y</i> の場所に移動します。</p>
</div>

<h5 id="stop">◆ <i>window</i>.stop()</h5>
<div class=i>
<p>読込みを停止します。</p>
</div>

<h5 id="print">◆ <i>window</i>.print()</h5>
<div class=i>
<p>印刷を開始します。</p>
</div>

<h4 id="Info">ウィンドウ情報</h4>

<h5 id="name">◆ <i>window</i>.name</h5>
<div class=i>
<p>ウィンドウの名前を示す文字列（&lt;frame&gt;タグの name 属性や、window.open()関数の第2引数で指定した名前）を返します。</p>
<pre class=c>
alert(window.name);
alert(top.mokuji.name);
</pre>
</div>

<h5 id="innerHeight">◆ <i>window</i>.innerHeight</h5>
<h5 id="innerWidth">◆ <i>window</i>.innerWidth</h5>
<div class=i>
<p>ウィンドウの内側（表示領域）の高さと横幅を返します。IEでは document.body.clientHeight, document.body.clientWidth がこの属性に相当します。</p>
</div>

<h5 id="outerHeight">◆ <i>window</i>.outerHeight</h5>
<h5 id="outerWidth">◆ <i>window</i>.outerWidth</h5>
<div class=i>
<p>ウィンドウの外枠の高さと横幅を返します。</p>
</div>

<h5 id="pageXOffset">◆ <i>window</i>.pageXOffset</h5>
<h5 id="pageYOffset">◆ <i>window</i>.pageYOffset</h5>
<div class=i>
<p>スクロールされているときに、ページのどの部分が画面に表示されているかを示す縦・横方向位置を返します。IEでは document.body.scrollLeft, document.body.scrollTop がこの属性に相当します。</p>
</div>

<h4 id="Event">イベント</h4>

<h5 id="addEventListener">◆ <i>window</i>.addEventListener(<i>event</i>, <i>function</i>)</h5>
<h5 id="removeEventListener">◆ <i>window</i>.removeEventListener(<i>type</i>, <i>listener</i>[, <i>options</i>])</h5>
<div class=i>
<p><a href="onevent.htm#addEventListener" tppabs="http://www.tohoho-web.com/js/onevent.htm#addEventListener">addEventListener()</a>, <a href="onevent.htm#removeEventListener" tppabs="http://www.tohoho-web.com/js/onevent.htm#removeEventListener">removeEventListener()</a> を参照してください。</p>
</div>

<h5 id="captureEvents">◆ <i>window</i>.captureEvents(<i>events</i>)</h5>
<h5 id="disableExternalCapture">◆ <i>window</i>.disableExternalCapture()</h5>
<h5 id="enableExternalCapture">◆ <i>window</i>.enableExternalCapture()</h5>
<h5 id="handleEvent">◆ <i>window</i>.handleEvent(<i>event</i>)</h5>
<h5 id="releaseEvents">◆ <i>window</i>.releaseEvents(<i>events</i>)</h5>
<h5 id="routeEvent">◆ <i>window</i>.routeEvent(<i>event</i>)</h5>
<div class=i>
<p>Netscape Navigator 専用のイベント処理関数群。詳細未稿。</p>
</div>

<h4 id="Timer">タイマ</h4>

<h5 id="setTimeout">◆ <i>window</i>.setTimeout(<i>script</i>, <i>msec</i>)</h5>
<h5 id="setTimeout2">◆ <i>window</i>.setTimeout(<i>func</i>, <i>msec</i> [, <i>arg3</i>,...])</h5>
<h5 id="setTimeout3">◆ <i>window</i>.setTimeout(<i>script</i>, <i>msec</i>, <i>lang</i>)</h5>
<h5 id="clearTimeout">◆ <i>window</i>.clearTimeout(<i>timeoutID</i>)</h5>
<div class=i>
<p>setTimeout() は <i>msec</i> ミリ秒後に指定した処理を行います。<i>script</i> には JavaScript の構文を、<i>func</i> には関数名を記述します。第3引数は、Internet Explorer の場合は言語名（"JScript"、"JavaScript"、"VBScript"）、Netscape ブラウザの場合は関数への引数を指定します。clearTimeout() は setTimeout() で設定したタイマーを解除します。</p>
<pre class=c>
id = setTimeout("func('ABC')", 1000);
id = setTimeout("func('" + arg + "')", 1000);  // argを渡したいとき
id = setTimeout(func, 1000, "ABC");                 // Netscapeのみ
id = setTimeout("func('ABC')", 1000, "JavaScript"); // IEのみ
clearTimeout(id);
</pre>
<p>定期的に処理を行うには、後述の setInterval() を用いるか、次のようにします。</p>
<pre class=c>
&lt;html&gt;
&lt;head&gt;
&lt;title&gt;テスト&lt;/title&gt;
&lt;script&gt;
function func() {
  alert("TEST");
  setTimeout("func()", 5000);
}
&lt;/script&gt;
&lt;/head&gt;
&lt;body onload="func()"&gt;
  :
&lt;/body&gt;
&lt;/html&gt;
</pre>
</div>

<h5 id="setInterval">◆ <i>window</i>.setInterval(<i>script</i>, <i>msec</i>)</h5>
<h5 id="setInterval2">◆ <i>window</i>.setInterval(<i>func</i>, <i>msec</i> [, <i>arg1</i>,...])</h5>
<h5 id="setInterval3">◆ <i>window</i>.setInterval(<i>script</i>, <i>msec</i>, <i>lang</i>)</h5>
<h5 id="clearInterval">◆ <i>window</i>.clearInterval(<i>intervalID</i>)</h5>
<div class=i>
<p>基本的には setTimeout()、clearTimeout() と同様ですが、指定した処理が <i>msec</i> 毎に定期的に実行されます。</p>
</div>

<h4 id="OpenPage">ページを開く</h4>

<h5 id="open">◆ <i>window</i>.open(<i>url</i>, <i>name</i> [, <i>style</i>])</h5>
<div class=i>
<p>ウィンドウをオープンします。オープンしたウィンドウのウィンドウオブジェクトを返します。<a href="document.htm#open" tppabs="http://www.tohoho-web.com/js/document.htm#open">document.open()</a> とは別物です。</p>
<pre class=c>
w = window.open("test.html", "Test", "width=200,height=200");
</pre>
<p><i>url</i> には表示するページのアドレス（URL）を指定します。</p>
<p><i>name</i> には、&lt;frame&gt; タグの name 属性で指定した名前や、他の open() で作成した名前を指定します。その名前を持つウィンドウがまだ存在しない場合は、その名前を持つ新規ウィンドウが開きます。下記の名前は特別な意味をちます。IE や Netscape Communicator 4.* では、ハイフン（-）を含む名前を指定するとエラーになるようです。</p>
<table class="tb1">
<tr class=h>
<th>名前</th>
<th>意味</th>
</tr>
<tr>
<td>_top</td>
<td>フレーム分割の際のトップフレーム（ウィンドウ）。</td>
</tr>
<tr>
<td>_blank</td>
<td>名前無しの新しいウィンドウ。</td>
</tr>
<tr>
<td>_self</td>
<td>自分自身のフレーム（ウィンドウ）。</td>
</tr>
<tr>
<td>_parent</td>
<td>フレーム分割の際のひとつ親のフレーム（ウィンドウ）。</td>
</tr>
</table>
<p><i>style</i> にはウィンドウのスタイルを指定します。<i>n</i> にはピクセル値を、yes | no には yes または no を指定します。複数指定する場合は、width=100,height=50,menubar=no のようにカンマで連結します。カンマの前後にスペースを入れると動作しないブラウザがあるので注意してください。</p>
<table class="tb1">
<tr class=h>
<th>スタイル</th>
<th>意味</th>
</tr>
<tr>
<td>alwaysLowered=yes|no</td>
<td>[N4] 開いたウィンドウを常に他のウィンドウの下に表示する。ただし、このオプションを用いるにはセキュリティの前準備が必要。</td>
</tr>
<tr>
<td>alwaysRaised=yes|no</td>
<td>[N4] 開いたウィンドウを常に他のウィンドウの上に表示する。ただし、このオプションを用いるにはセキュリティの前準備が必要。</td>
</tr>
<tr>
<td>channelmode=yes|no</td>
<td>[e4] チャネルモードで開く。</td>
</tr>
<tr>
<td>dependent=yes|no</td>
<td>[N4] 親ウィンドウが閉じた時に子ウィンドウも閉じる。</td>
</tr>
<tr>
<td>directories=yes|no</td>
<td>[e3/N2] ユーザ設定ツールバーの表示。</td>
</tr>
<tr>
<td>fullscreen=yes|no</td>
<td>[e4] フルスクリーンモードで開く。閉じるには ALT+F4 を使う。</td>
</tr>
<tr>
<td>height=<i>n</i></td>
<td>[e3/N2] ウィンドウの高さ。</td>
</tr>
<tr>
<td>hotkeys=yes|no</td>
<td>[N4] ホットキーの有効／無効。</td>
</tr>
<tr>
<td>innerHeight=<i>n</i></td>
<td>[N4] ウィンドウの内枠の高さ。</td>
</tr>
<tr>
<td>innerWidth=<i>n</i></td>
<td>[N4] ウィンドウの内枠の横幅。</td>
</tr>
<tr>
<td>left=<i>n</i></td>
<td>[e4] ウィンドウの位置（画面の左端からの距離）。</td>
</tr>
<tr>
<td>location=yes|no</td>
<td>[e3/N2] 場所ツールバーの表示。</td>
</tr>
<tr>
<td>menubar=yes|no</td>
<td>[e3/N2] メニューバーの表示。</td>
</tr>
<tr>
<td>outerHeight=<i>n</i></td>
<td>[N4] ウィンドウの外枠の高さ。</td>
</tr>
<tr>
<td>outerWidth=<i>n</i></td>
<td>[N4] ウィンドウの外枠の横幅。</td>
</tr>
<tr>
<td>personalbar=yes|no</td>
<td>[N2] directoriesと同じ。</td>
</tr>
<tr>
<td>resizable=yes|no</td>
<td>[e3/N2] リサイズを可能にする。</td>
</tr>
<tr>
<td>screenX=<i>n</i></td>
<td>[N4] leftと同じ。</td>
</tr>
<tr>
<td>screenY=<i>n</i></td>
<td>[N4] topと同じ。</td>
</tr>
<tr>
<td>scrollbars=yes|no</td>
<td>[e3/N2] スクロールバーの表示。</td>
</tr>
<tr>
<td>status=yes|no</td>
<td>[e3/N2] ステータスバーの表示。</td>
</tr>
<tr>
<td>titlebar=yes|no</td>
<td>[e4/N4] タイトルバーの表示。ただし、このオプションを用いるにはセキュリティの設定(未稿)が必要。</td>
</tr>
<tr>
<td>toolbar=yes|no</td>
<td>[e3/N2] ツールバーの表示。</td>
</tr>
<tr>
<td>top=<i>n</i></td>
<td>[e4] ウィンドウの位置（画面の上端からの距離）。</td>
</tr>
<tr>
<td>width=<i>n</i></td>
<td>[e3/N2] ウィンドウの横幅。</td>
</tr>
<tr>
<td>z-lock=yes|no</td>
<td>[N4] 開いたウィンドウの上下関係の順序を指定する。ただし、このオプションを用いるにはセキュリティの設定(未稿)が必要。</td>
</tr>
</table>
<br>
</div>

<h5 id="close">◆ <i>window</i>.close()</h5>
<div class=i>
<p>ウィンドウを閉じます。セキュリティ確保のため、自分自身が開いたウィンドウは警告無しに閉じることができますが、その他のウィンドウを閉じる際は、確認のダイアログが表示されます。</p>
</div>

<h5 id="closed">◆ <i>window</i>.closed</h5>
<div class=i>
<p>ウィンドウがすでに閉じられているかどうかを示す真偽値を返します。</p>
</div>

<h4 id="History">ヒストリ</h4>

<h5 id="forward">◆ <i>window</i>.forward()</h5>
<h5 id="back">◆ <i>window</i>.back()</h5>
<h5 id="home">◆ <i>window</i>.home()</h5>
<div class=i>
<p>forward() はヒストリ上ひとつ先のページに、back() はひとつ前のページに、home() はホームボタンを押したときに表示されるページにジャンプします。Netscape Navigator でサポートされていましたが、他のブラウザではサポートされていません。</p>
</div>

<h4 id="LocalDataAccess">ローカルデータアクセス</h4>

<h5 id="localStorage">◆ <i>window</i>.localStorage</h5>
<div class=i>
<p>ローカルストレージを示します。詳細は <a href="../html5/web_storage.html" tppabs="http://www.tohoho-web.com/html5/web_storage.html">Web Storage</a> を参照してください。</p>
</div>

<h5 id="openDatabase">◆ <i>window</i>.openDatabase()</h5>
<div class=i>
<p>Web SQLデータベースを提供します。詳細は <a href="../html5/web_sql_db.html" tppabs="http://www.tohoho-web.com/html5/web_sql_db.html">Web SQLデータベース</a> を参照してください。</p>
</div>

<h5 id="indexedDB">◆ <i>window</i>.indexedDB</h5>
<div class=i>
<p>Indexed Database API を提供します。詳細は <a href="../html5/indexed_db_api.html" tppabs="http://www.tohoho-web.com/html5/indexed_db_api.html">Indexed Database API</a> を参照してください。</p>
</div>

<h4 id="Other">その他</h4>

<h5 id="location">◆ <i>window</i>.location</h5>
<div class=i>
<p><a href="location.htm" tppabs="http://www.tohoho-web.com/js/location.htm">ロケーション(Location)</a> オブジェクトを示します。</p>
</div>

<h5 id="document">◆ <i>window</i>.document</h5>
<div class=i>
<p><a href="document.htm" tppabs="http://www.tohoho-web.com/js/document.htm">ドキュメント(Document)</a> オブジェクトを示します。</p>
</div>

<h5 id="history">◆ <i>window</i>.history</h5>
<div class=i>
<p><a href="history.htm" tppabs="http://www.tohoho-web.com/js/history.htm">ヒストリ(History)</a> オブジェクトを示します。</p>
</div>

<h5 id="navigator">◆ <i>window</i>.navigator</h5>
<div class=i>
<p><a href="navigator.htm" tppabs="http://www.tohoho-web.com/js/navigator.htm">ナビゲータ(Navigator)</a> オブジェクトを示します。</p>
</div>

<h5 id="status">◆ <i>window</i>.status</h5>
<h5 id="defaultStatus">◆ <i>window</i>.defaultStatus</h5>
<div class=i>
<p>status は、ステータスバーに（一時的に）表示する内容。defaultStatus は、他に何も表示するものが無い場合のステータスバーのメッセージを示します。どちらとも設定も可能です。onMouseOver などのイベント発生時にこの値を書き換えたときは、イベントハンドラの戻り値に true を返してやる必要があります。</p>
<pre class=c>
&lt;body onload="window.defaultStatus='ようこそ○○へ'"&gt;
&lt;a href="xx.html"
   onmouseover="window.status='△△にジャンプするよ'; return true;"&gt;
   △△&lt;/A&gt;
</pre>
</div>

<h5 id="menubar">◆ <i>window</i>.menubar.visible</h5>
<h5 id="toolbar">◆ <i>window</i>.toolbar.visible</h5>
<h5 id="locationbar">◆ <i>window</i>.locationbar.visible</h5>
<h5 id="statusbar">◆ <i>window</i>.statusbar.visible</h5>
<h5 id="scrollbar">◆ <i>window</i>.scrollbars.visible</h5>
<h5 id="personalbar">◆ <i>window</i>.personalbar.visible</h5>
<div class=i>
<p>それぞれ、メニューバー（menubar）、ツールバー（toolbar）、ロケーションバー（locationbar）、ステータスバー（statusbar）、スクロールバー（scrollbar）、パーソナルバー（personalbar）が表示されているかどうかを示す真偽値です。参照のみで、書き込みによる変更はできません。</p>
</div>

<h5 id="clientInformation">◆ <i>window</i>.clientInformation</h5>
<div class=i>
<p><i>window</i>.navigator と同義です。</p>
</div>

<h5 id="offscreenBuffering">◆ <i>window</i>.offscreenBuffering</h5>
<div class=i>
<p>オフスクリーンバッファリング機能（スクロールの際の画像表示を早くする機能？）を有効にするかどうかを指定します。起動時は "auto" ですが、これに true | false を代入して機能を制御することができます。</p>
</div>

<h5 id="execScript">◆ <i>window</i>.execScript(<i>code</i> [, <i>lang</i>])</h5>
<div class=i>
<p><i>code</i>を JScript の構文として実行します。JavaScript として実行するには<i>lang</i>に "JavaScript" を指定します。古い Internet Explorer でのみサポートされていました。最近の Internet Explorer や他のブラウザではサポートされていません。代わりに <a href="builtin.htm#eval" tppabs="http://www.tohoho-web.com/js/builtin.htm#eval">eval()</a> を使用してください。</p>
</div>

<h5 id="find">◆ <i>window</i>.find([<i>string</i> [, <i>case</i> [, <i>back</i>]]])</h5>
<div class=i>
<p>ウィンドウ内のテキストから <i>string</i> を検索します。<i>string</i> を省略した場合は検索文字列入力ダイアログが表示されます。<i>case</i> に true を指定すると大文字小文字を区別します。<i>back</i> に true を指定すると逆方向に検索します。文字列が見つかると true を返し、さもなくば false を返します。</p>
</div>

<h5 id="showHelp">◆ <i>window</i>.showHelp(<i>url</i> [, <i>id</i> [, <i>opt</i>]])</h5>
<div class=i>
<p>HTMLヘルプを表示します。</p>
</div>

<h5 id="atob">◆ <i>window</i>.atob(<i>str</i>)</h5>
<h5 id="btoa">◆ <i>window</i>.btoa(<i>str</i>)</h5>
<div class=i>
<p>btoa() は文字列 <i>str</i> を BASE64 エンコーディングした文字列にエンコード、atob() はその逆のデコードを行います。</p>
</div>

<h5 id="postMessage">◆ <i>window</i>.postMessage(<i>message</i>, <i>targetOrigin</i>)</h5>
<div class=i>
<p>HTML5 で定義された機能で、他のウィンドウやフレームにメッセージを送信します。第一引数には送信するメッセージ文字列を、第二引数はイベントを伝達するウィンドウの生成元を "*" または URI で指定します。受信側はウィンドウに対する onmessage イベントとして渡されます。セキュリティのため、最初に origin を確認する必要があります。</p>
<pre class=c>
&lt;iframe id="ifrm" src="ifrm.html"&gt;&lt;/iframe&gt;
&lt;button id="btn"&gt;OK&lt;/button&gt;
&lt;script&gt;
document.getElementById("btn").addEventListener("click", function() {
  var ifrm = document.getElementById("ifrm").contentWindow;
  ifrm.postMessage('Hello!!!', '*');
});
&lt;/script&gt;
</pre>
<div class="tab">ifrm.html</div>
<pre class=c2>
&lt;div id="out"&gt;&lt;/div&gt;
&lt;script&gt;
window.addEventListener("message", function(e) {
  if (e.origin !== "http://example.com") {
    return;
  }
  document.getElementById("out").innerText = e.data;
}, false);
&lt;/script&gt;
</pre>
</div>

<h5 id="frames">◆ <i>window</i>.frames</h5>
<h5>◆ <i>window</i>.frames.length</h5>
<h5>◆ <i>window</i>.frames[<i>n</i>]</h5>
<div class=i>
<p>ウィンドウ内に含まれるフレームのリストを示します。<i>window</i>.frames.length はその個数を、<i>window</i>.frames[<i>i</i>] は各要素を示します。</p>
</div>

<h5 id="applicationCache">◆ <i>window</i>.applicationCache</h5>
<div class=i>
<p>アプリケーションキャッシュを管理する OfflineResourceList オブジェクトを示します。この機能は非推奨となっており、廃止の方向にあります。代わりに Service Worker を使用してください。</p>
</div>

<h5 id="getSelection">◆ <i>window</i>.getSelection()</h5>
<div class=i>
<p>ページ内で選択された箇所を示す Selection オブジェクトを返します。toString() により選択文字列を得ることができます。</p>
<pre class=c>
&lt;div&gt;ABCDEFGHIJKLMN&lt;/div&gt;
&lt;button onclick="console.log(window.getSelection().toString())"&gt;OK&lt;/button&gt;
</pre>
</div>

<!--
document
frames
history
length
location
screenX
screenY
crypto.random()
crypto.signText()
setHotKeys()
setResizable()
setZOptions()
-->

<!-- IE
screenLeft
screenTop
attachEvent()
createPopup()
detachEvent()
execScript()
navigate()
setActive()
showHelp()
showModelessDialog()
clientInformation
clipboardData
document
event
external
history
location
navigator
screen
-->

<hr>
<a href="index.htm" tppabs="http://www.tohoho-web.com/js/index.htm">[up]</a>
<a href="symbol.htm" tppabs="http://www.tohoho-web.com/js/symbol.htm">[prev]</a>
<a href="navigator.htm" tppabs="http://www.tohoho-web.com/js/navigator.htm">[next]</a>
<div>Copyright (C) 1996-2018 杜甫々</div>
<div>改訂版初版：2001年5月20日、最終更新：2018年5月6日</div>
<div>http://www.tohoho-web.com/js/window.htm</div>
</body>
</html>
