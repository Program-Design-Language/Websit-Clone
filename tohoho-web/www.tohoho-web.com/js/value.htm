<!DOCTYPE html>
<html>
<head>
<meta charset="utf-8">
<title>数値・文字列・定数 - とほほのWWW入門</title>
<meta name="viewport" content="width=device-width,initial-scale=1.0">
<link rel="stylesheet" href="../style3.css" tppabs="http://www.tohoho-web.com/style3.css">
</head>
<body>

<h2>数値・文字列・定数</h2>
<a href="index.htm" tppabs="http://www.tohoho-web.com/js/index.htm">[up]</a>
<a href="operator.htm" tppabs="http://www.tohoho-web.com/js/operator.htm">[prev]</a>
<a href="onevent.htm" tppabs="http://www.tohoho-web.com/js/onevent.htm">[next]</a>

<h4 id="Number">数値</h4>
<div class=i>
<p>JavaScript では数値として10進数、8進数、16進数、実数、浮動小数を使用できます。0x で始まる整数は 16 進数と解釈されます。<a href="what.htm#es2015" tppabs="http://www.tohoho-web.com/js/what.htm#es2015">ES2015(ES6)</a> 以降では、0b(2進数) や 0o(8進数)もサポートされました。<a href="what.htm#es2020" tppabs="http://www.tohoho-web.com/js/what.htm#es2020">ES2020</a> 以降では任意精度整数として <a href="number.htm#BigInt" tppabs="http://www.tohoho-web.com/js/number.htm#BigInt">BigInt</a> がサポートされました。</p>
<div class="title-tab">JavaScript</div>
<pre class=c2>
12345	<span class="cm">// 10進数の12345</span>
1.23	<span class="cm">// 実数の 1.23</span>
1.23e4	<span class="cm">// 1.23 × 10の4乗</span>
1.23E4	<span class="cm">// 1.23 × 10の4乗</span>
0x1b	<span class="cm">// 16進数の1B(10進数の27)</span>
0b1101	<span class="cm">// ES2015(ES6)以降: 2進数の1101(10進数の13)</span>
0o755	<span class="cm">// ES2015(ES6)以降: 8進数の755(10進数の493)</span>
012	<span class="cm">// 8進数の12(10進数の10) ... ES2015以前の古い書き方</span>
123n	<span class="cm">// 任意精度整数(BigInt)の123 ... ES2020以降</span>
</pre>
<p>数値に関する詳細は <a href="number.htm" tppabs="http://www.tohoho-web.com/js/number.htm">数値オブジェクト</a> を参照してください。</p>
</div>

<h4 id="String">文字列</h4>
<div class=i>
<p>文字の集まりを文字列と言います。JavaScript における文字列は、ダブルクォート(")またはシングルクォート(')で囲んで表現します。</p>
<div class="title-tab">JavaScript</div>
<pre class=c2>
str = "これが文字列だよ。";
str = 'これが文字列だよ。';
</pre>
<p>文字列に関する詳細は <a href="string.htm" tppabs="http://www.tohoho-web.com/js/string.htm">文字列オブジェクト</a> を参照してください。</p>
</div>

<h4 id="Const">定数</h4>

<h5 id="true">◆ true</h5>
<div class=i>
<p><b>true</b> は「真」を表す値です。詳細は「<a href="boolean.htm" tppabs="http://www.tohoho-web.com/js/boolean.htm">真偽値(Boolean)</a>」を参照してください。</p>
</div>

<h5 id="false">◆ false</h5>
<div class=i>
<p><b>false</b> は「偽」を表す特別な値です。詳細は「<a href="boolean.htm" tppabs="http://www.tohoho-web.com/js/boolean.htm">真偽値(Boolean)</a>」を参照してください。</p>
</div>

<h5 id="null">◆ null</h5>
<div class=i>
<p>値なしを示す特別な値です。</p>
</div>

<h5 id="undefined">◆ undefined</h5>
<div class=i>
<p>定義されていないことを示す特別な値です。</p>
<div class="title-tab">JavaScript</div>
<pre class="c2">
var a;			<span class="cm">// 宣言はされているが値が定義されていない</span>
console.log(a);		<span class="cm">// =&gt; undefined</span>
</pre>
<p>値が定義されているか否かを調べるには typedef() を用います。</p>
<div class="title-tab">JavaScript</div>
<pre class="c2">
if (typedef(a) == "<em>undefined</em>") {
  console.log("値が定義されていません。");
}
</pre>
<p>厳密な比較演算子 <b>===</b> を用いても判定できますが、この場合、var a も宣言されていない場合は ReferenceError となります。</p>
<div class="title-tab">JavaScript</div>
<pre class="c2">
var a;
if (a === <em>undefined</em>) {
  console.log("値が定義されていません。");
}
</pre>
<p>変数の値を undefined に戻すには undefined を代入します。この場合、undefined が変数として定義されて値が設定されていないことに注意してください。オブジェクトの属性値を undefined に戻すには <a href="operator.htm#delete" tppabs="http://www.tohoho-web.com/js/operator.htm#delete">delete</a> 演算子を使用します。</p>
<div class="title-tab">JavaScript</div>
<pre class="c2">
var a = 123;
a = <em>undefined</em>;

var d = {x:123, y:456};
<em>delete</em> d.x;
</pre>
</div>

<h5 id="NaN">◆ NaN</h5>
<div class=i>
<p>数値でない(Not a Number)ことを表す特別な値です。</p>
</div>

<h5 id="Infinity">◆ Infinity</h5>
<div class=i>
<p>無限であることを表す特別な値です。</p>
</div>

<h4 id="SpecialVariables">特殊変数</h4>

<h5 id="this">◆ this</h5>
<div class="i">
<p><b>this</b> は、自分自身を表す特別な変数です。イベントハンドラの中では、イベントが発生したオブジェクトを示します。クラスメソッドの中では、クラスのインスタンスを示します。</p>
<div class="title-tab">JavaScript</div>
<pre class="c2">
<span class="cm">// イベントハンドラで参照する例</span>
obj.addEventListener("click", function() {
  console.log(<em>this</em>);			<span class="cm">// =&gt; イベントが発生したオブジェクト</span>
});

<span class="cm">// クラスメソッドで参照する例</span>
class MyClass {
  func() { console.log(<em>this</em>); }		<span class="cm">// =&gt; <i>MyClass {}</i></span>
}
var obj = new MyClass();
obj.func();
</pre>
</div>

<h5 id="global">◆ global</h5>
<div class="i">
<p>ブラウザ上で動作する JavaScript では、グローバルオブジェクトとして <a href="window.htm" tppabs="http://www.tohoho-web.com/js/window.htm">window</a> オブジェクトが使用されますが、Node.js 環境では代わりに <b>global</b> オブジェクトが使用されます。</p>
<div class="title-tab">JavaScript</div>
<pre class="c2">
foo = 123;
console.log(<em>global</em>.foo);	<span class="cm">// =&gt; 123</span>
</pre>
</div>

<h5 id="globalThis">◆ globalThis</h5>
<div class="i">
<p><b>globalThis</b> は、グローバルオブジェクトを示す特別な変数です。<a href="what.htm#es2020" tppabs="http://www.tohoho-web.com/js/what.htm#es2020">ES2020</a> で導入されました。ブラウザ上で実行する JavaScript では、<a href="window.htm" tppabs="http://www.tohoho-web.com/js/window.htm">window</a> オブジェクトと同値になります。Node.js で実行した場合は <a href="#global">global</a> オブジェクトと同値になります。</p>
<div class="title-tab">JavaScript</div>
<pre class="c2">
console.log(<em>globalThis</em>);	<span class="cm">// =&gt; <i>Window {window: ...}</i></span>
</pre>
</div>

<hr>
<a href="index.htm" tppabs="http://www.tohoho-web.com/js/index.htm">[up]</a>
<a href="operator.htm" tppabs="http://www.tohoho-web.com/js/operator.htm">[prev]</a>
<a href="onevent.htm" tppabs="http://www.tohoho-web.com/js/onevent.htm">[next]</a>
<div>Copyright (C) 1996-2019 杜甫々</div>
<div>改訂版初版：2001年5月20日、最終更新：2019年2月17日</div>
<div>http://www.tohoho-web.com/js/value.htm</div>
</body>
</html>
