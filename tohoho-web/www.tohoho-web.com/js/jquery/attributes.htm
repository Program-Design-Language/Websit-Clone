<!DOCTYPE html>
<html>
<head>
<meta charset="utf-8">
<title>とほほのjQuery入門 - とほほのWWW入門</title>
<meta name="viewport" content="width=device-width,initial-scale=1.0">
<link rel="stylesheet" href="../../style3.css" tppabs="http://www.tohoho-web.com/style3.css">
<link rel="stylesheet" href="jquery.css" tppabs="http://www.tohoho-web.com/js/jquery/jquery.css">
</head>
<body>
<h2>jQuery入門</h2>
<a href="../../www.htm" tppabs="http://www.tohoho-web.com/www.htm">トップ</a> &gt;
<a href="index.htm" tppabs="http://www.tohoho-web.com/js/jquery/index.htm">jQuery</a> &gt;
Attributes

<h4>Attributes(Attribute/Property)</h4>

<h5 id="attr">◆ <i>obj</i>.attr(<i>attributeName</i>) <u>(1.0)</u></h5>
<h5>◆ <i>obj</i>.attr(<i>attributeName</i>, <i>value</i>) <u>(1.0)</u></h5>
<h5>◆ <i>obj</i>.attr(<i>attributes</i>) <u>(1.0)</u></h5>
<h5>◆ <i>obj</i>.attr(<i>attributeName</i>, <i>function(index, attr)</i>) <u>(1.1)</u></h5>
<div class=i>
<p>.attr(<i>attributeName</i>) の形式は <i>obj</i> の属性値を参照します。</p>
<div class="tab">JavaScript</div>
<pre class=c2>
alert($("img#img1").<em>attr("src")</em>);
</pre>
<p>.attr(<i>attributeName</i>, <i>value</i>) の形式は <i>obj</i> の属性値を設定します。</p>
<div class="tab">JavaScript</div>
<pre class=c2>
$("img#img1").<em>attr("src", "image/xxx.gif")</em>;
</pre>
<p>.attr(<i>attributes</i>) の形式は下記の記法で <i>obj</i> の属性値を設定します。</p>
<div class="tab">JavaScript</div>
<pre class=c2>
$("img#img1").<em>attr({</em>
    src: "image/xxx.gif",
    width: "100",
    height: "100"
<em>});</em>
</pre>
<p>.attr(<i>attributeName</i>, <i>function(index, attr)</i>) の形式は関数の戻り値を <i>attributeName</i>属性に設定します。</p>
<div class="tab">JavaScript</div>
<pre class=c2>
$("img#img1").<em>attr("height", function(i, val) {</em>
    return val * 2;
<em>});</em>
</pre>
</div>

<h5 id="removeAttr">◆ <i>obj</i>.removeAttr(<i>attributeName</i>) <u>(1.0)</u></h5>
<div class=i>
<p><i>obj</i> から <i>attributeName</i> で指定した属性を削除します。jQuery 1.7 からは空白で区切った複数の属性を指定できます。</p>
<div class="tab">JavaScript</div>
<pre class=c2>
$("#img1").<em>removeAttr("height width")</em>;
</pre>
</div>

<h5 id="prop">◆ <i>obj</i>.prop(<i>propertyName</i>) <u>(1.6)</u></h5>
<h5>◆ <i>obj</i>.prop(<i>propertyName</i>, <i>value</i>) <u>(1.6)</u></h5>
<h5>◆ <i>obj</i>.prop(<i>properties</i>) <u>(1.6)</u></h5>
<h5>◆ <i>obj</i>.prop(<i>propertyName</i>, <i>function(index, oldValue)</i>) <u>(1.6)</u></h5>
<div class=i>
<p><a href="#attr">attr()</a> と似ていますが、attr() がHTMLの属性値を扱うのに対して、prop() は JavaScriptのプロパティを扱います。通常、両者は同じ値となりますが、稀に異なるものがあります。例えば、a要素の href属性は、属性値とプロパティで値が異なることがあります。</p>
<div class="tab">JavaScript</div>
<pre class=c2>
val = $("#a1").attr("href");    <span class="comment">// #prop</span>
val = $("#a1").<em>prop("href")</em>;    <span class="comment">// http://www.example.com/jquery.html#prop</span>
</pre>
<div class="tab">JavaScript</div>
<pre class=c2>
&lt;a id="a1" href="#prop"&gt;prop()&lt;/a&gt;
</pre>
<p>また、チェックボックスなどの checked属性も属性値とプロパティで値が異なります。</p>
<div class="tab">JavaScript</div>
<pre class=c2>
val = $("#c1").attr("checked");    <span class="comment">// "checked"</span>
val = $("#c1").<em>prop("checked")</em>;    <span class="comment">// true</span>
</pre>
<div class="tab">JavaScript</div>
<pre class=c2>
&lt;input type="checkbox" id="c1" checked&gt;
</pre>
</div>

<h5 id="removeProp">◆ <i>obj</i>.removeProp(<i>propertyName</i>) <u>(1.6)</u></h5>
<div class=i>
<p><i>obj</i> から <i>attributeName</i> で指定したプロパティを削除します。</p>
<div class="tab">JavaScript</div>
<pre class=c2>
$("#d1").prop("lang", "japan");
$("#d1").<em>removeProp("lang")</em>;
</pre>
</div>

<h4>Attributes(HTML/Text/Value)</h4>

<h5 id="html">◆ <i>obj</i>.html() <u>(1.0)</u></h5>
<h5>◆ <i>obj</i>.html(<i>htmlString</i>) <u>(1.0)</u></h5>
<h5>◆ <i>obj</i>.html(<i>function(index, oldhtml)</i>) <u>(1.4)</u></h5>
<div class=i>
<p>html() の形式は、<i>obj</i> の内側のHTML文字列を参照します。</p>
<div class="tab">JavaScript</div>
<pre class=c2>
val = $("p#p1").<em>html()</em>;             <span class="comment">// &lt;p id="p1"&gt;&lt;b&gt;BBB&lt;/b&gt;&lt;/p&gt; → &lt;b&gt;BBB&lt;/b&gt;</span>
</pre>
<p>html(<i>htmlString</i>) の形式は、<i>obj</i> の内側のHTML文字列を <i>htmlString</i> に置換します。</p>
<div class="tab">JavaScript</div>
<pre class=c2>
$("p#p1").<em>html("&lt;p&gt;BBB&lt;/p&gt;")</em>;      <span class="comment">// &lt;p id="p1"&gt;&lt;p&gt;BBB&lt;/p&gt;&lt;/p&gt;</span>
</pre>
<p>html(<i>function(index, oldhtml)</i>) の形式は、<i>obj</i> の内側のHTML文字列を <i>function</i> の戻り値に置換します。</p>
<div class="tab">JavaScript</div>
<pre class=c2>
$("p#p1").<em>html(function(i, val) {</em>
    return "[" + val + "]";        <span class="comment">// &lt;p id="p1"&gt;BBB&lt;/p&gt; → &lt;p id="p1"&gt;[BBB]&lt;/p&gt;</span>
<em>});</em>
</pre>
</div>

<h5 id="text">◆ <i>obj</i>.text() <u>(1.0)</u></h5>
<h5>◆ <i>obj</i>.text(<i>text</i>) <u>(1.0)</u></h5>
<h5>◆ <i>obj</i>.text(<i>function(index, text)</i>) <u>(1.4)</u></h5>
<div class=i>
<p>text() の形式は、<i>obj</i> の内側のテキストを参照します。</p>
<div class="tab">JavaScript</div>
<pre class=c2>
val = $("p#p1").<em>text()</em>;             <span class="comment">// &lt;p id="p1"&gt;&lt;b&gt;BBB&lt;/b&gt;&lt;/p&gt; → BBB</span>
</pre>
<p>html(<i>htmlString</i>) の形式は、<i>obj</i> の内側のテキストを <i>htmlString</i> に置換します。</p>
<div class="tab">JavaScript</div>
<pre class=c2>
$("p#p1").<em>text("&lt;p&gt;BBB&lt;/p&gt;")</em>;       <span class="comment">// &lt;p id="p1"&gt;&amp;lt;p&amp;gt;BBB&amp;lt;/p&amp;gt;&lt;/p&gt;</span>
</pre>
<p>text(<i>function(index, oldhtml)</i>) の形式は、<i>obj</i> の内側のテキストを <i>function</i> の戻り値に置換します。</p>
<div class="tab">JavaScript</div>
<pre class=c2>
$("p#p1").<em>text(function(i, val) {</em>
    return "[" + val + "]";        <span class="comment">// &lt;p id="p1"&gt;BBB&lt;/p&gt; → &lt;p id="p1"&gt;[BBB]&lt;/p&gt;</span>
<em>});</em>
</pre>
</div>

<h5 id="val">◆ <i>obj</i>.val() <u>(1.0)</u></h5>
<h5>◆ <i>obj</i>.val(<i>value</i>) <u>(1.0)</u></h5>
<h5>◆ <i>obj</i>.val(<i>function(index, value)</i>) <u>(1.4)</u></h5>
<div class=i>
<p>val() の形式はフォーム要素(input, textarea, select等)の値を参照します。</p>
<div class="tab">JavaScript</div>
<pre class=c2>
val = $("input#userName").<em>val()</em>;
</pre>
<p>val(<i>value</i>) の形式はフォーム要素の値を設定します。</p>
<div class="tab">JavaScript</div>
<pre class=c2>
$("input#userName").<em>val("Tanaka")</em>;
</pre>
<p>val(<i>function(index, value)</i>) の形式はフォーム要素の値に関数の戻り値を設定します。</p>
<div class="tab">JavaScript</div>
<pre class=c2>
$("input#userName").<em>val(function(i, val) {</em>
    return val.toUpperCase();
<em>});</em>
</pre>
<p>radioボタンの値を参照するには :checked を用います。値を設定するには値を配列にします。</p>
<div class="tab">JavaScript</div>
<pre class=c2>
val = $("input[name='color1']<em>:checked</em>").val();
$("input[name='color1']").val(<em>["Black"]</em>);
</pre>
<p>checkboxの値を参照するには :checked と map() を用い、取得した jQuery配列を get() で JavaScript配列に変換します。値を設定するには値を配列にします。</p>
<div class="tab">JavaScript</div>
<pre class=c2>
val = $("input[name='color2']<em>:checked</em>").<em>map(</em>function() {
    return $(this).val();
}<em>)</em>.<em>get()</em>;                          <span class="comment">// [ "Black", "White" ]</span>
$("input[name='color2']").val(<em>["Black", "White"]</em>);
</pre>
<p>単一選択selectの値を参照したり設定するには、通常のval()を用います。</p>
<div class="tab">JavaScript</div>
<pre class=c2>
val = $("#select1").<em>val()</em>;
$("#select1").<em>val("Black")</em>;
</pre>
<p>複数選択selectの値を参照するには通常の val()、値を設定するには値を配列にします。</p>
<div class="tab">JavaScript</div>
<pre class=c2>
val = $("#select2").<em>val()</em>;              <span class="comment">// [ "Black", "White" ]</span>
$("#select2").val(<em>["Black", "White"]</em>);
</pre>
</div>

<h4>Attributes(Class)</h4>

<h5 id="addClass">◆ <i>obj</i>.addClass(<i>className</i>) <u>(1.0)</u></h5>
<h5>◆ <i>obj</i>.addClass(<i>function(index, currentClass)</i>) <u>(1.4)</u></h5>
<div class=i>
<p>addClass(<i>className</i>) の形式は、<i>obj</i> の class に <i>className</i> を加えます。</p>
<div class="tab">JavaScript</div>
<pre class=c2>
$("#d1").<em>addClass("border")</em>;
</pre>
<p>addClass(<i>function(index, currentClass)</i>) の形式は、<i>obj</i> の class に <i>function</i> の戻り値をクラス名として加えます。<i>i</i> はインデックス番号、<i>currentClass</i> は現在設定されているクラス名を示します。</p>
<div class="tab">JavaScript</div>
<pre class=c2>
$("#d1").<em>addClass(function(i, class) {</em>
    return "border";
<em>});</em>
</pre>
</div>

<h5 id="removeClass">◆ <i>obj</i>.removeClass(<i>className</i>) <u>(1.0)</u></h5>
<h5>◆ <i>obj</i>.removeClass(<i>function(index, currentClass)</i>) <u>(1.4)</u></h5>
<div class=i>
<p><i>obj</i> から <i>className</i> や <i>function</i> の戻り値で指定したクラスを削除します。</p>
<div class="tab">JavaScript</div>
<pre class=c2>
$("#d1").<em>removeClass("border")</em>;
</pre>
</div>

<h5 id="hasClass">◆ <i>obj</i>.hasClass(<i>className</i>) <u>(1.2)</u></h5>
<div class=i>
<p><i>obj</i> の中に <i>className</i> クラスを持つ要素がひとつでもあれば true を、さもなくば false を返します。</p>
<div class="tab">JavaScript</div>
<pre class=c2>
val = $("div").<em>hasClass("red")</em>;    <span class="comment">// true or false</span>
</pre>
</div>

<h5 id="toggleClass">◆ <i>obj</i>.toggleClass(<i>className</i>) <u>(1.0)</u></h5>
<h5>◆ <i>obj</i>.toggleClass(<i>className</i>, <i>state</i>) <u>(1.3)</u></h5>
<h5>◆ <i>obj</i>.toggleClass(<i>function(index, class, state)</i>[, <i>state</i>]) <u>(1.4)</u></h5>
<div class=i>
<p><i>obj</i> に対して <i>className</i> で指定したクラスが存在する場合は削除し、存在しない場合は追加します。</p>
<div class="tab">JavaScript</div>
<pre class=c2>
$("#d1").<em>toggleClass("border")</em>;
</pre>
<p><i>state</i> に true を指定すると有無に関わらず追加し、false を指定すると有無に関わらず削除します。</p>
<div class="tab">JavaScript</div>
<pre class=c2>
$("#d1").<em>toggleClass("border", true)</em>;
</pre>
<p>toggleClass([<i>switch</i>]) の形式は、<i>obj</i> に最初に設定されていたすべてのクラスを対象とします。<i>switch</i> が true の場合は追加し、false の場合は削除し、省略した場合は有無を切り替えます。</p>
<div class="tab">JavaScript</div>
<pre class=c2>
$("#d1").<em>toggleClass()</em>;
</pre>
<p>toggleClass(<i>function(...)</i>) の形式は、<i>className</i> の代わりに関数の戻り値をクラス名とします。</p>
<div class="tab">JavaScript</div>
<pre class=c2>
$("#d1").<em>toggleClass(</em>function(i, class, switch) { return "border"; }<em>)</em>;
</pre>
</div>

<hr>
<div>Copyright (C) 2013-2019 杜甫々</div>
<div>初版：2013年2月3日、最終更新：2019年5月5日</div>
<div>http://www.tohoho-web.com/js/jquery/attributes.htm</div>
</body>
</html>
