<!DOCTYPE html>
<html>
<head>
<meta charset="utf-8">
<title>とほほのjQuery入門 - とほほのWWW入門</title>
<meta name="viewport" content="width=device-width,initial-scale=1.0">
<link rel="stylesheet" href="../../style3.css" tppabs="http://www.tohoho-web.com/style3.css">
<link rel="stylesheet" href="jquery.css" tppabs="http://www.tohoho-web.com/js/jquery/jquery.css">
</head>
<body>
<h2>jQuery入門</h2>
<a href="../../www.htm" tppabs="http://www.tohoho-web.com/www.htm">トップ</a> &gt;
<a href="index.htm" tppabs="http://www.tohoho-web.com/js/jquery/index.htm">jQuery</a> &gt;
Utilities

<h4>Utilities</h4>

<h5 id="boxModel">◆ $.boxModel <u>(1.0/廃止:1.3)</u></h5>
<div class=i>
<p>現在のページが、W3C CSS のボックスモデルをサポートしているか否かを true / false で返します。jQuery 1.3 で破棄されました。代わりに $.support.boxModel を参照してください。</p>
<div class="tab">JavaScript</div>
<pre class=c2>
if (<em>$.boxModel</em>) { ... }
</pre>
</div>

<h5 id="browser">◆ $.browser <u>(1.0/廃止:1.9)</u></h5>
<div class=i>
<p>ブラウザに関する情報を保持します。jQuery 1.9 で廃止されました。</p>
<div class="tab">JavaScript</div>
<pre class=c2>
if (<em>$.browser.msie</em>) { alert("Internet Explorer"); }
if (<em>$.browser.mozilla</em>) { alert("Mozilla (ex.Firefox...)"); }
if (<em>$.browser.opera</em>) { alert("Opera"); }
if (<em>$.browser.webkit</em>) { alert("WebKit (ex. Chrome, Safari...)"); }
if (<em>$.browser.safari</em>) { alert("Safari"); }
if (<em>$.browser.chrome</em>) { alert("Google Chrome"); }
alert(<em>$.browser.version</em>);   <span class="cm">// jQuery 1.1.3～</span>
</pre>
</div>

<h5 id="support">◆ $.support <u>(1.3/廃止:1.9)</u></h5>
<div class=i>
<p>ブラウザのサポート状況に関するオブジェクトを返却します。jQuery 1.9 で廃止されました。</p>
<div class="tab">JavaScript</div>
<pre class=c2>
$.each(<em>$.support</em>, function(key, val)) {
    console.log(key + " = " + val);
});
</pre>
<p>オブジェクトはいくつかの true / false 値を持つ属性を持ちます。</p>
<table class="tb1">
  <tr><th>名前</th><th>説明</th></tr>
  <tr><td><b>ajax</b></td><td>Ajaxをサポートしているか。</td></tr>
  <tr><td><b>boxModel</b></td><td>W3C CSSボックスモデルをサポートしているか。</td></tr>
  <tr><td><b>changeBubbles</b></td><td>W3C CSSイベントモデルに従ったイベントのバブルアップをサポートしているか。</td></tr>
  <tr><td><b>checkClone</b></td><td>radioボタンや、checkboxの複製の際にチェックステータスもコピーするか。</td></tr>
  <tr><td><b>checkOn</b></td><td>値を持たない checkbox のデフォルト値が "on" になるか。</td></tr>
  <tr><td><b>cors</b></td><td>CORS(Cross-Origin Resource Sharing)をサポートしているか。</td></tr>
  <tr><td><b>cssFloat</b></td><td>CSS float のプロパティ名が CSS Spec で定められた .cssFloat であるか。</td></tr>
  <tr><td><b>hrefNormalized</b></td><td> .getAttribute() が href 属性を変更無しに取得できるか。</td></tr>
  <tr><td><b>htmlSerialize</b></td><td>.innerHTML で &lt;link&gt; のシリアライズや挿入できるか。</td></tr>
  <tr><td><b>leadingWhitespace</b></td><td>.innerHTML でホワイトスペース等をそのまま挿入できるか。</td></tr>
  <tr><td><b>noCloneChecked</b></td><td>DOM要素のコピーが .checked の状態もコピーするか。</td></tr>
  <tr><td><b>noCloneEvent</b></td><td>DOM要素がイベントハンドラ無しで生成されるか。</td></tr>
  <tr><td><b>opacity</b></td><td>opacity をサポートしているか。</td></tr>
  <tr><td><b>optDisabled</b></td><td>disabled なセレクト要素中の option要素が、自動的に disabled にならないか。</td></tr>
  <tr><td><b>optSelected</b></td><td>デフォルトで選択状態の option要素が selected 属性を持っているか。</td></tr>
  <tr><td><b>scriptEval</b></td><td>.appendChild() や .createTextNode() などの標準的な DOM操作で追加されたスクリプトが実行されるか。</td></tr>
  <tr><td><b>style</b></td><td>要素のインラインスタイルが、DOM Level 2仕様の通りに、DOM の style属性で参照できるか。</td></tr>
  <tr><td><b>submitBubbles</b></td><td>submitイベントが、W3C DOM Event model で定められている通りにバブルアップするか。</td></tr>
  <tr><td><b>tbody</b></td><td>空の table要素が、tbody要素無しに存在できるか。</td></tr>
</table>
</div>

<h5 id="data">◆ $.data(<i>element</i>, <i>key</i>, <i>value</i>) <u>(1.2.3)</u></h5>
<h5>◆ $.data(<i>element</i>, <i>key</i>) <u>(1.2.3)</u></h5>
<h5>◆ $.data(<i>element</i>) <u>(1.4)</u></h5>
<div class=i>
<p><i>element</i>要素に、<i>key</i>=<i>value</i> の値を設定・参照します。</p>
<div class="tab">JavaScript</div>
<pre class=c2>
<em>$.data(document, "fontSize", "small");</em>
<em>$.data(document, "language", "Japanese");</em>

alert(<em>$.data(document, "fontSize")</em>);    <span class="cm">// small</span>
alert(<em>$.data(document, "language")</em>);    <span class="cm">// Japanese</span>

$.each(<em>$.data(document)</em>, function(key, val) {
    console.log(key + "=" + val);
});
</pre>
</div>

<h5 id="trim">◆ $.trim(<i>str</i>) <u>(1.0)</u></h5>
<div class=i>
<p>文字列 <i>str</i> の前後のホワイトスペースを除去した文字列を返却します。</p>
<div class="tab">JavaScript</div>
<pre class=c2>
var str = <em>$.trim("   abc   ")</em>;      <span class="cm">// "abc"</span>
</pre>
</div>

<h5 id="parseJSON">◆ $.parseJSON(<i>json</i>) <u>(1.4.1/廃止:3.0)</u></h5>
<div class=i>
<p>文字列 <i>json</i> を JSONと解釈してオブジェクトに変換し、返却します。変数名も値もダブルクォーテーション(")で囲む必要があります。ダブルクォーテーション(")で囲まれていなかったり、シングルクォーテーション(')で囲まれている場合はエラーになります。jQuery 3.0 で廃止されました。</p>
<div class="tab">JavaScript</div>
<pre class=c2>
var str = '{ "name":"John", "age":"36" }';
var obj = <em>$.parseJSON(str);</em>
console.log("name = " + obj.name);    <span class="cm">// name = John</span>
console.log("age = " + obj.age);      <span class="cm">// age = 36</span>
</pre>
</div>

<h5 id="parseXML">◆ $.parseXML(<i>xml</i>) <u>(1.5)</u></h5>
<div class=i>
<p>文字列 <i>xml</i> を XMLとして解釈してオブジェクトに変換し、返却します。</p>
<div class="tab">JavaScript</div>
<pre class=c2>
var str = '&lt;xml&gt;&lt;name&gt;John&lt;/name&gt;&lt;age&gt;36&lt;/age&gt;&lt;/xml&gt;';
var xmlDoc = <em>$.parseXML(str)</em>;
console.log("name = " + $(xmlDoc).find("name").text());       <span class="cm">// name = John</span>
console.log("age = " + $(xmlDoc).find("age").text());         <span class="cm">// age = 36</span>
</pre>
</div>

<h5 id="parseHTML">◆ $.parseHTML(<i>html</i>[, <i>context</i>][, <i>keepScripts</i>]) <u>(1.8)</u></h5>
<div class=i>
<p>文字列 <i>html</i> を HTML として解釈して配列に変換します。</p>
<div class="tab">JavaScript</div>
<pre class=c2>
var str = '&lt;div class="name"&gt;Yamada&lt;/div&gt;&lt;div class="age"&gt;38&lt;/div&gt;';
var html = <em>$.parseHTML(str)</em>;
console.log(html[0]);         <span class="cm">// &lt;div class="name"&gt;Yamada&lt;/div&gt;</span>
console.log(html[1]);         <span class="cm">// &lt;div class="age"&gt;38&lt;/div&gt;</span>
</pre>
</div>

<h5 id="each">◆ $.each(<i>array</i>, <i>callback(index, value)</i>) <u>(1.0)</u></h5>
<h5>◆ $.each(<i>object</i>, <i>callback(key, value)</i>) <u>(1.0)</u></h5>
<div class=i>
<p>配列やオブジェクトの属性をひとつづつ処理します。</p>
<div class="tab">JavaScript</div>
<pre class=c2>
var array = [ "Red", "Green", "Blue" ];
<em>$.each(array, function(index, val) {</em>      <span class="cm">// 0:Red, 1:Green, 2:Blue</span>
    console.log(index + ":" + val);
<em>});</em>

var params = { height: "100px", width: "100px" };
<em>$.each(params, function(key, val) {</em>      <span class="cm">// height=100px, width:100px</span>
    console.log(key + "=" + val);
<em>});</em>
</pre>
</div>

<h5 id="grep">◆ $.grep(<i>array</i>, <i>function(value, index)</i>[, <i>invert</i>]) <u>(1.0)</u></h5>
<div class=i>
<p>配列 <i>array</i> の中から、条件にマッチするもののみを抜き出します。<i>value</i> には要素の値、<i>index</i> にはインデックスが格納されます。抜き出す場合は true を、さもなくば false を返します。<i>invert</i> に false を指定した場合は、true と false が逆になります。下記の例では、配列の中から "u" を含むもののみを抜き出して、配列 arr2 に代入します。arr1 の値は変化しません。</p>
<div class="tab">JavaScript</div>
<pre class=c2>
var arr1 = [ "sun", "mon", "tue", "wed", "thu", "fri", "sat" ];
var arr2 = <em>$.grep(arr1, function(value, index) {</em>
    return (value.match(/u/));
<em>});</em>
alert(data2);
</pre>
</div>

<h5 id="unique">◆ $.unique(<i>array</i>) <u>(1.1.3)</u></h5>
<h5 id="uniqueSort">◆ $.uniqueSort(<i>array</i>) <u>(1.12-2.2)</u></h5>
<div class=i>
<p>DOM要素の配列から重複した要素を排除し、ソートしたものを返却します。数値、文字列、jQuery要素の配列では使用できず、DOM要素の対してのみ利用可能です。$.uniqueSort() は jQuery 1.12/2.2 で追加されたものですが、$.unique() の名前を変更したのみで、同じ動作をします。</p>
<div class="tab">HTML</div>
<pre class=c2>
&lt;div id="a" class="blue"&gt;&lt;/div&gt;
&lt;div id="b" class="blue red"&gt;&lt;/div&gt;
&lt;div id="c" class="blue red"&gt;&lt;/div&gt;
&lt;div id="d" class="red"&gt;&lt;/div&gt;
</pre>
<div class="tab">JavaScript</div>
<pre class=c2>
var div1 = $(".blue").get();     <span class="cm">// a, b, c</span>
var div2 = $(".red").get();      <span class="cm">// b, c, d</span>
var div3 = div1.concat(div2);    <span class="cm">// a, b, c, b, c, d</span>
var div4 = <em>$.unique(div3)</em>;       <span class="cm">// a, b, c, d</span>
</pre>
</div>

<h5 id="makeArray">◆ $.makeArray(<i>obj</i>) <u>(1.2)</u></h5>
<div class=i>
<p>jQuery の $("div") や JavaScript の getElementsByTagname() などで返されるリストを、JavaScript配列に変換します。</p>
<div class="tab">JavaScript</div>
<pre class=c2>
var obj1 = document.getElementsByTagName("div");
var arr1 = <em>$.makeArray(obj1);</em>
arr1.sort();

var obj2 = $("div");
var arr2 = <em>$.makeArray(obj2);</em>
arr2.reverse();
</pre>
</div>

<h5 id="map">◆ $.map(<i>array</i>, <i>function(val, index)</i>) <u>(1.0)</u></h5>
<h5>◆ $.map(<i>arrayObject</i>, <i>function(val, indexOrKey)</i>) <u>(1.6)</u></h5>
<div class=i>
<p>配列 <i>array</i> を <i>function</i> で指定した変換関数を用いて変換します。下記の例では、配列要素を大文字にした配列を生成しています。</p>
<div class="tab">JavaScript</div>
<pre class=c2>
var arr1 = [ "one", "two", "three" ];
var arr2 = <em>$.map(arr1, function(val, i) {</em>    <span class="cm">// [ "ONE", "TWO", "THREE" ]</span>
    return(val.toUpperCase());
<em>});</em>
</pre>
<p>jQuery 1.6 以降ではオブジェクトも使用できます。</p>
<div class="tab">JavaScript</div>
<pre class=c2>
var obj = { height:"100px", width:"100px" };
var arr = <em>$.map(obj, function(val, key) {</em>    <span class="cm">// [ "height=100px", "width=100px" ]</span>
    return(key + "=" + val);
<em>});</em>
</pre>
</div>

<h5 id="merge">◆ $.merge(<i>array1</i>, <i>array2</i>) <u>(1.0)</u></h5>
<div class=i>
<p>配列 <i>array1</i> に、配列 <i>array2</i> の要素をマージし、マージした結果を返します。</p>
<div class="tab">JavaScript</div>
<pre class=c2>
var arr1 = [ 1, 2, 3 ];
var arr2 = [ 4, 5, 6 ];
<em>$.merge(arr1, arr2);</em>
console.log(arr1.join(", "));    <span class="cm">// 1, 2, 3, 4 5, 6</span>
</pre>
<p><i>array1</i> の要素を変更したくない場合は、次のように呼び出してください。</p>
<div class="tab">JavaScript</div>
<pre class=c2>
var arr3 = $.merge($.merge([], arr1), arr2);
</pre>
</div>

<h5 class="b0" id="extend">◆ $.extend(<i>target</i>[, <i>object1</i>][, <i>objectN</i>]) <u>(1.0)</u></h5>
<h5 class="t0">◆ $.extend([<i>deep</i>], <i>target</i>[, <i>object1</i>][, <i>objectN</i>]) <u>(1.1.4)</u></h5>
<div class=i>
<p>配列 <i>target</i> に配列 <i>object1</i>, ... <i>objectN</i> の各要素をマージし、マージ後の配列を返却します。</p>
<div class="tab">JavaScript</div>
<pre class=c2>
var obj1 = { width:"100px", height:"100px" };
var obj2 = { top:"10px", left:"10px" };
var obj3 = <em>$.extend({}, obj1, obj2)</em>;   <span class="cm">// { width:"100px", height:"100px", top:"10px", left:"10px" }</span>
</pre>
</div>

<h5 id="globalEval">◆ $.globalEval(<i>code</i>) <u>(1.0.4)</u></h5>
<h5>◆ $.globalEval(<i>code</i>[, <i>options</i>]) <u>(3.4)</u></h5>
<div class=i>
<p><i>code</i> を JavaScript と解釈して実行します。</p>
<div class="tab">JavaScript</div>
<pre class=c2>
<em>$.globalEval("var str = 'ABC';");</em>
</pre>
<p><i>options</i> にはオプションを定義します。現在のところ、<a href="../../html/attr/nonce.htm" tppabs="http://www.tohoho-web.com/html/attr/nonce.htm">nonce</a> のみが定義されています。</p>
<div class="tab">JavaScript</div>
<pre class=c2>
$.globalEval("var str = 'ABC';", <em>{
  nonce: "nonce-2726c7f26c"
}</em>);
</pre>
</div>

<h5 id="type">◆ $.type(<i>obj</i>) <u>(1.4.3)</u></h5>
<div class=i>
<p><i>obj</i> のタイプを文字列で返します。</p>
<div class="tab">JavaScript</div>
<pre class=c2>
type = <em>$.type(null)</em>;           <span class="cm">// null</span>
type = <em>$.type(undefined)</em>;      <span class="cm">// undefined</span>
type = <em>$.type(true)</em>;           <span class="cm">// boolean</span>
type = <em>$.type(123)</em>;            <span class="cm">// number</span>
type = <em>$.type("abc")</em>;          <span class="cm">// string</span>
type = <em>$.type([1, 2, 3])</em>;      <span class="cm">// array</span>
type = <em>$.type({ t1:123 })</em>;     <span class="cm">// object</span>
type = <em>$.type(/abc/)</em>;          <span class="cm">// regexp</span>
type = <em>$.type(function() {})</em>;  <span class="cm">// function</span>
type = <em>$.type(new Date())</em>;     <span class="cm">// date</span>
type = <em>$.type(new Error())</em>;    <span class="cm">// error (jQuery 1.9～)</span>
type = <em>$.type(Symbol())</em>;       <span class="cm">// symbol (jQuery 1.9～)</span>
type = <em>$.type($("body"))</em>;      <span class="cm">// object</span>
</pre>
</div>

<h5 id="contains">◆ $.contains(<i>container</i>, <i>contained</i>) <u>(1.4)</u></h5>
<div class=i>
<p><i>contained</i>要素が、<i>container</i>要素に包含されているか否かを調べます。</p>
<div class="tab">JavaScript</div>
<pre class=c2>
if ($.contains(document.documentElement, document.body)) { ... }  <span class="cm">// true</span>
if ($.contains(document.body, document.documentElement)) { ... }  <span class="cm">// false</span>
</pre>
</div>

<h5 id="inArray">◆ $.inArray(<i>value</i>, <i>array</i>[, <i>fromIndex</i>]) <u>(1.2)</u></h5>
<div class=i>
<p>配列 <i>array</i> の中で <i>value</i> に一致する要素のインデックスを返します。最初が 0番目で、見つからなかった場合は -1 を返します。<i>fromIndex</i> には検索を開始するインデックスを指定します。</p>
<div class="tab">JavaScript</div>
<pre class=c2>
var array = [ "Sun", "Mon", "Tue", "Wed", "Thu", "Fri", "Sat" ];
var num = <em>$.inArray("Wed", array)</em>;        <span class="cm">// num = 3</span>
</pre>
</div>

<h5 class="b0" id="isNumeric">◆ $.isNumeric(<i>arg</i>) <u>(1.7)</u></h5>
<h5 class="t0 b0" id="isArray">◆ $.isArray(<i>obj</i>) <u>(1.3)</u></h5>
<h5 class="t0 b0" id="isFunction">◆ $.isFunction(<i>arg</i>) <u>(1.2)</u></h5>
<h5 class="t0 b0" id="isEmptyObject">◆ $.isEmptyObject(<i>arg</i>) <u>(1.4)</u></h5>
<h5 class="t0 b0" id="isPlainObject">◆ $.isPlainObject(<i>arg</i>) <u>(1.4)</u></h5>
<h5 class="t0 b0" id="isWindow">◆ $.isWindow(<i>arg</i>) <u>(1.4.3)</u></h5>
<h5 class="t0" id="isXMLDoc">◆ $.isXMLDoc(<i>arg</i>) <u>(1.1.4)</u></h5>
<div class=i>
<p>それぞれ、<i>arg</i> が数値であれば、配列であれば、関数であれば、空オブジェクトであれば、プレインオブジェクトであれば、ウィンドウであれば、XMLドキュメントであれば true を返し、さもなくば false を返します。</p>
<div class="tab">JavaScript</div>
<pre class=c2>
if (<em>$.isNumeric(123)</em>) { ... }
if (<em>$.isArray([ 1, 2, 3 ])</em>) { ... }
if (<em>$.isFunction(function() {})</em>) { ... }
if (<em>$.isEmptyObject({ })</em>) { ... }
if (<em>$.isPlainObject({ id:"abc" })</em>) { ... }
if (<em>$.isWindow(window)</em>) { ... }
if (<em>$.isXMLDoc($.parseXML("&lt;n&gt;&lt;/n&gt;"))</em>) { ... }
</pre>
</div>

<h5 id="noop">◆ $.noop() <u>(1.4)</u></h5>
<div class=i>
<p>何もしない関数です。プラグイン開発時などに、ダミーの関数として用いられます。</p>
<div class="tab">JavaScript</div>
<pre class=c2>
$.animate({ width:"100px" }, 3000, <em>$.noop</em>);
</pre>
</div>

<h5 class="b0" id="proxy">◆ $.proxy(<i>function</i>, <i>context</i>) <u>(1.4)</u></h5>
<h5 class="t0 b0">◆ $.proxy(<i>function</i>, <i>context</i>[, <i>additionalArguments</i>]) <u>(1.5)</u></h5>
<h5 class="t0 b0">◆ $.proxy(<i>context</i>, <i>name</i>) <u>(1.4)</u></h5>
<h5 class="t0">◆ $.proxy(<i>context</i>, <i>name</i>[, <i>additionalArguments</i>]) <u>(1.6)</u></h5>
<div class=i>
<p><i>context</i> を this として参照可能な関数 <i>function</i> を生成します。ある要素のイベントハンドラの中で、別の要素を this として扱う関数を実行したい場合に有効です。下記の例では、button1ボタンが押された時に、div1要素を this として扱う関数を呼び出しています。</p>
<div class="tab">JavaScript</div>
<pre class=c2>
$("#button1").click(<em>$.proxy(function() {</em>
    console.log("id = " + $(this).attr("id"));
<em>}, $("#div1")));</em>
</pre>
<p><i>contenxt</i>, <i>name</i> の形式は、this として扱われるオブジェクトと、そのオブジェクトが持つ関数名を指定します。</p>
<div class="tab">JavaScript</div>
<pre class=c2>
var obj = {
    name: "John",
    test: function() {
        console.log("My name is " + this.name);
    }
};
$("#button1").click(<em>$.proxy(obj, "test")</em>);
</pre>
</div>

<h5 id="now">◆ $.now() <u>(1.4.3)</u></h5>
<div class=i>
<p>現在の時刻を 1970年1月1日0時0分0秒(GMT)からの秒数で返します。</p>
<div class="tab">JavaScript</div>
<pre class=c2>
console.log("now = " + <em>$.now()</em>);
</pre>
</div>

<hr>
<div>Copyright (C) 2013-2019 杜甫々</div>
<div>初版：2013年2月3日、最終更新：2019年5月5日</div>
<div>http://www.tohoho-web.com/js/jquery/utilities.htm</div>
</body>
</html>
