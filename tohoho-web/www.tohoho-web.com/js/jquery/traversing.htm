<!DOCTYPE html>
<html>
<head>
<meta charset="utf-8">
<title>とほほのjQuery入門 - とほほのWWW入門</title>
<meta name="viewport" content="width=device-width,initial-scale=1.0">
<link rel="stylesheet" href="../../style3.css" tppabs="http://www.tohoho-web.com/style3.css">
<link rel="stylesheet" href="jquery.css" tppabs="http://www.tohoho-web.com/js/jquery/jquery.css">
</head>
<body>
<h2>jQuery入門</h2>
<a href="../../www.htm" tppabs="http://www.tohoho-web.com/www.htm">トップ</a> &gt;
<a href="index.htm" tppabs="http://www.tohoho-web.com/js/jquery/index.htm">jQuery</a> &gt;
Traversing

<h4>Traversing(Tree Traversal)</h4>

<h5 id="parent">◆ <i>obj</i>.parent([<i>selector</i>]) <u>(1.0)</u></h5>
<div class=i>
<p><i>obj</i> の親要素を返します。parents() が先祖すべてを返すのに対して、parent() は親要素のみを返します。<i>selector</i> を指定した場合は、セレクタにマッチする親要素のみを返します。</p>
<div class="tab">JavaScript</div>
<pre class=c2>
$("#t1").<em>parent()</em>.css("color", "red");
</pre>
</div>

<h5 id="parents">◆ <i>obj</i>.parents([<i>selector</i>]) <u>(1.0)</u></h5>
<div class=i>
<p><i>obj</i> の先祖要素をすべて返します。parent() が親要素のみを返すのに対して、parents() は先祖要素すべてを返します。<i>selector</i> を指定した場合は、セレクタにマッチする先祖要素のみを返します。</p>
<div class="tab">JavaScript</div>
<pre class=c2>
$("#t1").<em>parents()</em>.css("color", "red");
</pre>
</div>

<h5 id="parentsUntil">◆ <i>obj</i>.parentsUntil([<i>selector</i>][, <i>filter</i>]) <u>(1.4)</u></h5>
<h5>◆ <i>obj</i>.parentsUntil([<i>element</i>][, <i>filter</i>]) <u>(1.6)</u></h5>
<div class=i>
<p><i>obj</i> の祖先要素の中で、<i>selector</i> にマッチする要素までの祖先要素を返します。<i>filter</i> を指定すると、さらに、<i>filter</i> にマッチする要素に絞り込みます。<i>obj</i> 自身と <i>selector</i> にマッチする要素は含まれません。</p>
<div class="tab">JavaScript</div>
<pre class=c2>
$("td").<em>parentsUntil("body")</em>;     <span class="comment">// TR, TBODY, TABLE...</span>
</pre>
</div>

<h5 id="closest">◆ <i>obj</i>.closest(<i>selector</i>) <u>(1.3)</u></h5>
<h5>◆ <i>obj</i>.closest(<i>selector</i>[, <i>context</i>) <u>(1.4)</u></h5>
<h5>◆ <i>obj</i>.closest(<i>jQuery object</i>) <u>(1.6)</u></h5>
<h5>◆ <i>obj</i>.closest(<i>element</i>) <u>(1.6)</u></h5>
<div class=i>
<p><i>obj</i> の先祖要素の中から <i>selector</i> にマッチするもっとも近い先祖要素を返します。</p>
<div class="tab">JavaScript</div>
<pre class=c2>
$("li.data").<em>closest("ul")</em>.css("color", "red");
</pre>
</div>

<h5 id="offsetParent">◆ <i>obj</i>.offsetParent() <u>(1.2.6)</u></h5>
<div class=i>
<p><i>obj</i> の先祖要素の中から、positionスタイルに relative, absolute, fixed が指定されているもっとも近い先祖要素を返します。</p>
<div class="tab">JavaScript</div>
<pre class=c2>
$("li.data").<em>offsetParent()</em>.css("background-color", "#ffcccc");
</pre>
</div>

<h5 id="children">◆ <i>obj</i>.children([<i>selector</i>]) <u>(1.0)</u></h5>
<div class=i>
<p><i>obj</i> の子要素の中から <i>selector</i> にマッチする要素を返します。引数を省略した場合はすべての子要素を返却します。下記の例では、id="t1" のテーブルの子要素(tbody)のさらに子要素(tr)を取得し、色を変更します。</p>
<div class="tab">JavaScript</div>
<pre class=c2>
$("#t1").children("tbody").<em>children("tr")</em>.css("color", "red");
</pre>
</div>

<h5 id="find">◆ <i>obj</i>.find(<i>selector</i>) <u>(1.0)</u></h5>
<h5>◆ <i>obj</i>.find(<i>jQueryObject</i>) <u>(1.6)</u></h5>
<h5>◆ <i>obj</i>.find(<i>element</i>) <u>(1.6)</u></h5>
<div class=i>
<p><i>obj</i> の子孫要素の中から <i>selector</i>等にマッチする要素を返します。</p>
<div class="tab">JavaScript</div>
<pre class=c2>
$("#table1").<em>find("td")</em>.css("color", "red");
</pre>
</div>

<h5 id="siblings">◆ <i>obj</i>.siblings([<i>selector</i>]) <u>(1.0)</u></h5>
<div class=i>
<p><i>obj</i> の兄弟要素をすべて返します。<i>selector</i> を指定した場合は、結果の中からセレクタにマッチする要素のみを返します。</p>
<div class="tab">JavaScript</div>
<pre class=c2>
$("div#d3").<em>siblings()</em>.css("color", "red");
</pre>
</div>

<h5 id="prev">◆ <i>obj</i>.prev([<i>selector</i>]) <u>(1.0)</u></h5>
<h5 id="next">◆ <i>obj</i>.next([<i>selector</i>]) <u>(1.0)</u></h5>
<div class=i>
<p><i>obj</i> の兄弟要素の中から前の(後ろの)兄弟要素をすべて返します。<i>selector</i> を指定した場合は、結果の中からセレクタにマッチする要素のみを返します。</p>
<div class="tab">JavaScript</div>
<pre class=c2>
$("div#d3").<em>prevAll()</em>.css("color", "red");
</pre>
</div>

<h5 id="prevAll">◆ <i>obj</i>.prevAll([<i>selector</i>]) <u>(1.2)</u></h5>
<h5 id="nextAll">◆ <i>obj</i>.nextAll([<i>selector</i>]) <u>(1.2)</u></h5>
<div class=i>
<p><i>obj</i> の兄弟要素の中からひとつ前の(後ろの)兄弟要素を返します。<i>selector</i> を指定した場合は、結果の中からセレクタにマッチする要素のみを返します。</p>
<div class="tab">JavaScript</div>
<pre class=c2>
$("div#d3").<em>prev()</em>.css("color", "red");
</pre>
</div>

<h5 id="prevUntil">◆ <i>obj</i>.prevUntil([<i>selector</i>][, <i>filter</i>]) <u>(1.4)</u></h5>
<h5>◆ <i>obj</i>.prevUntil([<i>element</i>][, <i>filter</i>]) <u>(1.6)</u></h5>
<h5 id="nextUntil">◆ <i>obj</i>.nextUntil([<i>selector</i>][, <i>filter</i>]) <u>(1.4)</u></h5>
<h5>◆ <i>obj</i>.nextUntil([<i>element</i>][, <i>filter</i>]) <u>(1.6)</u></h5>
<div class=i>
<p><i>obj</i> に対して前方の(後方の)兄弟要素の中から <i>selector</i> にマッチする要素までの要素を返します。<i>obj</i> 自体や <i>selector</i> にマッチする要素は含みません。例えば下記の例では、d3, d4, d5 の要素がマッチします。<i>filter</i> を指定した場合は、結果の中から <i>filter</i> にマッチする要素のみを返します。</p>
<div class="tab">JavaScript</div>
<pre class=c2>
$("#d2").<em>nextUntil("#d6")</em>.css("color", "red");
</pre>
<div class="tab">HTML</div>
<pre class=c2>
&lt;div id="d1"&gt;AAA&lt;/div&gt;
&lt;div id="d2"&gt;AAA&lt;/div&gt;
&lt;div id="d3"&gt;AAA&lt;/div&gt;
&lt;div id="d4"&gt;AAA&lt;/div&gt;
&lt;div id="d5"&gt;AAA&lt;/div&gt;
&lt;div id="d6"&gt;AAA&lt;/div&gt;
</pre>
</div>

<h4>Traversing(Filtering)</h4>

<h5 id="filter">◆ <i>obj</i>.filter(<i>selector</i>) <u>(1.0)</u></h5>
<h5>◆ <i>obj</i>.filter(<i>function(index, element)</i>) <u>(1.0)</u></h5>
<h5>◆ <i>obj</i>.filter(<i>elements</i>) <u>(1.4)</u></h5>
<h5>◆ <i>obj</i>.filter(<i>selection</i>) <u>(1.4)</u></h5>
<div class=i>
<p><i>obj</i> の中から <i>selector</i> にマッチする要素を返します。</p>
<div class="tab">JavaScript</div>
<pre class=c2>
$("tr").<em>filter(".data")</em>.css("color", "red");
</pre>
</div>

<h5 id="first">◆ <i>obj</i>.first() <u>(1.4)</u></h5>
<h5 id="last">◆ <i>obj</i>.last() <u>(1.4)</u></h5>
<div class=i>
<p><i>obj</i> の中から最初の(最後の)要素を返します。</p>
<div class="tab">JavaScript</div>
<pre class=c2>
$("tr").<em>first()</em>.css("color", "red");
</pre>
</div>

<h5 id="eq">◆ <i>obj</i>.eq(<i>n</i>) <u>(1.1.2)</u></h5>
<h5>◆ <i>obj</i>.eq(-<i>n</i>) <u>(1.4)</u></h5>
<div class=i>
<p><i>obj</i> の中から <i>n</i>番目の要素を返します。最初の要素が 0番目になります。マイナスの値を指定した場合は、最後から数えて <i>n</i>番目の要素を返します。最後の要素が -1番目になります。</p>
<div class="tab">JavaScript</div>
<pre class=c2>
$("tr").<em>eq(2)</em>.css("color", "red");
</pre>
</div>

<h5 id="slice">◆ <i>obj</i>.slice(<i>n</i>[, <i>m</i>]) <u>(1.1.4)</u></h5>
<div class=i>
<p><i>obj</i> の中から <i>n</i>番目から <i>m</i>番目未満の要素を返します。最初の要素が 0番目になります。下記の例では、0, 1, 2番目の要素を返します。負の値を指定した場合後ろから数えます。最後の要素が -1番目になります。</p>
<div class="tab">JavaScript</div>
<pre class=c2>
$("div").<em>slice(0, 3)</em>.css("color", "red");
</pre>
</div>

<h5 id="has">◆ <i>obj</i>.has(<i>selector</i>) <u>(1.4)</u></h5>
<h5>◆ <i>obj</i>.has(<i>element</i>) <u>(1.4)</u></h5>
<div class=i>
<p><i>obj</i> の中から <i>selector</i> にマッチする要素を子孫要素として持つ要素をを返します。</p>
<div class="tab">JavaScript</div>
<pre class=c2>
$("table").<em>has("caption")</em>.css("color", "red");
</pre>
</div>

<h5 id="not">◆ <i>obj</i>.not(<i>selector</i>) <u>(1.0)</u></h5>
<h5>◆ <i>obj</i>.not(<i>elements</i>) <u>(1.0)</u></h5>
<h5>◆ <i>obj</i>.not(<i>function(index, element)</i>) <u>(1.4)</u></h5>
<h5>◆ <i>obj</i>.not(<i>jQueryObject</i>) <u>(1.4)</u></h5>
<div class=i>
<p><i>obj</i> の中から <i>selector</i> にマッチしない要素をを返します。</p>
<div class="tab">JavaScript</div>
<pre class=c2>
$("div.data").<em>not(".except")</em>.css("color", "red");
</pre>
</div>

<h4>Traversing(Filtering Operation)</h4>

<h5 id="is">◆ <i>obj</i>.is(<i>selector</i>) <u>(1.0)</u></h5>
<h5>◆ <i>obj</i>.is(<i>function(index, element)</i>) <u>(1.6)</u></h5>
<h5>◆ <i>obj</i>.is(<i>jQueryObject</i>) <u>(1.6)</u></h5>
<h5>◆ <i>obj</i>.is(<i>element</i>) <u>(1.6)</u></h5>
<div class=i>
<p><i>obj</i> の中から <i>selector</i> にマッチする要素が一つでもあれば true を、さもなくば false を返します。</p>
<div class="tab">JavaScript</div>
<pre class=c2>
if ($("div").<em>is(".data")</em>) {
    alert("Find!");
}
</pre>
</div>

<h5 id="map">◆ <i>obj</i>.map(<i>callback(index, domElement)</i>) <u>(1.2)</u></h5>
<div class=i>
<p><i>obj</i> のひとつひとつに対して <i>callback</i> を実行し、その戻り値のリストを返します。下記の例では、input要素に入力された値をカンマ(,)で連結した文字列を表示します。map() の返却値は jQueryオブジェクトの配列ですが、get() を用いて JavaScript の配列に変換することができます。</p>
<div class="tab">JavaScript</div>
<pre class=c2>
alert($("input").<em>map(function() {</em>
    return $(this).val();
<em>})</em>.get().join());
</pre>
</div>

<h4>Traversing(Miscellaneous Traversing)</h4>

<h5 id="contents">◆ <i>obj</i>.contents() <u>(1.2)</u></h5>
<div class=i>
<p><i>obj</i>要素の子要素の集合を、テキストやコメントを含めて返します。<a href="#children">.children()</a> が子要素のみを返すのに対して、テキストやコメントも返す点が異なります。下記の例では、T1テキスト、C1コメント、d2要素、T2テキスト、d3要素、T3テキストの6子の配列を返します。</p>
<div class="tab">JavaScript</div>
<pre class=c2>
$("div#d1").<em>contents()</em>.each(function() {
    if ($(this).attr("id")) {
        alert($(this).attr("id"));
    } else {
        alert($(this).text());
    }
});
</pre>
<div class="tab">HTML</div>
<pre class=c2>
&lt;div id="d1"&gt;
  T1
  &lt;!--C1--&gt;
  &lt;div id="d2"&gt;D2&lt;/div&gt;
  T2
  &lt;div id="d3"&gt;D3&lt;/div&gt;
  T3
&lt;/div&gt;
</pre>
</div>

<h5 id="add">◆ <i>obj</i>.add(<i>selector</i>) <u>(1.0)</u></h5>
<h5>◆ <i>obj</i>.add(<i>elements</i>) <u>(1.0)</u></h5>
<h5>◆ <i>obj</i>.add(<i>html</i>) <u>(1.0)</u></h5>
<h5>◆ <i>obj</i>.add(<i>selection</i>) <u>(1.3.2)</u></h5>
<h5>◆ <i>obj</i>.add(<i>selector</i>, <i>context</i>) <u>(1.4)</u></h5>
<div class=i>
<p><i>obj</i> 要素に加えて、<i>selector</i> にマッチする要素を加えた要素を返します。例えば下記の例では、HTML文書中の div要素の集合に、同じ文書中の p要素の集合を加えた要素を返します。$("div").add("p") は、$("div, p") と同じ意味を持ちます。</p>
<div class="tab">JavaScript</div>
<pre class=c2>
$("div").<em>add("p")</em>.css("color", "red");
</pre>
</div>

<h5 id="end">◆ <i>obj</i>.end() <u>(1.0)</u></h5>
<div class=i>
<p>.next() や .find() などの操作を行った際、操作を行う前の要素を返します。例えば下記の例では、d3要素を緑に、次の d4要素を赤に、次の d5要素を青にします。.end()で一つ戻って d4要素の背景を黄色に、もう一つ戻って d3要素の背景をピンクにします。</p>
<div class="tab">JavaScript</div>
<pre class=c2>
$("div#d3").css("color", "green")
    .next().css("color", "red")
    .next().css("color", "blue")
    <em>.end()</em>.css("background", "yellow")
    <em>.end()</em>.css("background", "pink");
</pre>
<div class="tab">HTML</div>
<pre class=c2>
&lt;div id="d1"&gt;D1&lt;/div&gt;
&lt;div id="d2"&gt;D2&lt;/div&gt;
&lt;div id="d3"&gt;D3&lt;/div&gt;
&lt;div id="d4"&gt;D4&lt;/div&gt;
&lt;div id="d5"&gt;D5&lt;/div&gt;
</pre>
</div>

<h5 id="andSelf">◆ <i>obj</i>.andSelf([<i>selector</i>]) <u>(1.2)</u></h5>
<h5 id="addBack">◆ <i>obj</i>.addBack([<i>selector</i>]) <u>(1.8)</u></h5>
<div class=i>
<p>.nextAll() や .find() などの操作を行った際、操作を行った後の要素集合に加えて、操作を行う前の要素集合を加えたものを返します。例えば下記の例では、$("div#d3") は d3要素を、$("div#d3").nextAll() は d4, d5要素を返しますが、$("div#d3").nextAll().addBack() は、d4, d5要素に d3要素を加えた集合を返します。jQuery 1.2 では .andSelf() としてサポートされましたが、jQuery 1.8 からは .addBack() に名称が変更されました。andSelf() は jQuery 3.0 で廃止されました。</p>
<div class="tab">JavaScript</div>
<pre class=c2>
$("div#d3").nextAll().<em>addBack()</em>.css("color", "red");
</pre>
<div class="tab">HTML</div>
<pre class=c2>
&lt;div id="d1"&gt;D1&lt;/div&gt;
&lt;div id="d2"&gt;D2&lt;/div&gt;
&lt;div id="d3"&gt;D3&lt;/div&gt;
&lt;div id="d4"&gt;D4&lt;/div&gt;
&lt;div id="d5"&gt;D5&lt;/div&gt;
</pre>
</div>

<hr>
<div>Copyright (C) 2013-2019 杜甫々</div>
<div>初版：2013年2月3日、最終更新：2019年5月5日</div>
<div>http://www.tohoho-web.com/js/jquery/traversing.htm</div>
</body>
</html>
