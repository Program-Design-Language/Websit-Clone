<!DOCTYPE html>
<html>
<head>
<meta charset="utf-8">
<title>とほほのJava入門 - とほほのWWW入門</title>
<meta name="viewport" content="width=device-width,initial-scale=1.0">
<link rel="stylesheet" href="../style3.css" tppabs="http://www.tohoho-web.com/style3.css">
</head>
<body>
<h2>インタフェース</h2>

<a href="index.htm" tppabs="http://www.tohoho-web.com/java/index.htm">[戻る]</a>
<a href="class.htm" tppabs="http://www.tohoho-web.com/java/class.htm">[前に]</a>
<a href="method.htm" tppabs="http://www.tohoho-web.com/java/method.htm">[次に]</a>

<h4 id="interface">インタフェース（interface）</h4>
<div class=i>
<p><b>インタフェース</b> は、ある機能を実現するクラスが必ず実装するべきメソッドの名前や型といった作法のみを定義するものです。<b>interface</b> を用いて定義します。インタフェースで定義されるメソッド（<b>抽象メソッド</b>）の実体は implements を用いた側のクラスで実装しなくてはなりません。</p>
<div class="tab">文法</div>
<pre class=c2>
<em>interface インタフェース名</em> {
    :
}
</pre>
<p>下記は ActionListener インタフェースの実際の定義例です。EventListener インタフェースを継承しています。インタフェース内で定義されるメソッドには、暗黙的に abstract 宣言と public 宣言がつけられます。</p>
<div class="tab">Java</div>
<pre class=c2>
public <em>interface ActionListener</em> extends EventListener {
    public void actionPerformed(ActionEvent e);
}
</pre>
</div>

<h4 id="implements">インタフェースの実装（implements）</h4>
<div class=i>
<p>インタフェースを <b>実装</b> するには、<b>implements</b> を用いて下記のように定義します。インタフェース名は、カンマ（,）で区切って複数指定することができます。implements を用いた場合、インタフェース名で指定された抽象メソッドを実装することが義務付けられます。</p>
<div class="tab">文法</div>
<pre class=c2>
class クラス名 <em>implements インタフェース名</em> {
    :
}
</pre>
</div>

<h4 id="sample">インタフェースの例</h4>
<div class=i>
<p>インタフェースの具体例を見てみましょう。InterfaceA はテスト用のインタフェースです。メソッド methodA() と methodB() の名前や型のみを定義しています。クラス ClassA は InterfaceA を実装すると宣言しているため、methodA() や methodB() を正確に実装しなくてはなりません。この実装を行う際のプログラミングミスをチェックするのが、インタフェースの役目です。</p>
<div class=f>§InterfaceTest.java</div>
<div class="tab">Java</div>
<pre class=c2>
<em>interface</em> InterfaceA {
    public abstract void methodA(String msg);
    public abstract void methodB(int x);
}

class InterfaceTest <em>implements</em> InterfaceA {
    public static void main(String[] args) {
        InterfaceTest o = new InterfaceTest();
        o.methodA("ABC");
        o.methodB(123);
    }
    public void methodA(String msg) {
        System.out.println(msg);
    }
    public void methodB(int x) {
        System.out.println(x);
    }
}
</pre>
</div>

<h4 id="modifier">インタフェース修飾子（public, ...）</h4>
<div class=i>
<p>インタフェースの修飾子には、<a href="modifier.htm#access" tppabs="http://www.tohoho-web.com/java/modifier.htm#access">public</a>、<a href="modifier.htm#abstract" tppabs="http://www.tohoho-web.com/java/modifier.htm#abstract">abstract</a>、<a href="modifier.htm#strictfp" tppabs="http://www.tohoho-web.com/java/modifier.htm#strictfp">strictfp</a> を指定することができます。
<div class="tab">文法</div>
<pre class=c2>
<em>修飾子</em> interface インタフェース名 {
    :
}
</pre>
<p>インタフェースをクラス内に定義する場合には加えて、<a href="modifier.htm#access" tppabs="http://www.tohoho-web.com/java/modifier.htm#access">protected</a>、<a href="modifier.htm#access" tppabs="http://www.tohoho-web.com/java/modifier.htm#access">private</a>、<a href="modifier.htm#static" tppabs="http://www.tohoho-web.com/java/modifier.htm#static">static</a> を指定することが可能になります。</p>
<div class="tab">文法</div>
<pre class=c2>
class クラス名 {
    <em>修飾子</em> interface インタフェース名 {
        :
    }
}
</pre>
</div>

<h4 id="extends">インタフェースの継承（extends）</h4>
<div class=i>
<p>親インタフェースの定義を継承するには <a href="class.htm#extends" tppabs="http://www.tohoho-web.com/java/class.htm#extends">extends</a> を用います。</p>
<div class="tab">文法</div>
<pre class=c2>
interface インタフェース名 <em>extends 親インタフェース名</em> {
    :
}
</pre>
</div>

<hr>
<div>http://www.tohoho-web.com/java/interface.htm</div>
<div>初版：2004年6月26日、最終更新：2004年6月26日</div>
<a href="index.htm" tppabs="http://www.tohoho-web.com/java/index.htm">[戻る]</a>
<a href="class.htm" tppabs="http://www.tohoho-web.com/java/class.htm">[前に]</a>
<a href="method.htm" tppabs="http://www.tohoho-web.com/java/method.htm">[次に]</a>
</body>
</html>
