<!DOCTYPE html>
<html>
<head>
<meta charset="utf-8">
<title>とほほのJava入門 - とほほのWWW入門</title>
<meta name="viewport" content="width=device-width,initial-scale=1.0">
<link rel="stylesheet" href="../style3.css" tppabs="http://www.tohoho-web.com/style3.css">
</head>
<body>
<h2>クラス</h2>

<a href="index.htm" tppabs="http://www.tohoho-web.com/java/index.htm">[戻る]</a>
<a href="modifier.htm" tppabs="http://www.tohoho-web.com/java/modifier.htm">[前に]</a>
<a href="interface.htm" tppabs="http://www.tohoho-web.com/java/interface.htm">[次に]</a>

<h4 id="class">クラス（class）</h4>
<div class=i>
<p><b>クラス</b>（<b>class</b>）はオブジェクト指向プログラミングの基本的な仕組みを提供するもので、<b>オブジェクト</b>（<b>インスタンス</b> とも言います）が持つ、<b>属性</b>（<b>アトリビュート</b>、<b>プロパティ</b> とも呼ばれます）や、<b>メソッド</b>（<b>関数</b>、<b>ファンクション</b> と呼ばれることもあります）などを定義します。</p>
<div class="tab">文法</div>
<pre class=c2>
<em>class クラス名</em> {
    型 属性;
     :
    型 メソッド() { ... }
     :
}
</pre>
</div>

<h4 id="new">クラスのインスタンス化（new）</h4>
<div class=i>
<p>あるクラスのインスタンスを作成するには、<b>new</b> を用います。例えば、TestClass という名前のクラスのインスタンスを作るには次のようにします。</p>
<div class="tab">Java</div>
<pre class=c2>
TestClass o = <em>new</em> TestClass();
</pre>
</div>

<h4>クラスの例</h4>
<div class=i>
<p>例えば下記の例では、Person という名前のクラスを定義しています。Person クラスは、myName と myAge という属性を持っています。SetName()、GetName()、SetAge()、GetAge() というメソッドを持っています。</p>
<div class=f>§PersonTest.java (1/2)</div>
<div class="tab">Java</div>
<pre class=c2>
class <em>Person</em> {
    String <em>myName</em>;
    int <em>myAge</em>;
    public void <em>SetName</em>(String name) {
        myName = name;
    }
    public String <em>GetName</em>() {
        return myName;
    }
    public void <em>SetAge</em>(int age) {
        myAge = age;
    }
    public int <em>GetAge</em>() {
        return myAge;
    }
}
</pre>
<p>ここで作成した Person クラスを使用するには次のようにします。まず、new でインスタンス tanaka や suzuki を作成し、そのメソッドを呼び出しています。</p>
<div class=f>§PersonTest.java (2/2)</div>
<div class="tab">Java</div>
<pre class=c2>
class PersonTest {
    public static void main(String[] args) {
        <em>Person tanaka = new Person();</em> // 田中さんオブジェクトを作る
        tanaka.<em>SetName("Tanaka");</em>     // 田中さんの名前を設定する
        tanaka.<em>SetAge(26);</em>            // 田中さんの年齢を設定する

        <em>Person suzuki = new Person();</em> // 鈴木さんオブジェクトを作る
        suzuki.<em>SetName("Suzuki");</em>     // 鈴木さんの名前を設定する
        suzuki.<em>SetAge(32);</em>            // 鈴木さんの年齢を設定する

        System.out.println(tanaka.<em>GetName()</em>);
        System.out.println(tanaka.<em>GetAge()</em>);
        System.out.println(suzuki.<em>GetName()</em>);
        System.out.println(suzuki.<em>GetAge()</em>);
    }
}
</pre>
<p>クラス、インスタンス、属性、メソッドについてまとめてみます。</p>
<table class="tb1">
<tr><th class="nowrap">用語</th><th>別の呼び方</th><th>サンプルでの具体例</th></tr>
<tr><td>クラス</td><td><br></td><td>Person</td></tr>
<tr><td>属性</td><td>アトリビュート、プロパティ</td><td>myName、myAge</td></tr>
<tr><td>メソッド</td><td>ファンクション、関数</td><td>SetName()、GetName()、SetAge()、GetAge()</td></tr>
<tr><td>インスタンス</td><td>オブジェクト</td><td>tanaka、suzuki</td></tr>
</table>
</div>

<h4 id="constructor">コンストラクタとデストラクタ</h4>
<div class=i>
<p><b>コンストラクタ</b> は、クラス名と同じ名前を持つ特別なメソッドです。インスタンスが生成された時に自動的に呼ばれ、インスタンスの初期化処理を行います。</p>
<div class="tab">Java</div>
<pre class=c2>
class Person {
    String myName;
    <em>Person(String name)</em> {
        myName = name;
    }
}
</pre>
<p>コンストラクタには上記のように引数を持つことができます。下記の例では、Person クラスのインスタンス tanaka を生成する際に、コンストラクタの処理を利用して名前（myName）の設定を行っています。</p>
<div class="tab">Java</div>
<pre class=c2>
    Person tanaka = new Person("tanaka");
</pre>
<p><b>デストラクタ</b> は、クラスが消滅する際に自動的に呼ばれる特別なメソッドで、クラスの後始末処理を記述します。C++言語などではサポートされていますが、Java ではすべての破棄作業は自動的に行われるという思想の元、デストラクタは不要と考えられています。</p>
</div>

<h4 id="innerclass">インナークラス</h4>
<div class=i>
<p>クラス内部に定義するクラスを <b>インナークラス</b>（<b>内部クラス</b>）と呼びます。</p>
<div class="tab">文法</div>
<pre class=c2>
class クラス名 {
    <em>class クラス名</em> {
        :
    }
}
</pre>
</div>

<h4 id="modifier">クラス修飾子（public, ...）</h4>
<div class=i>
<p>クラスの修飾子には、<a href="modifier.htm#access" tppabs="http://www.tohoho-web.com/java/modifier.htm#access">public</a>、<a href="modifier.htm#final" tppabs="http://www.tohoho-web.com/java/modifier.htm#final">final</a>、<a href="modifier.htm#abstract" tppabs="http://www.tohoho-web.com/java/modifier.htm#abstract">abstract</a>、<a href="modifier.htm#strictfp" tppabs="http://www.tohoho-web.com/java/modifier.htm#strictfp">strictfp</a> を指定することができます。
<div class="tab">文法</div>
<pre class=c2>
<em>修飾子</em> class クラス名 {
    :
}
</pre>
<p>インナークラス（クラス内部に定義するクラス）には加えて、<a href="modifier.htm#access" tppabs="http://www.tohoho-web.com/java/modifier.htm#access">protected</a>、<a href="modifier.htm#access" tppabs="http://www.tohoho-web.com/java/modifier.htm#access">private</a>、<a href="modifier.htm#static" tppabs="http://www.tohoho-web.com/java/modifier.htm#static">static</a> を指定することが可能になります。</p>
<div class="tab">文法</div>
<pre class=c2>
class クラス名 {
    <em>修飾子</em> class クラス名 {
        :
    }
}
</pre>
</div>

<h4 id="subClass">クラスの継承（extends）</h4>
<div class=i>
<p>あるクラスのメンバ変数やメソッドを <b>継承</b> した <b>サブクラス</b>（子クラス）を定義するには <b>extends</b> を用います。</p>
<div class="tab">文法</div>
<pre class=c2>
class クラス名 <em>extends 親クラス名</em> {
    :
}
</pre>
<p>下記の例では、上記で作成した Person クラスを継承する Member クラスを定義しています。Member クラスは Person クラスを継承しているので、myName、myAge などの属性や、GetName()、SetName() などのメソッドを引き継ぎ、加えて、myNumber や SetNumber() などの属性やメソッドを備えています。</p>
<div class="tab">Java</div>
<pre class=c2>
class <em>Member</em> extends <em>Person</em> {
    int <em>myNumber</em>;
    public void <em>SetNumber</em>(int number) {
        myNumber = number;
    }
    public int <em>GetNumber</em>() {
        return myNumber;
    }
}
</pre>
</div>

<h4 id="super">親クラスの参照（super）</h4>
<div class=i>
<p><b>super</b> は、クラスの継承における <b>親クラス</b>（<b>スーパークラス</b>）を示します。java では、親クラスのコンストラクタは暗黙的には呼ばれないため、下記のように明示的に呼び出してやる必要があります。</p>
<div class="tab">Java</div>
<pre class=c2>
class Member extends Person {
    Member() {
        <em>super</em>("tanaka");         // 親クラスのコンストラクタを呼び出す
        <em>super</em>.SetAge(26);        // 親クラスのメソッドを呼び出す
        return <em>super</em>.myName;     // 親クラスの属性を参照する
    }
}
</pre>
</div>

<h4 id="instanceof">クラスに属しているか調べる（instanceof）</h4>
<div class=i>
<p><b>instanceof</b> 演算子は、オブジェクト（インスタンス）が、指定したクラスまたはその上位のクラスに属しているかどうかを調べます。</p>
<div class="tab">Java</div>
<pre class=c2>
MyButton b = new MyButton();
if (<em>b instanceof Button</em>) {
    System.out.println("属してる");
} else {
    System.out.println("属していない");
}
</pre>
</div>

<hr>
<div>http://www.tohoho-web.com/java/class.htm</div>
<div>初版：2004年6月26日、最終更新：2004年11月28日</div>
<a href="index.htm" tppabs="http://www.tohoho-web.com/java/index.htm">[戻る]</a>
<a href="modifier.htm" tppabs="http://www.tohoho-web.com/java/modifier.htm">[前に]</a>
<a href="interface.htm" tppabs="http://www.tohoho-web.com/java/interface.htm">[次に]</a>
</body>
</html>
