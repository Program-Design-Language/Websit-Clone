<!DOCTYPE html>
<html>
<head>
<meta charset="utf-8">
<title>とほほのJava入門 - とほほのWWW入門</title>
<meta name="viewport" content="width=device-width,initial-scale=1.0">
<link rel="stylesheet" href="../style3.css" tppabs="http://www.tohoho-web.com/style3.css">
</head>
<body>
<h2>文法</h2>

<a href="index.htm" tppabs="http://www.tohoho-web.com/java/index.htm">[戻る]</a>
<a href="start.htm" tppabs="http://www.tohoho-web.com/java/start.htm">[前に]</a>
<a href="flow.htm" tppabs="http://www.tohoho-web.com/java/flow.htm">[次に]</a>

<h4 id="comment">コメント（//, /* */, /** */）</h4>
<div class=i>
<p><b>//</b> から行末まで、<b>/* ～ */</b> の間は <b>コメント</b>（<b>注釈</b>）とみなされます。コメントには、プログラムの覚書などを記述します。コンパイルの際には無視されます。<b>/** ～ */</b> もコメントですが、<a href="other.htm#javadoc" tppabs="http://www.tohoho-web.com/java/other.htm#javadoc">javadoc</a> コマンドで抜き出してドキュメント化することができます。</p>
<div class="tab">Java</div>
<pre class=c2>
    <em>// ここにコメントを記述します。</em>

    a = b + c;   <em>/* ここにもコメントを記述します。*/</em>

    <em>/*
     * 複数行にまたがるコメントも可能です。
     */</em>

    <em>/**
     * この部分は javadoc コマンドで抜き出すことができます。
     */</em>
</pre>
</div>

<h4 id="keyword">キーワード</h4>
<div class=i>
<p>Java 1.4 では、以下の用語が <b>キーワード</b> として定義されています。キーワードは、変数名やメソッド名などの識別子として用いることはできません。</p>
<div class="tab">キーワード</div>
<div class=c2>
<a href="modifier.htm#abstract" tppabs="http://www.tohoho-web.com/java/modifier.htm#abstract">abstract</a>,
<a href="syntax.htm#premitive" tppabs="http://www.tohoho-web.com/java/syntax.htm#premitive">boolean</a>,
<a href="flow.htm#break" tppabs="http://www.tohoho-web.com/java/flow.htm#break">break</a>,
<a href="syntax.htm#premitive" tppabs="http://www.tohoho-web.com/java/syntax.htm#premitive">byte</a>,
<a href="flow.htm#switch" tppabs="http://www.tohoho-web.com/java/flow.htm#switch">case</a>,
<a href="exception.htm#try_catch" tppabs="http://www.tohoho-web.com/java/exception.htm#try_catch">catch</a>,
<a href="syntax.htm#premitive" tppabs="http://www.tohoho-web.com/java/syntax.htm#premitive">char</a>,
<a href="class.htm#class" tppabs="http://www.tohoho-web.com/java/class.htm#class">class</a>,
<a href="modifier.htm#const" tppabs="http://www.tohoho-web.com/java/modifier.htm#const">const</a>,
<a href="flow.htm#continue" tppabs="http://www.tohoho-web.com/java/flow.htm#continue">continue</a>,
<a href="flow.htm#switch" tppabs="http://www.tohoho-web.com/java/flow.htm#switch">default</a>,
<a href="flow.htm#dowhile" tppabs="http://www.tohoho-web.com/java/flow.htm#dowhile">do</a>,
<a href="syntax.htm#premitive" tppabs="http://www.tohoho-web.com/java/syntax.htm#premitive">double</a>,
<a href="flow.htm#if" tppabs="http://www.tohoho-web.com/java/flow.htm#if">else</a>,
<a href="class.htm#subClass" tppabs="http://www.tohoho-web.com/java/class.htm#subClass">extends</a>,
<a href="modifier.htm#final" tppabs="http://www.tohoho-web.com/java/modifier.htm#final">final</a>,
<a href="exception.htm#try_catch" tppabs="http://www.tohoho-web.com/java/exception.htm#try_catch">finally</a>,
<a href="syntax.htm#premitive" tppabs="http://www.tohoho-web.com/java/syntax.htm#premitive">float</a>,
<a href="flow.htm#for" tppabs="http://www.tohoho-web.com/java/flow.htm#for">for</a>,
<a href="flow.htm#goto" tppabs="http://www.tohoho-web.com/java/flow.htm#goto">goto</a>,
<a href="flow.htm#if" tppabs="http://www.tohoho-web.com/java/flow.htm#if">if</a>,
<a href="class.htm#implements" tppabs="http://www.tohoho-web.com/java/class.htm#implements">implements</a>,
<a href="syntax.htm#import" tppabs="http://www.tohoho-web.com/java/syntax.htm#import">import</a>,
<a href="other.htm#instanceof" tppabs="http://www.tohoho-web.com/java/other.htm#instanceof">instanceof</a>,
<a href="syntax.htm#premitive" tppabs="http://www.tohoho-web.com/java/syntax.htm#premitive">int</a>,
<a href="interface.htm#interface" tppabs="http://www.tohoho-web.com/java/interface.htm#interface">interface</a>,
<a href="syntax.htm#premitive" tppabs="http://www.tohoho-web.com/java/syntax.htm#premitive">long</a>,
<a href="modifier.htm#native" tppabs="http://www.tohoho-web.com/java/modifier.htm#native">native</a>,
<a href="class.htm#new" tppabs="http://www.tohoho-web.com/java/class.htm#new">new</a>,
<a href="package.htm#package" tppabs="http://www.tohoho-web.com/java/package.htm#package">package</a>,
<a href="modifier.htm#access" tppabs="http://www.tohoho-web.com/java/modifier.htm#access">private</a>,
<a href="modifier.htm#access" tppabs="http://www.tohoho-web.com/java/modifier.htm#access">protected</a>,
<a href="modifier.htm#access" tppabs="http://www.tohoho-web.com/java/modifier.htm#access">public</a>,
<a href="method.htm#return" tppabs="http://www.tohoho-web.com/java/method.htm#return">return</a>,
<a href="syntax.htm#premitive" tppabs="http://www.tohoho-web.com/java/syntax.htm#premitive">short</a>,
<a href="modifier.htm#static" tppabs="http://www.tohoho-web.com/java/modifier.htm#static">static</a>,
<a href="modifier.htm#strictfp" tppabs="http://www.tohoho-web.com/java/modifier.htm#strictfp">strictfp</a>,
<a href="class.htm#super" tppabs="http://www.tohoho-web.com/java/class.htm#super">super</a>,
<a href="flow.htm#switch" tppabs="http://www.tohoho-web.com/java/flow.htm#switch">switch</a>,
<a href="modifier.htm#synchronized" tppabs="http://www.tohoho-web.com/java/modifier.htm#synchronized">synchronized</a>,
<a href="variable.htm#this" tppabs="http://www.tohoho-web.com/java/variable.htm#this">this</a>,
<a href="exception.htm#throw" tppabs="http://www.tohoho-web.com/java/exception.htm#throw">throw</a>,
<a href="exception.htm#throws" tppabs="http://www.tohoho-web.com/java/exception.htm#throws">throws</a>,
<a href="modifier.htm#transient" tppabs="http://www.tohoho-web.com/java/modifier.htm#transient">transient</a>,
<a href="exception.htm#try_catch" tppabs="http://www.tohoho-web.com/java/exception.htm#try_catch">try</a>,
<a href="syntax.htm#void" tppabs="http://www.tohoho-web.com/java/syntax.htm#void">void</a>,
<a href="modifier.htm#volatile" tppabs="http://www.tohoho-web.com/java/modifier.htm#volatile">volatile</a>,
<a href="flow.htm#while" tppabs="http://www.tohoho-web.com/java/flow.htm#while">while</a>
</div>
</div>

<h4 id="literal">リテラル</h4>
<div class=i>
<p>Java では、数値や文字列などの値を <b>リテラル</b> と呼びます。リテラルには次のようなものがあります。</p>
<div class="tab">リテラル</div>
<pre class=c2>
<span class="mr">□</span> リテラル
<span class="mr">├□</span> 数字
<span class="mr">│├□</span> 整数
<span class="mr">││├□</span> 10進数（123 など）
<span class="mr">││├□</span> 16進数（0x89ab など）
<span class="mr">││└□</span> 8進数（0177 など）
<span class="mr">│└□</span> 浮動小数点（1.23、1.23e45 など）
<span class="mr">├□</span> 文字・文字列
<span class="mr">│├□</span> 文字（'a'、'あ' など）
<span class="mr">│└□</span> 文字列（"Hello" など）
<span class="mr">├□</span> 論理値（<b>true</b> または <b>false</b>）
<span class="mr">└□</span> 空（<b>null</b>）
</pre>
</div>

<h4 id="premitive">プリミティブ型（boolean, byte, char, short, int, long, float, double）</h4>
<div class=i>
<p>Java では、以下の型が <b>プリミティブ型</b>（基本的な型）として定義されています。</p>
<table class="tb1">
<tr><th>種別</th><th>型</th><th>説明</th></tr>
<tr><td>論理値</td><td><b>boolean</b></td><td>真偽値。true または false。</td></tr>
<tr><td>文字</td><td><b>char</b></td><td>2バイトUNICODE文字。'\u0000'～'\uffff'。</td></tr>
<tr><td rowspan=4>整数</td><td><b>byte</b></td><td>1バイト符号付整数。-128～127。</td></tr>
<tr><td><b>short</b></td><td>2バイト符号付整数。-32768～32767。</td></tr>
<tr><td><b>int</b></td><td>4バイト符号付整数。-2147483648～2147483647。</td></tr>
<tr><td><b>long</b></td><td>8バイト符号付整数。約-922京～約922京。</td></tr>
<tr><td rowspan=2>浮動小数</td><td><b>float</b></td><td>4バイト浮動小数点数。</td></tr>
<tr><td><b>double</b></td><td>8バイト浮動小数点数。</td></tr>
</table>
</div>
<h5>◆ boolean - 真偽値</h5>
<div class=i>
<p>boolean には真偽を表す特別な値として true または false を指定します。</p>
<div class="tab">Java</div>
<pre class=c2>
boolean a = true;
</pre>
</div>
<h5>◆ char - 文字コード</h5>
<div class=i>
<p>char には UNICODE（UTF-16）文字を代入します。C/C++言語の char は 1バイトですが、Java の char は 2バイト分の領域を持ちますので、日本語文字（全角文字）も char で表すことができます。'\u0041' は、文字コード 0041（16進数）の文字を意味します。</p>
<div class="tab">Java</div>
<pre class=c2>
char a = 'A';
char b = '\u0041';
char c = 'あ';
</pre>
</div>
<h5>◆ byte, short, int, long - 整数値</h5>
<div class=i>
<p>byte, short, int, long には整数値を代入できます。long 型変数に数値を代入する際には、数値の最後に <b>L</b> をつける必要があります。C/C++ 言語と異なり、<b>unsigned</b>（符号なし）を指定することはできません。例えば、128 という数値を表現する場合は byte ではなく short や int などを使用します。0x で始まる数値は 16進数、0 で始まる数値は 8進数と解釈されます。</p>
<div class="tab">Java</div>
<pre class=c2>
byte a = 127;
short b = 32767;
int c1 = 2147483647;
int c2 = 0775;                 // 8進数
int c3 = 0x79ab45;             // 16進数
long d = 9223372036854775807L;
</pre>
</div>
<h5>◆ float, double - 実数値</h5>
<div class=i>
<p>float と double には浮動小数点数を代入します。float に数値を代入する際には、数値の最後に <b>F</b> をつけます。1.23e4 は、1.23×10<sup>4</sup>を意味します。</p>
<div class="tab">Java</div>
<pre class=c2>
float a = 1.23F;
float b = 1.23e4F;
double b = 1.23e4;
</pre>
<p>浮動小数点数に関連して、以下の特別な値が用意されています。</p>
<div class="tab">Java</div>
<pre class=c2>
float f1 = Float.NaN;                  // 非数（Not a Number）
float f2 = Float.POSITIVE_INFINITY;    // 正の無限大
float f3 = Float.NEGATIVE_INFINITY;    // 負の無限大
double d1 = Double.NaN;                // 非数（Not a Number）
double d2 = Double.POSITIVE_INFINITY;  // 正の無限大
double d3 = Double.NEGATIVE_INFINITY;  // 負の無限大
</pre>
</div>

<h4 id="void">値を返さない型（void）</h4>
<div class=i>
<p><b>void</b> は、値を返さない型を意味します。例えば、下記の例では、add() というメソッドは int の値を返しますが、test() というメソッドは値を返しません。</p>
<div class="tab">Java</div>
<pre class=c2>
int add(int x, int y) {
    return x + y;
}
<em>void</em> test() {
    System.out.println("TEST");
}
</pre>
</div>

<h4 id="Operand">演算子</h4>
<div class=i>
<p>Java で利用可能な演算子を以下に示します。大半は、C、C++、JavaScript と同様の演算子です。</p>
<table class="tb1">
<tr><th>カテゴリ</th><th>演算子</th><th>説明</th><th>使用例</th></tr>
<tr><td rowspan=5>四則演算</td><td>+</td><td>加算。</td><td>a = b + c;</td></tr>
<tr><td>-</td><td>減算。</td><td>a = b - c;</td></tr>
<tr><td>*</td><td>乗算。</td><td>a = b * c;</td></tr>
<tr><td>/</td><td>除算。</td><td>a = b / c;</td></tr>
<tr><td>%</td><td>剰余。</td><td>a = b % c;</td></tr>
<tr><td rowspan=2>単項演算子</td><td>++</td><td>インクリメント。</td><td>a++; ++a;</td></tr>
<tr><td>--</td><td>デクリメント。</td><td>a--; --a;</td></tr>
<tr><td rowspan=1>代入演算子</td><td>=</td><td>代入演算子。</td><td>a = b;</td></tr>
<tr><td rowspan=6>比較演算子</td><td>==</td><td>等しい。</td><td>if (a == b)</td></tr>
<tr><td>!=</td><td>異なる。</td><td>if (a != b)</td></tr>
<tr><td>&lt;</td><td>より小さい。</td><td>if (a &lt; b)</td></tr>
<tr><td>&gt;</td><td>より大きい。</td><td>if (a &gt; b)</td></tr>
<tr><td>&lt;=</td><td>等しいかより小さい。</td><td>if (a &lt;= b)</td></tr>
<tr><td>&gt;=</td><td>等しいかより大きい。</td><td>if (a &gt;= b)</td></tr>
<tr><td rowspan=3>論理演算子</td><td>&amp;&amp;</td><td>かつ。</td><td>if ((a == b) &amp;&amp; (c == d))</td></tr>
<tr><td>||</td><td>または。</td><td>if ((a == b) || (c == d))</td></tr>
<tr><td>!</td><td>ではない。</td><td>if (!(a == b))</td></tr>
<tr><td rowspan=8>ビット演算子</td><td>&amp;</td><td>論理積（AND）。</td><td>a = b &amp; c;</td></tr>
<tr><td>|</td><td>論理和（OR）。</td><td>a = b | c;</td></tr>
<tr><td>!</td><td>論理否定（NOT）。</td><td>a = ! b;</td></tr>
<tr><td>^</td><td>排他的論理和（EOR）。</td><td>a = b ^ c;</td></tr>
<tr><td>~</td><td>ビット反転。</td><td>a = ~ b;</td></tr>
<tr><td>&lt;&lt;</td><td>算術左シフト。</td><td>a = b &lt;&lt; 2;</td></tr>
<tr><td>&gt;&gt;</td><td>算術右シフト。</td><td>a = b &gt;&gt; 2;</td></tr>
<tr><td>&gt;&gt;&gt;</td><td>論理右シフト。</td><td>a = b &gt;&gt;&gt; 2;</td></tr>
<tr><td rowspan=11>算術代入演算子</td><td>+=</td><td>加算代入。</td><td>a += b;</td></tr>
<tr><td>-=</td><td>減算代入。</td><td>a -= b;</td></tr>
<tr><td>*=</td><td>乗算代入。</td><td>a *= b;</td></tr>
<tr><td>/=</td><td>除算代入。</td><td>a /= b;</td></tr>
<tr><td>%=</td><td>余り代入。</td><td>a %= b;</td></tr>
<tr><td>&amp;=</td><td>乗算代入。</td><td>a &amp;= b;</td></tr>
<tr><td>|=</td><td>論理和代入。</td><td>a |= b;</td></tr>
<tr><td>^=</td><td>排他的論理和代入。</td><td>a ^= b;</td></tr>
<tr><td>&lt;&lt;=</td><td>算術左シフト代入。</td><td>a &lt;&lt;= b;</td></tr>
<tr><td>&gt;&gt;=</td><td>算術右シフト代入。</td><td>a &gt;&gt;= b;</td></tr>
<tr><td>&gt;&gt;&gt;=</td><td>論理右シフト代入。</td><td>a &gt;&gt;&gt;= b;</td></tr>
<tr><td rowspan=1>三項演算子</td><td>? :</td><td>三項演算子。</td><td>a = (b == c) ? d : e;</td></tr>
</table>
</div>
<h5>◆ インクリメント（++）、デクリメント（--）演算子</h5>
<div class=i>
<p>a++ と ++a はどちらも a の値をひとつ増やしたものを a に代入しますが、式の値が異なります。a++ はインクリメントする前の、++a はインクリメントした後の値を返します。</p>
<div class="tab">Java</div>
<pre class=c2>
a = 5; b = a++;    // b には 5 が代入される
a = 5; b = ++a;    // b には 6 が代入される
</pre>
</div>
<h5>◆ 文字列の比較</h5>
<div class=i>
<p>比較演算子 == を文字列の比較の意味で String オブジェクトなどに使用することはできません。下記のような使用例は誤りです。</p>
<div class="tab">Java</div>
<pre class=c2>
String s1 = "ABC";
String s2 = "DEF";
if (s1 == s2) {                   // 文字列の比較にはなっていない
    System.out.println("Match!");
}
</pre>
<p>文字列の比較には equals() を用います。</p>
<div class="tab">Java</div>
<pre class=c2>
String s1 = "ABC";
String s2 = "DEF";
if (s1.equals(s2)) {
    System.out.println("Match!");
}
</pre>
</div>

<h4 id="cast">キャスト</h4>
<div class=i>
<p>型やクラスを一時的に変換して参照することを <b>キャスト</b> と呼びます。例えば下記の例で、int値を long値に代入することは可能ですが、int値を short値に代入しようとするとコンパイルエラーになります。これは、int → short の代入では、値のオーバーフローが発生してしまう可能性があるためです。</p>
<div class="tab">Java</div>
<pre class=c2>
int intValue = 123;
<em>long longValue = intValue;</em>
<em>short shortValue = intValue;</em>   ←コンパイルエラー
</pre>
<p>この問題を解決するには、int値を明示的に short値に変換してから代入します。これを、「short にキャストする」と言います。</p>
<div class="tab">Java</div>
<pre class=c2>
short shortValue = <em>(short)</em>intValue;
</pre>
<p>下記はクラスをキャストする例です。<a href="collection.htm#ArrayList" tppabs="http://www.tohoho-web.com/java/collection.htm#ArrayList">ArrayList</a> の get() メソッドで得た Objectクラスの値を Stringクラスにキャストしてから参照しています。</p>
<div class="tab">Java</div>
<pre class=c2>
import java.util.*;

class CastTest {
    public static void main(String[] args) {
        ArrayList list = new ArrayList();
        list.add(new String("AAA"));
        list.add(new String("BBB"));
        list.add(new String("CCC"));
        for (int i = 0; i &lt; list.size(); i++) {
            <em>String s = (String)list.get(i);</em>
            System.out.println(s);
        }
    }
}
</pre>
</div>

<hr>
<div>Copyright (C) 2004-2015 杜甫々</div>
<div>http://www.tohoho-web.com/java/syntax.htm</div>
<div>初版：2004年6月26日、最終更新：2015年9月14日</div>
<a href="index.htm" tppabs="http://www.tohoho-web.com/java/index.htm">[戻る]</a>
<a href="start.htm" tppabs="http://www.tohoho-web.com/java/start.htm">[前に]</a>
<a href="flow.htm" tppabs="http://www.tohoho-web.com/java/flow.htm">[次に]</a>
</body>
</html>
