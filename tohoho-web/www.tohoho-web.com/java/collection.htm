<!DOCTYPE html>
<html>
<head>
<meta charset="utf-8">
<title>とほほのJava入門 - とほほのWWW入門</title>
<meta name="viewport" content="width=device-width,initial-scale=1.0">
<link rel="stylesheet" href="../style3.css" tppabs="http://www.tohoho-web.com/style3.css">
</head>
<body>
<h2>コレクション（リスト、セット）とマップ</h2>

<a href="index.htm" tppabs="http://www.tohoho-web.com/java/index.htm">[戻る]</a>
<a href="string.htm" tppabs="http://www.tohoho-web.com/java/string.htm">[前に]</a>
<a href="package.htm" tppabs="http://www.tohoho-web.com/java/package.htm">[次に]</a>

<h4 id="CollectionMap">コレクション（リスト、セット）とマップ</h4>
<div class=i>
<p><b>コレクション</b>（<b>リスト</b>、<b>セット</b>）や <b>マップ</b> は、オブジェクトの集合を扱うための仕組みです。</p>
<table class="tb1">
<tr><th class="nowrap">カテゴリ</th><th>クラス</th><th>説明</th></tr>
<tr><td rowspan=3><b>List系</b></td><td><a href="#ArrayList">ArrayList</a></td><td>配列を扱います。</td></tr>
<tr><td><a href="#LinkedList">LinkedList</a></td><td>配列を扱います。挿入・削除が高速です。</td></tr>
<tr><td><a href="#Vector">Vector</a></td><td>配列を扱います。パフォーマンスが悪いため現在ではあまり推奨されない古いクラスです。</td></tr>
<tr><td rowspan=2><b>Set系</b></td><td><a href="#HashSet">HashSet</a></td><td>値の重複を許さない順不同の要素集合を扱います。</td></tr>
<tr><td><a href="#TreeSet">TreeSet</a></td><td>値の重複を許さないソートされたの要素集合を扱います。</td></tr>
<tr><td rowspan=2><b>Map系</b></td><td><a href="#HashMap">HashMap</a></td><td>キーと値の組からなる要素の集合を扱います。</td></tr>
<tr><td><a href="#TreeMap">TreeMap</a></td><td>キーと値の組からなる要素の集合を扱います。キーでソートされています。</td></tr>
</table>
</div>

<h4 id="ArrayList">リスト（ArrayList）</h4>
<div class=i>
<p><b>ArrayList</b> は配列を扱う一般的なクラスです。</p>
<div class="tab">ArrayListTest.java</div>
<pre class=c2>
import java.util.*;

class ArrayListTest {
    public static void main(String[] args) {
        <em>ArrayList list = new ArrayList()</em>;
        list.<em>add("AAA")</em>;
        list.add("BBB");
        list.add("CCC");
        for (int i = 0; i &lt; list<em>.size()</em>; i++) {
            System.out.println(list.<em>get(i)</em>);
        }
    }
}
</pre>
<p>下記などのメソッドが用意されています。</p>
<ul>
<li>list.add(o) - オブジェクト o を配列の末尾に追加する
<li>list.add(n, o) - オブジェクトを n で指定した場所に追加する
<li>list.get(n) - n番目の要素を得る
<li>list.remove(n) - n番目の要素を削除する
<li>list.set(n, o) - n番目の要素をオブジェクト o で置き換える
<li>list.size() - 要素の個数を得る
<li>list.isEmpty() - 空かどうか調べる
<li>list.indexOf(o) - オブジェクト o と等しい要素のインデックスを探す
<li>list.contains(o) - オブジェクト o と等しい要素があるか調べる
<li>list.addAll(list2) - 配列の末尾に配列 list2 を追加する
</ul>
</div>

<h4 id="LinkedList">リスト（LinkedList）</h4>
<div class=i>
<p><b>LinkedList</b> も <a href="#ArrayList">ArrayList</a> と同じように使用することができます。挿入や削除を頻繁に行う場合は ArrayList よりも LinkedList の方が高速です。ただし、get() による参照は ArrayList の方が高速です。</p>
<div class="tab">LinkedListTest.java</div>
<pre class=c2>
import java.util.*;

class LinkedListTest {
    public static void main(String[] args) {
        <em>LinkedList list = new LinkedList();</em>
        list.add("AAA");
        list.add("BBB");
        list.add("CCC");
        for (int i = 0; i &lt; list.size(); i++) {
            System.out.println(list.get(i));
        }
    }
}
</pre>
</div>

<h4 id="Vector">リスト（Vector）</h4>
<div class=i>
<p><b>Vector</b> クラスも <a href="#ArrayList">ArrayList</a> や <a href="#LinkedList">LinkedList</a> と同じように扱うことができますが、パフォーマンスが悪いため、現在ではあまり推奨されていません。</p>
</div>

<h4 id="HashSet">セット（HashSet）</h4>
<div class=i>
<p><b>HashSet</b> も配列を扱いますが、要素の重複が許されない、順序の保障が無い点が ArrayList や LinkedList と異なります。要素を参照する際には <b>Iterator</b> を用います。</p>
<div class="tab">HashSetTest.java</div>
<pre class=c2>
import java.util.*;

class HashSetTest {
    public static void main(String[] args) {
        <em>HashSet set = new HashSet();</em>
        set.add("AAA");
        set.add("BBB");
        set.add("CCC");
        set.add("AAA");
        <em>Iterator it = set.iterator();</em>
        while (<em>it.hasNext()</em>) {
            System.out.println(<em>it.next()</em>);
        }
    }
}
</pre>
<p>実行結果は下記のようになります。AAA を 2回 add() していますが、重複要素がひとつにマージされます。結果の順序は add() した順序に関係なくバラバラになります。</p>
<pre class=dos>
C:\java&gt;<kbd>java HashSetTest</kbd>
CCC
AAA
BBB
</pre>
<p>下記などのメソッドが用意されています。</p>
<ul>
<li>set.add(o) - オブジェクト o を配列の末尾に追加する
<li>set.clear() - 配列をクリアする
<li>set.contains(o) - オブジェクト o と等しい要素があるか調べる
<li>set.isEmpty() - 空かどうか調べる
<li>set.remove(o) - オブジェクト o にマッチする要素を削除する
<li>set.size() - 要素の個数を得る
</ul>
</div>

<h4 id="TreeSet">セット（TreeSet）</h4>
<div class=i>
<p><b>TreeSet</b> も <a href="#HashSet">HashSet</a> と同じように使用できます。要素が自動的にソートされる点が HashSet と異なります。</p>
<div class="tab">HashSetTest.java</div>
<pre class=c2>
import java.util.*;

class TreeSetTest {
    public static void main(String[] args) {
        <em>TreeSet set = new TreeSet();</em>
        set.add("CCC");
        set.add("AAA");
        set.add("BBB");
        set.add("AAA");
        Iterator it = set.iterator();
        while (it.hasNext()) {
            System.out.println(it.next());
        }
    }
}
</pre>
<pre class=dos>
C:\java&gt;<kbd>java TreeSetTest</kbd>
AAA
BBB
CCC
</pre>
</div>

<h4 id="HashMap">マップ（HashMap）</h4>
<div class=i>
<p><b>HashMap</b> は、名前（キー）と値の組み合わせを要素として持つ配列です。</p>
<div class="tab">HashMapTest.java</div>
<pre class=c2>
import java.util.*;

class HashMapTest {
    public static void main(String[] args) {
        <em>HashMap map = new HashMap();</em>
        map<em>.put("Name", "Tanaka")</em>;
        map.put("Age", new Integer(26));
        System.out.println("Name = " + map<em>.get("Name")</em>);
        System.out.println("Age = " + map.get("Age"));
    }
}
</pre>
<pre class=dos>
C:\java&gt;<kbd>java HashMapTest</kbd>
Name = Tanaka
Age = 26
</pre>
<p>すべての要素を参照するには下記のようにします。</p>
<div class="tab">Java</div>
<pre class=c2>
        <em>Iterator it = map.keySet().iterator();</em>
        while (it.hasNext()) {
            Object o = it.next();
            System.out.println(o + " = " + map.get(o));
        }
</pre>
</div>

<h4 id="TreeMap">マップ（TreeMap）</h4>
<div class=i>
<p><b>TreeMap</b> も <a href="#HashMap">HashMap</a> と同じように使用できます。要素がキーによって自動的にソートされる点が HashMap と異なります。</p>
<div class="tab">TreeMapTest.java</div>
<pre class=c2>
import java.util.*;

class TreeMapTest {
    public static void main(String[] args) {
        <em>TreeMap map = new TreeMap();</em>
        map.put("Name", "Tanaka");
        map.put("Age", new Integer(26));
        Iterator it = map.keySet().iterator();
        while (it.hasNext()) {
            Object o = it.next();
            System.out.println(o + " = " + map.get(o));
        }
    }
}
</pre>
</div>

<hr>
<div>http://www.tohoho-web.com/java/collection.htm</div>
<div>初版：2004年11月28日、最終更新：2004年11月28日</div>
<a href="index.htm" tppabs="http://www.tohoho-web.com/java/index.htm">[戻る]</a>
<a href="string.htm" tppabs="http://www.tohoho-web.com/java/string.htm">[前に]</a>
<a href="package.htm" tppabs="http://www.tohoho-web.com/java/package.htm">[次に]</a>
</body>
</html>
