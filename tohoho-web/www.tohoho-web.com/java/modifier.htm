<!DOCTYPE html>
<html>
<head>
<meta charset="utf-8">
<title>とほほのJava入門 - とほほのWWW入門</title>
<meta name="viewport" content="width=device-width,initial-scale=1.0">
<link rel="stylesheet" href="../style3.css" tppabs="http://www.tohoho-web.com/style3.css">
</head>
<body>
<h2>修飾子</h2>

<a href="index.htm" tppabs="http://www.tohoho-web.com/java/index.htm">[戻る]</a>
<a href="flow.htm" tppabs="http://www.tohoho-web.com/java/flow.htm">[前に]</a>
<a href="class.htm" tppabs="http://www.tohoho-web.com/java/class.htm">[次に]</a>

<h4 id="modifier">修飾子一覧</h4>
<div class=i>
<p>クラス、インタフェース、メソッド、コンストラクタ、変数には、下記の <b>修飾子</b> を指定することができます。</p>
<table class="tb1">
<tr><th class="nowrap">修飾子</th><th>クラス</th><th>インタ<br>フェース</th><th>メソッド</th><th>コンスト<br>ラクタ</th><th>ブロック</th><th>変数</th><th>説明</th></tr>
<tr><td><a href="#access">public</a></td>              <td>○</td><td>○</td><td>○</td><td>○</td><td>×</td><td>○</td><td>アクセス修飾子</td></tr>
<tr><td><a href="#access">protected</a></td>           <td>○</td><td>○</td><td>○</td><td>○</td><td>×</td><td>○</td><td>アクセス修飾子</td></tr>
<tr><td><a href="#access">private</a></td>             <td>○</td><td>○</td><td>○</td><td>○</td><td>×</td><td>○</td><td>アクセス修飾子</td></tr>
<tr><td><a href="#access">static</a></td>              <td>○</td><td>○</td><td>○</td><td>×</td><td>×</td><td>○</td><td>スタティック修飾子</td></tr>
<tr><td><a href="#final">final</a></td>                <td>○</td><td>×</td><td>○</td><td>×</td><td>×</td><td>○</td><td>ファイナル修飾子</td></tr>
<tr><td><a href="#abstract">abstract</a></td>          <td>○</td><td>○</td><td>○</td><td>×</td><td>×</td><td>×</td><td>抽象修飾子</td></tr>
<tr><td><a href="#native">native</a></td>              <td>×</td><td>×</td><td>○</td><td>×</td><td>×</td><td>×</td><td>ネイティブ修飾子</td></tr>
<tr><td><a href="#synchronized">synchronized</a></td>  <td>×</td><td>×</td><td>○</td><td>×</td><td>○</td><td>×</td><td>同期修飾子</td></tr>
<tr><td><a href="#transient">transient</a></td>        <td>×</td><td>×</td><td>×</td><td>×</td><td>×</td><td>○</td><td>一時的修飾子</td></tr>
<tr><td><a href="#volatile">volatile</a></td>          <td>×</td><td>×</td><td>×</td><td>×</td><td>×</td><td>○</td><td>揮発性修飾子</td></tr>
<tr><td><a href="#strictfp">strictfp</a></td>          <td>○</td><td>○</td><td>○</td><td>×</td><td>×</td><td>×</td><td>厳密浮動小数修飾子</td></tr>
<tr><td><a href="#const">const</a></td>                <td>×</td><td>×</td><td>×</td><td>×</td><td>×</td><td>×</td><td>定数</td></tr>
</table>
</div>

<h4 id="access">アクセス修飾子（public, protected, private）</h4>
<div class=i>
<p><b>public</b>、<b>protected</b>、<b>private</b> は <b>アクセス修飾子</b> と呼ばれ、指定した変数やクラスなどを、どの範囲から参照可能かのスコープを制御するのに用いられます。クラス、インタフェース、メソッド、コンストラクタ、変数の修飾子として利用できます。</p>
<table class="tb1">
<tr><th rowspan=2>アクセス修飾子</th><th colspan=3>自ファイル</th><th colspan=2>他ファイル</th></tr>
<tr><th>自クラス</th><th>サブクラス</th><th>他クラス</th><th>サブクラス</th><th>他クラス</th></tr>
<tr><td><b>public</b></td>   <td>○</td><td>○</td><td>○</td><td>○</td><td>○</td></tr>
<tr><td><b>protected</b></td><td>○</td><td>○</td><td>○</td><td>○</td><td>×</td></tr>
<tr><td><b>なし</b></td>     <td>○</td><td>○</td><td>○</td><td>×</td><td>×</td></tr>
<tr><td><b>private</b></td>  <td>○</td><td>×</td><td>×</td><td>×</td><td>×</td></tr>
</table>
<p>public は「すべてのクラスからの参照を許す」、protected は「他ファイル・他クラスからのアクセスをプロテクトする」、private は「自クラスからのアクセスしか許さない」という意味になります。</p>
<div class="tab">AccessTest1.java</div>
<pre class=c2>
public class AccessTest1 {

    // public, protected, 無し, privateな値の定義
    <em>public int publicValue;</em>
    <em>protected int protectedValue;</em>
    <em>/* 無し */ int normalValue;</em>
    <em>private int privateValue;</em>

    public static void main(String[] args) {
    }

    // 自ファイル・自クラスからのアクセステスト
    public AccessTest1() {
        this.publicValue = 1;
        this.protectedValue = 2;
        this.normalValue = 3;
        this.privateValue = 4;
    }
}

class AccessTest2 extends AccessTest1 {
    // 自ファイル・サブクラスからのアクセステスト
    void AccessTest2() {
        this.publicValue = 1;
        this.protectedValue = 2;
        this.normalValue = 3;
        // this.privateValue = 4;  ← アクセスできない
    }
}

class AccessTest3 {
    // 自ファイル・他クラスからのアクセステスト
    void AccessTest3() {
        AccessTest1 o = new AccessTest1();
        o.publicValue = 1;
        o.protectedValue = 2;
        o.normalValue = 3;
        // o.privateValue = 4;  ← アクセスできない
    }
}
</pre>
<div class="tab">AccessTest4.java</div>
<pre class=c2>
public class AccessTest4 extends AccessTest1 {

    public static void main(String[] args) {
    }

    // 他ファイル・サブクラスからのアクセステスト
    AccessTest4() {
        this.publicValue = 1;
        this.protectedValue = 2;
        // this.normalValue = 3;   ← アクセスできない
        // this.privateValue = 4;  ← アクセスできない
    }
}

class AccessTest5 {
    // 他ファイル・他クラスからのアクセステスト
    AccessTest5() {
        AccessTest1 o = new AccessTest1();
        o.publicValue = 1;
        // o.protectedValue = 2;  ← アクセスできない
        // o.normalValue = 3;     ← アクセスできない
        // o.privateValue = 4;    ← アクセスできない
    }
}
</pre>
</div>

<h4 id="static">スタティック修飾子（static）</h4>
<div class=i>
<p><b>static</b> は、クラスがインスタンス化されていなくても、そのクラス、メソッド、変数などを参照可能であることを示します。</p>
<div class="tab">Java</div>
<pre class=c2>
class クラス名 {
    public <em>static</em> void main(String[] args) {
        :
    }

    public <em>static</em> final double PI = 3.14159265358979323846;

    public <em>static</em> double sin(double a) {
        :
    }

    public <em>static</em> class クラスB {
        :
    }
}
</pre>
<p>例えば、java.lang.Math クラスの sin() メソッドは static 宣言されているので、java.lang.Math.sin() として呼び出すことができますが、もし、static 宣言されていなければ、下記のように呼び出す必要があります。</p>
<div class="tab">Java</div>
<pre class=c2>
// static 宣言されていれば
x = <em>java.lang.Math.sin(y);</em>                // 直接呼び出せる

// static 宣言されていなければ
<em>java.lang.Math m = new java.lang.Math();</em>  // インスタンス化が必要
x = <em>m.sin(y);</em>
</pre>
</div>

<h4 id="final">ファイナル修飾子（final）</h4>
<div class=i>
<p><b>final</b> は上書きされないことを意味します。クラスに用いた場合はサブクラスを定義できないことを、メソッドに用いた場合はサブクラスでメソッドをオーバーロードできないことを、変数に用いた場合は誰もその変数を変更できないことを意味します。</p>
<div class="tab">Java</div>
<pre class=c2>
<em>final</em> class クラス名 {
    :
}
class クラス名 {
    <em>final</em> 型 メソッド名(引数) {
        :
    }

    public static <em>final</em> double PI = 3.14159265358979323846;
}
</pre>
</div>

<h4 id="abstract">抽象修飾子（abstract）</h4>
<div class=i>
<p><b>abstract</b> は、クラス、インタフェース、メソッドが抽象的なものであり、不完全なものであることを示します。メソッド名、引数の型などのみを定義し、サブクラスが必ず実装しなくてはならない機能を明確にしておくのが主な利用目的です。</p>
<p><b>抽象クラス</b> はそのままではインスタンス化することができず、必ずサブクラスを定義して不完全なメソッドの実体を定義してから使用する必要があります。抽象クラスは通常、ひとつ以上の <b>抽象メソッド</b> を含みます。抽象メソッドはメソッド名、引数の型のみが定義されていますので、どこかでその中身を定義する必要があります。</p>
<div class="tab">Java</div>
<pre class=c2>
<em>abstract</em> class クラス名 {
        :
    <em>abstract</em> void testFunction(int a);
        :
}
</pre>
<p>インタフェースは常に抽象です。以前は下記のように abstract interface と記述していましたが、最近では書かないことが推奨されています。</p>
<div class="tab">Java</div>
<pre class=c2>
<em>abstract</em> interface クラス名 {
        :
    <em>abstract</em> void testFunction(int a);
        :
}
</pre>
<p>抽象クラスとインタフェースは用途は似ていますが、抽象クラスは抽象メソッド以外の通常のメソッドも記述できる代わりに、ひとつのクラスが複数の抽象クラスを継承することができません。</p>
</div>

<h4 id="native">ネイティブ修飾子（native）</h4>
<div class=i>
<p><b>native</b> は、メソッドが <b>ネイティブメソッド</b> であることを示します。ネイテブメソッドは型、メソッド名、引数の型といった作法のみを定義するもので、C言語など他の言語を用いてその中身を実装する必要があります。ネイティブメソッドの詳しい作成方法の説明は省略します。</p>
<div class="tab">Java</div>
<pre class=c2>
class クラス名 {
        :
    public <em>native</em> void testFunction(int a);
        :
}
</pre>
</div>

<h4 id="synchronized">同期修飾子（synchronized）</h4>
<div class=i>
<p><b>synchronized</b> 修飾子付きのメソッドがマルチスレッド環境で実行される場合、メソッドのインスタンスを対象として排他制御が行われます。ひとつのインスタンスが複数のスレッドを持つ場合は排他制御が行われますが、スレッドが複数のインスタンスで実行される場合の排他制御は行われませんので注意してください。詳細は「<a href="thread.htm" tppabs="http://www.tohoho-web.com/java/thread.htm">スレッド</a>」の章を参照してください。</p>
<div class="tab">Java</div>
<pre class=c2>
class クラス名 {
    <em>synchronized</em> void メソッド() {
        :
    }
}
</pre>
<p>上記は、下記のコードと同等の意味を持ちます。</p>
<div class="tab">Java</div>
<pre class=c2>
class クラス名 {
    void メソッド() {
        <em>synchronized (this)</em> {
            :
        }
    }
}
</pre>
</div>

<h4 id="transient">一時的修飾子（transient）</h4>
<div class=i>
<p>ディスクに保存したりネットワークで送信するために、オブジェクトの情報をバイトストリームに自動変換することをシリアライズといいますが、<b>transient</b> 修飾子付きの変数は一時的な変数であり、シリアライズの対象から除外されます。</p>
<div class="tab">Java</div>
<pre class=c2>
class クラス名 {
    <em>transient</em> String tmp;
}
</pre>
</div>

<h4 id="volatile">揮発性修飾子（volatile）</h4>
<div class=i>
<p>マルチスレッドの場合、それぞれのスレッドは性能向上のために変数のコピーを参照・変更し、その値を元の場所（メモリ）に書き戻さないことがあります。つまり、同じ変数でもスレッドによって値が異なるという現象が発生します。複数のスレッドから参照される可能性のある変数に <b>volatile</b> をつけることにより、この問題を回避することができます。</p>
<div class="tab">Java</div>
<pre class=c2>
class クラス名 {
    <em>volatile</em> int nCount;
}
</pre>
</div>

<h4 id="strictfp">厳密浮動小数修飾子（strictfp）</h4>
<div class=i>
<p><b>strictfp</b> を指定したクラスでは、float や double の浮動小数点演算がプラットフォームに依存しない、厳密な動作をすることになります。strictfp を指定しない場合の浮動小数点演算は、プラットフォームに依存し、高速だけれどもプラットフォームによって若干結果が異なります。</p>
<div class="tab">Java</div>
<pre class=c2>
<em>strictfp</em> class クラスA {
    double x, y;
        :
}
</pre>
</div>

<h4 id="const">定数修飾子（const）</h4>
<div class=i>
<p><b>const</b> は、C/C++ 言語などで値を変更することができない変数を示しますが、現在の Java ではキーワードのみが定義されており、実際に使用されるケースはありません。</p>
</div>

<hr>
<div>Copyright (C) 2004 杜甫々</div>
<div>http://www.tohoho-web.com/java/modifier.htm</div>
<div>初版：2004年6月26日、最終更新：2004年6月26日</div>
<a href="index.htm" tppabs="http://www.tohoho-web.com/java/index.htm">[戻る]</a>
<a href="flow.htm" tppabs="http://www.tohoho-web.com/java/flow.htm">[前に]</a>
<a href="class.htm" tppabs="http://www.tohoho-web.com/java/class.htm">[次に]</a>
</body>
</html>
