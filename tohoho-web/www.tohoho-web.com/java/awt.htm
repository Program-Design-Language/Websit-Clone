<!DOCTYPE html>
<html>
<head>
<meta charset="utf-8">
<title>とほほのJava入門 - とほほのWWW入門</title>
<meta name="viewport" content="width=device-width,initial-scale=1.0">
<link rel="stylesheet" href="../style3.css" tppabs="http://www.tohoho-web.com/style3.css">
</head>
<body>
<h2>AWT</h2>

<a href="index.htm" tppabs="http://www.tohoho-web.com/java/index.htm">[戻る]</a>
<a href="file.htm" tppabs="http://www.tohoho-web.com/java/file.htm">[前に]</a>
<a href="swing.htm" tppabs="http://www.tohoho-web.com/java/swing.htm">[次に]</a>

<h4 id="AWT">AWTとは</h4>
<div class=i>
<p><b>AWT</b>（Abstract Windowing Tools）は、Java で GUIアプリケーションを作成するためのクラスライブラリです。現在では <a href="swing.htm" tppabs="http://www.tohoho-web.com/java/swing.htm">Swing</a> もよく利用されていますが、Swing よりも軽い GUIアプリケーションを作成することが可能です。</p>
</div>

<h4 id="Frame">フレーム（Frame）</h4>
<h5>◆ サンプル</h5>
<div class=i>
<div><img src="image/border-spacing.htm" tppabs="http://www.tohoho-web.com/java/image/Frame.jpg" width=200 height=100 alt="Button"></div>
</div>
<h5>◆ 説明</h5>
<div class=i>
<p><b>フレーム</b>（<b>Frame</b>）はウインドウやダイアログの基本となるものです。</p>
</div>
<h5>◆ ソース</h5>
<div class=i>
<div class="tab">FrameTest.java</div>
<pre class=c2>
<em>import java.awt.*;</em>

public class FrameTest <em>extends Frame</em> {
    public static void main(String [] args) {
        new FrameTest();
    }
    FrameTest() {
        <em>super("FrameTest");</em>
        <em>setSize(200, 100);</em>
        <em>show();</em>
    }
}
</pre>
<ul>
<li>java.awt.* をインポートします。
<li>アプリケーションを Frame クラスのサブクラスとして実装します。
<li>super() で親クラスのコンストラクタを呼び出します。
<li>setSize() でフレームのサイズを指定します。
<li>show() でフレームを表示します。
</ul>
</div>
<h5>◆ 実行方法</h5>
<div class=i>
<p>FrameTest.java をコンパイルして実行してみましょう。200×100 の大きさのウィンドウ（フレーム）が表示されれば成功です。</p>
<pre class=dos>
C:\java&gt;<kbd>javac FrameTest.java</kbd>
C:\java&gt;<kbd>java FrameTest</kbd>
</pre>
<p>ウィンドウを閉じる機能が実装されていないので、コマンドプロンプトで Ctrl-C を入力して終了させてください。</p>
<pre class=dos>
C:\java&gt;java FrameTest
<kbd>Ctrl-C</kbd>    <span class=ex>← Ctrlキーを押しながらCキーを押す</span>
</pre>
</div>

<h4 id="Button">ボタン（Button）</h4>
<h5>◆ サンプル</h5>
<div class=i>
<div><img src="image/empty-cells.htm" tppabs="http://www.tohoho-web.com/java/image/Button.jpg" width=200 height=100 alt="Button"></div>
</div>
<h5>◆ 説明</h5>
<div class=i>
<p><b>ボタン</b>（<b>Button</b>）を配置します。</p>
</div>
<h5>◆ ソース</h5>
<div class=i>
<div class="tab">ButtonTest.java</div>
<pre class=c2>
import java.awt.*;

public class ButtonTest extends Frame {
    public static void main(String [] args) {
        new ButtonTest();
    }
    ButtonTest() {
        super("ButtonTest");
        setSize(200, 100);
        setLayout(new FlowLayout());
        <em>Button b1 = new Button("OK");</em>
        <em>add(b1);</em>
        show();
    }
}
</pre>
</div>
<h5>◆ 備考</h5>
<div class=i>
<ul>
<li>ボタンが押されるのを監視する → ActionListener
</ul>
</div>

<h4 id="Label">ラベル（Label）</h4>
<h5>◆ サンプル</h5>
<div class=i>
<div><img src="image/quotes.htm" tppabs="http://www.tohoho-web.com/java/image/Label.jpg" width=200 height=100 alt="Label"></div>
</div>
<h5>◆ 説明</h5>
<div class=i>
<p><b>ラベル</b>（<b>Label</b>）を配置します。</p>
</div>
<h5>◆ ソース</h5>
<div class=i>
<div class="tab">LabelTest.java</div>
<pre class=c2>
import java.awt.*;

public class LabelTest extends Frame {
    public static void main(String [] args) {
        new LabelTest();
    }
    LabelTest() {
        super("LabelTest");
        setSize(200, 100);
        setLayout(new FlowLayout());
        <em>Label l1 = new Label("HelloWorld!!");</em>
        add(l1);
        show();
    }
}
</pre>
</div>

<h4 id="TextField">テキストフィールド（TextField）</h4>
<h5>◆ サンプル</h5>
<div class=i>
<div><img src="image/content.htm" tppabs="http://www.tohoho-web.com/java/image/TextField.jpg" width=200 height=100 alt="TextField"></div>
</div>
<h5>◆ 説明</h5>
<div class=i>
<p><b>テキストフィールド</b>（<b>TextField</b>）を配置します。</p>
</div>
<h5>◆ ソース</h5>
<div class=i>
<div class="tab">TextFieldTest.java</div>
<pre class=c2>
import java.awt.*;

public class TextFieldTest extends Frame {
    public static void main(String [] args) {
        new TextFieldTest();
    }
    TextFieldTest() {
        super("TextFieldTest");
        setSize(200, 100);
        setLayout(new FlowLayout());
        <em>TextField t1 = new TextField("Hello World!!");</em>
        add(t1);
        show();
    }
}
</pre>
</div>
<h5>◆ 備考</h5>
<div class=i>
<ul>
<li>テキストの内容を参照する → textField.getText()
<li>テキストの内容を設定する → textField.setText()
</ul>
</div>

<h4 id="TextArea">テキストエリア（TextArea）</h4>
<h5>◆ サンプル</h5>
<div class=i>
<div><img src="image/counter-reset.htm" tppabs="http://www.tohoho-web.com/java/image/TextArea.jpg" width=200 height=100 alt="TextArea"></div>
</div>
<h5>◆ 説明</h5>
<div class=i>
<p><b>テキストエリア</b>（<b>TextArea</b>）を配置します。</p>
</div>
<h5>◆ ソース</h5>
<div class=i>
<div class="tab">TextAreaTest.java</div>
<pre class=c2>
import java.awt.*;

public class TextAreaTest extends Frame {
    public static void main(String [] args) {
        new TextAreaTest();
    }
    TextAreaTest() {
        super("TextAreaTest");
        setSize(200, 100);
        setLayout(new FlowLayout());
        <em>TextArea b1 = new TextArea("Hello World!!", 3, 20);</em>
        add(b1);
        show();
    }
}
</pre>
</div>
<h5>◆ 備考</h5>
<div class=i>
<ul>
<li>テキストの内容を参照する → textArea.getText()
<li>テキストの内容を設定する → textArea.setText()
</ul>
</div>

<h4 id="Checkbox">チェックボックス（Checkbox）</h4>
<h5>◆ サンプル</h5>
<div class=i>
<div><img src="image/counter-increment.htm" tppabs="http://www.tohoho-web.com/java/image/Checkbox.jpg" width=200 height=100 alt="Checkbox"></div>
</div>
<h5>◆ 説明</h5>
<div class=i>
<p><b>チェックボックス</b>（<b>Checkbox</b>）を配置します。</p>
</div>
<h5>◆ ソース</h5>
<div class=i>
<div class="tab">CheckboxTest.java</div>
<pre class=c2>
import java.awt.*;

public class CheckboxTest extends Frame {
    public static void main(String [] args) {
        new CheckboxTest();
    }
    CheckboxTest() {
        super("CheckboxTest");
        setSize(200, 100);
        setLayout(new FlowLayout());
        <em>Checkbox c1 = new Checkbox("OK?");</em>
        add(c1);
        show();
    }
}
</pre>
</div>
<h5>◆ 備考</h5>
<div class=i>
<ul>
<li>チェックボックスのオンオフを監視する → ItemListener、ActionListener
<li>現在の状態を調べる → checkbox.getState()
<li>オン・オフを設定する → checkbox.setState(true)
</ul>
</div>

<h4 id="Choice">チョイス（Choice）</h4>
<h5>◆ サンプル</h5>
<div class=i>
<div><img src="image/marker-offset.htm" tppabs="http://www.tohoho-web.com/java/image/Choice.jpg" width=200 height=100 alt="Choice"></div>
</div>
<h5>◆ 説明</h5>
<div class=i>
<p><b>チョイス</b>（<b>Choice</b>）を配置します。</p>
</div>
<h5>◆ ソース</h5>
<div class=i>
<div class="tab">ChoiceTest.java</div>
<pre class=c2>
import java.awt.*;

public class ChoiceTest extends Frame {
    public static void main(String [] args) {
        new ChoiceTest();
    }
    ChoiceTest() {
        super("ChoiceTest");
        setSize(200, 100);
        setLayout(new FlowLayout());
        <em>Choice c1 = new Choice();</em>
        <em>c1.add("ChoiceA");</em>
        <em>c1.add("ChoiceB");</em>
        <em>c1.add("ChoiceC");</em>
        add(c1);
        show();
    }
}
</pre>
</div>
<h5>◆ 備考</h5>
<div class=i>
<ul>
<li>変更を監視する → ItemListener の延長で itemevent.getItem()
<li>選択中の項目名を得る → choice.getSelectedItem()
<li>選択中の項目インデックスを得る → choice.getSelectedIndex()
<li>n番目の項目名を得る → choice.getItem()
<li>項目数を得る → choice.getItemCount()
<li>項目を追加する → choice.add()
<li>項目を削除する → choice.remove()
</ul>
</div>

<h4 id="List">リスト（List）</h4>
<h5>◆ サンプル</h5>
<div class=i>
<div><img src="image/size.htm" tppabs="http://www.tohoho-web.com/java/image/List.jpg" width=200 height=100 alt="List"></div>
</div>
<h5>◆ 説明</h5>
<div class=i>
<p><b>リスト</b>（<b>List</b>）を配置します。</p>
</div>
<h5>◆ ソース</h5>
<div class=i>
<div class="tab">ListTest.java</div>
<pre class=c2>
import java.awt.*;

public class ListTest extends Frame {
    public static void main(String [] args) {
        new ListTest();
    }
    ListTest() {
        super("ListTest");
        setSize(200, 100);
        setLayout(new FlowLayout());
        <em>List list1 = new List();</em>
        <em>list1.add("ListA");</em>
        <em>list1.add("ListB");</em>
        add(list1);
        show();
    }
}
</pre>
</div>
<h5>◆ 備考</h5>
<div class=i>
<ul>
<li>項目の選択状態を監視する → ItemListener で list.getSelectedItem()
<li>項目のダブルクリックを監視する → ActionListener で list.getSelectedItem()
<li>選択中の項目名を得る → list.getSelectedItem()
<li>選択中の項目インデックスを得る → list.getSelectedIndex()
<li>n番目の項目名を得る → list.getItem()
<li>項目数を得る → list.getItemCount()
<li>項目を追加する → list.add()
<li>項目を削除する → list.remove()
</ul>
</div>

<h4 id="Scrollbar">スクロールバー（Scrollbar）</h4>
<h5>◆ サンプル</h5>
<div class=i>
<div><img src="image/marks.htm" tppabs="http://www.tohoho-web.com/java/image/Scrollbar.jpg" width=200 height=100 alt="Scrollbar"></div>
</div>
<h5>◆ 説明</h5>
<div class=i>
<p><b>スクロールバー</b>（<b>Scrollbar</b>）は、スクロールバーを表示します。スクロールバーの動きに従って部品を自動的にスクロールさせるには、ScrollPane を利用します。</p>
</div>
<h5>◆ ソース</h5>
<div class=i>
<div class="tab">ScrollbarTest.java</div>
<pre class=c2>
import java.awt.*;

public class ScrollbarTest extends Frame {
    public static void main(String [] args) {
        new ScrollbarTest();
    }
    ScrollbarTest() {
        super("ScrollbarTest");
        setSize(200, 100);
        <em>setLayout(new BorderLayout());</em>
        <em>Scrollbar sb1 = new Scrollbar(Scrollbar.HORIZONTAL);</em>
        <em>add(sb1, BorderLayout.SOUTH);</em>
        show();
    }
}
</pre>
</div>
<h5>◆ 備考</h5>
<div class=i>
<ul>
<li>スクロールを監視する → AdjustmentListener
<li>現在のスクロール位置を得る → scrollbar.getValue()
</ul>
</div>

<h4 id="Canvas">キャンバス（Canvas）</h4>
<h5>◆ サンプル</h5>
<div class=i>
<div><img src="image/orphans.htm" tppabs="http://www.tohoho-web.com/java/image/Canvas.jpg" width=200 height=100 alt="Canvas"></div>
</div>
<h5>◆ 説明</h5>
<div class=i>
<p><b>キャンバス</b>（<b>Canvas</b>）は、線、丸、矩形などの図形を描画する際に用いられる部品です。通常、Canvas クラスのサブクラスを定義して使用します。paint() は、show() や repaint() が呼ばれたときや、隠れていたウィンドウが表に表示されるときなどに自動的に呼び出されるメソッドです。</p>
</div>
<h5>◆ ソース</h5>
<div class=i>
<div class="tab">CanvasTest.java</div>
<pre class=c2>
import java.awt.*;

class CanvasTest extends Frame {
    public static void main(String[] args) {
        new CanvasTest();
    }
    CanvasTest() {
        super("CanvasTest");
        setSize(200, 100);
        setLayout(new BorderLayout());
        <em>MyCanvas mc1 = new MyCanvas();</em>
        <em>add(mc1, BorderLayout.CENTER);</em>
        show();
    }
}

class MyCanvas <em>extends Canvas</em> {
    public void paint(Graphics g) {
        g.drawLine(10, 10, 120, 40);
    }
}
</pre>
</div>
<h5>◆ 備考</h5>
<div class=i>
<ul>
<li>マウスの動きを監視する → MouseListener、MouseMotionListener
<li>描画する → paint()
<li>再描画を指示する → repaint()
</ul>
</div>

<h4 id="Menu">メニュー（Menu）</h4>
<h5>◆ サンプル</h5>
<div class=i>
<div><img src="image/widows.htm" tppabs="http://www.tohoho-web.com/java/image/Menu.jpg" width=200 height=125 alt="Menu"></div>
</div>
<h5>◆ 説明</h5>
<div class=i>
<p>メニューは、主に下記の4種類のオブジェクトから構成されます。</p>
<table class="tb1">
<tr><th>クラス</th><th>説明</th></tr>
<tr><td><b>MenuBar</b></td><td><b>メニューバー</b>。</td></tr>
<tr><td><b>Menu</b></td><td><b>メニュー</b>。子アイテムを持つメニュー項目。</td></tr>
<tr><td><b>MenuItem</b></td><td><b>メニューアイテム</b>。子アイテムを持たないメニュー項目。</td></tr>
<tr><td><b>CheckboxMenuItem</b></td><td>チェックタイプのメニューアイテム。</td></tr>
</table>
<p>実行例では、下記の階層構造をもつメニューバーを実装しています。</p>
<table>
<tr>
<td class="top">
<pre style="line-height:100%; width:150px; border:1px solid gray; padding:3px;">
<span class="mr">■</span> MenuBar
<span class="mr">├□</span> File
<span class="mr">│├○</span> Open Ctrl+O
<span class="mr">│└○</span> Exit
<span class="mr">└□</span> View
<span class="mr">　├◎</span> Status Bar
<span class="mr">　└□</span> Size
<span class="mr">　　├○</span> Large
<span class="mr">　　└○</span> Small
</pre>
</td>
<td>
<pre>
<span class="mr">■</span> MenuBar
<span class="mr">□</span> Menu
<span class="mr">○</span> MenuItem
<span class="mr">◎</span> CheckboxMenuItem
</pre>
</td>
</tr>
</table>
</div>
<h5>◆ ソース</h5>
<div class=i>
<div class="tab">MenuTest.java</div>
<pre class=c2>
import java.awt.*;
import java.awt.event.*;

class MenuTest extends Frame implements ActionListener, ItemListener {
    public static void main(String[] args) {
        new MenuTest();
    }
    MenuTest() {
        setTitle("MenuTest");
        setSize(200, 120);
        setLayout(new FlowLayout());
        <em>MenuBar menuBar = new MenuBar();</em>
        <em>setMenuBar(menuBar);</em>
        // [File]
        <em>Menu menuFile = new Menu("File");</em>
        <em>menuFile.addActionListener(this);</em>
        <em>menuBar.add(menuFile);</em>
        // [File]-[Open]
        <em>MenuItem menuOpen = new MenuItem("Open...", new MenuShortcut('O'));</em>
        <em>menuFile.add(menuOpen);</em>
        // [File]-[----]
        <em>menuFile.addSeparator();</em>
        // [File]-[Exit]
        <em>MenuItem menuExit = new MenuItem("Exit");</em>
        <em>menuFile.add(menuExit);</em>
        // [View]
        <em>Menu menuView = new Menu("View");</em>
        <em>menuView.addActionListener(this);</em>
        <em>menuBar.add(menuView);</em>
        // [View]-[Status Bar]
        <em>CheckboxMenuItem menuStatusBar = new CheckboxMenuItem("Status Bar");</em>
        <em>menuStatusBar.addItemListener(this);</em>
        <em>menuView.add(menuStatusBar);</em>
        // [View]-[Size]
        <em>Menu menuSize = new Menu("Size");</em>
        <em>menuSize.addActionListener(this);</em>
        <em>menuView.add(menuSize);</em>
        // [View]-[Size]-[Large]
        <em>MenuItem menuSizeLarge = new MenuItem("Large");</em>
        <em>menuSize.add(menuSizeLarge);</em>
        // [View]-[Size]-[Small]
        <em>MenuItem menuSizeSmall = new MenuItem("Small");</em>
        <em>menuSize.add(menuSizeSmall);</em>
        show();
    }
    public void actionPerformed(ActionEvent e) {
        System.out.println(e.getActionCommand());
    }
    public void itemStateChanged(ItemEvent e) {
        CheckboxMenuItem menu = (CheckboxMenuItem)e.getSource();
        if (menu.getState()) {
            System.out.println(menu.getLabel() + " SELECTED");
        } else {
            System.out.println(menu.getLabel() + " DESELECTED");
        }
    }
}
</pre>
</div>
<h5>◆ 備考</h5>
<div class=i>
<ul>
<li>メニューバー → MenuBar
<li>子メニューを持つメニュー → Menu
<li>子要素を持たないメニュー → MenuItem または CheckboxMenuItem
<li>MenuItem の実行を監視する → 親の Menu オブジェクトに ActionListener
<li>CheckboxMenuItem の実行を監視する → ItemListener
<li>セパレータを追加する → menu.addSeparator()
<li>MenuItem を識別する → menuitem.getActionCommand()
<li>CheckboxMenuItem を識別する → checkboxmenuitem.getLabel()
</ul>
</div>

<h4 id="Dialog">ダイアログ（Dialog）</h4>
<h5>◆ サンプル</h5>
<div class=i>
<div><img src="image/position.htm" tppabs="http://www.tohoho-web.com/java/image/Dialog.jpg" width=200 height=100 alt="Dialog"></div>
</div>
<h5>◆ 説明</h5>
<div class=i>
<p><b>ダイアログ</b> を表示するには、<b>Dialog</b> クラスのサブクラスを作成してダイアログの名前や機能を定義し、これを show() メソッドで表示します。ダイアログの作り方や、作法、ダイアログ上への部品の配置方法はフレームと同様です。</p>
</div>
<h5>◆ ソース</h5>
<div class=i>
<div class="tab">DialogTest.java</div>
<pre class=c2>
import java.awt.*;
import java.awt.event.*;

class DialogTest extends Frame {
    public static void main(String[] args) {
        new DialogTest();
    }
    DialogTest() {
        super("DialogTest");
        setSize(200, 100);
        <em>MyDialog dlg = new MyDialog(this);</em>
        <em>dlg.show();</em>
        show();
    }
}

<em>class MyDialog extends Dialog implements ActionListener</em> {
    MyDialog(Frame owner) {
        super(owner);
        setLayout(new FlowLayout());
        Button b1 = new Button("OK");
        b1.addActionListener(this);
        add(b1);
        setTitle("MyDialog");
        setSize(80, 80);
    }
    public void actionPerformed(ActionEvent e) {
        hide();
    }
}
</pre>
</div>

<hr>
<div>http://www.tohoho-web.com/java/awt.htm</div>
<div>初版：2004年6月26日、最終更新：2004年6月26日</div>
<a href="index.htm" tppabs="http://www.tohoho-web.com/java/index.htm">[戻る]</a>
<a href="file.htm" tppabs="http://www.tohoho-web.com/java/file.htm">[前に]</a>
<a href="swing.htm" tppabs="http://www.tohoho-web.com/java/swing.htm">[次に]</a>
</body>
</html>
