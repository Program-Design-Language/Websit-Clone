<html>
<head>
<meta http-equiv="Content-Type" content="text/html; charset=Shift_JIS">
<title>CGIでこの処理許されますか?</title>
<link rel="stylesheet" href="../style.css" tppabs="http://www.tohoho-web.com/lng/style.css">
</head>
<body>
<h3>CGIでこの処理許されますか?</h3>
<a href="index.htm" tppabs="http://www.tohoho-web.com/lng/199906/index.htm">[上に]</a>
<a href="99060091.htm" tppabs="http://www.tohoho-web.com/lng/199906/99060091.htm">[前に]</a>
<a href="99060093.htm" tppabs="http://www.tohoho-web.com/lng/199906/99060093.htm">[次に]</a>
<hr>
<span class=name>じぇい</span>
<span class=time>1999/06/09(水) 22:37:56</span><br>
え〜、、質問内容が見えない題名なのですが、、（うまく表現できませんでした。）、前に一度同じようなことを質問したのですが、また、気になってしまいました。<br>
<br>
質問内容は、どの程度の大きさの処理までだったら一般的に許されるか、、ということなのですが、。<br>
現在メーリングリストを一応完成させています。その処理の中で、多分最も大きな処理であると考えられるのが「検索」です。<br>
具体的には、年齢と性別と居住地を指定して、すべてのファイルから適したデータを50件ずつ表示するというものです。<br>
<br>
1,すべてのデータをファイルから取り出して、一行ずつ配列に格納していく。<br>
2,foreachで配列ひとつひとつに処理を与える。<br>
3,与える処理は、まず、splitでそれぞれ「,」でばらし、年齢、性別、居住地がマッチするものだけを取り出す。<br>
<br>
もし、最も効率が悪くなった場合は3の処理を最後までやることになります。（すなわちすべてのデータをsplitでばらして、それぞれマッチするかどうかを調べることになります。）<br>
また、一つのデータ（一行当たり）は最高でも500バイト平均300バイトくらいです。<br>
<br>
データの数は1000あっても許されるでしょうか?（サーバーに負担がかかり過ぎるかどうかという意味で。）<br>
もしくは、ファイルに収めるデータの数はどれくらいまでだったら大丈夫でしょうか?（一般的に。）<br>
<hr>
<span class=name>B-Cus</span>
<span class=time>1999/06/09(水) 23:24:43</span><br>
この手の質問には、答えは存在しないでしょうね。<br>
<br>
マシンのスペックにもよりますし、そのマシンを何人が使ってるか、<br>
他のプロセスがどれくらい動いているかにもよります。そもそも<br>
許す/許さないを判断する普遍的な基準など存在しません。<br>
# マシンのスペックを教えろ、と言っているのではありません。念のため。<br>
<br>
しかも実際負荷がかかってるかどうかは、ユーザにしかわかりませんので、<br>
外部の者からは何も言えません。<br>
<br>
結論としては、大丈夫かもしれないし、大丈夫じゃないかもしれない。<br>
<br>
<font color="#CC8000">&gt; 具体的には、年齢と性別と居住地を指定して、すべてのファイルから</font><br>
<font color="#CC8000">&gt; 適したデータを50件ずつ表示するというものです。</font><br>
ちゃんとしたデータベースは、事前に値のハッシュを作成して、<br>
インデックスを作っておきます。検索時はインデックスを参照するので、<br>
全てのファイルをなめ回すようなことはしません。UNIX+perlで簡単に<br>
やるなら、dbmopenあたりを使うのも一つの手です(perl5ならtieだっけ?)。<br>
<br>
もちろん、データの規模にもよりますので、全てのファイルをなめる<br>
方法が絶対ダメというわけではありません。<br>
<br>
…とまぁ、全然参考にならん答えですが、これ以上は何とも言えません。<br>
<hr>
<span class=name>じぇい</span>
<span class=time>1999/06/09(水) 23:29:16</span><br>
そうですか、、。<br>
わかりました。なんとかやってみます。<br>
<br>
<font color="#CC8000">＞ちゃんとしたデータベースは、事前に値のハッシュを作成して、</font><br>
<font color="#CC8000">＞インデックスを作っておきます。</font><br>
削除処理のほうではこれを行っています。<br>
検索のほうでもやってみます。（できれば大きなデータを扱いたいので）<br>
<br>
ご回答どうもありがとうございました。<br>
<hr>
<span class=name>じぇい</span>
<span class=time>1999/06/09(水) 23:29:43</span><br>
<span class=resolv>[[解決]]</span><br>
解決押すの忘れてました。。。<br>
<hr>
<span class=name>じぇい</span>
<span class=time>1999/06/09(水) 23:54:17</span><br>
あっ、、すいません。<br>
<font color="#CC8000">＞削除処理のほうではこれを行っています。</font><br>
削除処理では別の方法を行っていました。（どうでもいいんですが）<br>
<br>
それで、ちゃんと意味がわかってなかったんですが、<br>
<font color="#CC8000">＞ちゃんとしたデータベースは、事前に値のハッシュを作成して、</font><br>
<font color="#CC8000">＞インデックスを作っておきます。</font><br>
なんとなく感覚はつかめるのですが、、ハッシュを作成しておく、、というのは、別に、そのデータへのショートカットみたいなものを検索用に作っておく、、というようなものですか？<br>
簡単な例ではどんな感じのものがあるでしょうか？<br>
<hr>
<span class=name>B-Cus</span>
<span class=time>1999/06/10(木) 00:47:35</span><br>
一例ですが…<br>
<br>
$data=&lt;&lt;END;<br>
root:*:0:0:Charlie &amp;:/root:/bin/csh<br>
toor:*:0:0:Bourne-again Superuser:/root:<br>
daemon:*:1:1:Owner of many system processes:/root:/sbin/nologin<br>
operator:*:2:5:System &amp;:/usr/guest/operator:/bin/csh<br>
bin:*:3:7:Binaries Commands and Source,,,:/:/sbin/nologin<br>
games:*:7:13:Games pseudo-user:/usr/games:/sbin/nologin<br>
news:*:8:8:News Subsystem:/:/sbin/nologin<br>
man:*:9:9:Mister Man Pages:/usr/share/man:/sbin/nologin<br>
uucp:*:66:66:UUCP pseudo-user:/var/spool/uucppublic:/usr/libexec/uucp/uucico<br>
xten:*:67:67:X-10 daemon:/usr/local/xten:/sbin/nologin<br>
pop:*:68:6:Post Office Owner:/nonexistent:/sbin/nologin<br>
wnn:*:127:7:Wnn user:/nonexistent:/sbin/nologin<br>
nobody:*:65534:65534:Unprivileged user:/nonexistent:/sbin/nologin<br>
zxr400:*:1001:1001:zxr400:/home/zxr400:/usr/local/bin/tcsh<br>
cvs:*:2000:2000:CVS:/home/cvs:/nonexistent<br>
END<br>
dbmopen(%TABLE,"dbm-file",0666);<br>
foreach ( split("\n",$data) ){<br>
　($user,$pass,$uid,$gid,$gecos,$shell) = split(":");<br>
　$TABLE{$user} = $gecos;<br>
}<br>
dbmclose(TABLE);<br>
<br>
dbmopen(%TABLE2,"dbm-file",0666);<br>
print "$TABLE2{bin}\n";<br>
dbmclose(TABLE2);<br>
<br>
実行結果:<br>
　Binaries Commands and Source,,,<br>
てな感じ。<br>
<br>
要は「dbm＝perlのハッシュをそのまま格納できるファイル」です。<br>
　1,山田太郎,東京都<br>
　2,田中次郎,富山県<br>
　3,宮田三朗,東京都<br>
　　　　:<br>
という DB1 を作っておき(番号がキーね)、さらに<br>
　東京都,1:3<br>
　富山県,2<br>
　　　:<br>
という DB2 を作っておけば(こっちは県名がキー)、県名で検索したい場合、<br>
　DB2によると東京都の人は1番と3番<br>
　DB1によると1番は山田太郎、3番の人は田中次郎<br>
というのが高速に(ファイルを全部なめなくても)わかるわけで。<br>
<br>
で、こういうのを総合的にやってるのが、OracleやPostgreSQLなどの<br>
リレーショナルデータベースなわけです。<br>
<hr>
<span class=name>じぇい</span>
<span class=time>1999/06/10(木) 01:21:05</span><br>
なるほど！<br>
かなりわかりやすかったです。<br>
<br>
しかし、、ということは、年齢でも性別でも所在地でも検索したいとなったら、ファイルは3つ分作らなければいけないということですね。、、？<br>
まあ、ファイルサイズが大きくなっても、処理が早くなるほうが嬉しいのですが、、。<br>
<br>
あと、年齢だけでなく、性別や所在地すべてを指定して検索したいときは、どのような処理を行えばいいでしょうか?<br>
<br>
まずは年齢で検索して、その中で性別と所在地がマッチするものを選ぶ、、というようなことを行うのでしょうか?、、しかし、、それだと場合によっては結局総なめのような形になる可能性もあるし、、。<br>
<hr>
<span class=name>B-Cus</span>
<span class=time>1999/06/10(木) 07:44:08</span><br>
<font color="#CC8000">&gt; 年齢でも性別でも所在地でも検索したいとなったら、ファイルは</font><br>
<font color="#CC8000">&gt; 3つ分作らなければいけないということですね。、、？</font><br>
そうですね。全部 dbmでやるなら。<br>
<br>
<font color="#CC8000">&gt; まずは年齢で検索して、その中で性別と所在地がマッチするものを選ぶ、</font><br>
<font color="#CC8000">&gt; というようなことを行うのでしょうか?</font><br>
そうです、というか、年齢で検索、性別で検索、所在地で検索し、<br>
全てにマッチした人だけを表示する、と。<br>
<br>
でもまぁ、ここらへんは考え方次第で、ありうるパターンの数は<br>
　100(年齢)*2(性別)*47(所在地)<br>
ですから、キーが10000個くらいのインデックスを作っておけば一発で引けます。<br>
<br>
<font color="#CC8000">&gt; それだと場合によっては結局総なめのような形になる可能性もあるし、、。</font><br>
軽い処理ではないでしょうが、全部なめるより絶対にマシです。<br>
特に対象データが数千/数万/数十万くらいになると明らかに違うと思います。<br>
<br>
<br>
…RDBって、複数項目による検索ってどういうふうに実現してるのかなぁ。<br>
誰か教えて。<br>
<hr>
<span class=name>じぇい</span>
<span class=time>1999/06/10(木) 16:39:38</span><br>
<span class=resolv>[[解決]]</span><br>
どうもありがとうございました。<br>
一応僕の最初の質問は解決したと思うので解決を押しておきます。<br>
<br>
<font color="#CC8000">&gt;100(年齢)*2(性別)*47(所在地)</font><br>
<font color="#CC8000">&gt;ですから、キーが10000個くらいのインデックスを作っておけば一発で&gt;引けます。</font><br>
というのは、年齢、性別、所在地だけのキーを持ったインデックスとは別のもう一つファイルを作るということですね。。?<br>
<br>
<font color="#CC8000">&gt;…RDBって、複数項目による検索ってどういうふうに実現してるのかなぁ。</font><br>
それはすごい気になります。、、というかハッシュという方法自体、どういう構造になっているのでしょうか？（ポインタ、、とかそこらへんかな、、。）<br>
<hr>
<span class=name>じぇい</span>
<span class=time>1999/06/10(木) 18:15:19</span><br>
＊保存方法＊（データはコンマで区切って保存）<br>
1,メールアドレスをキーとして、その他すべてのデータを値としたハッシュを作成 %mail<br>
2,性別をキーとして、メールアドレスを値としたハッシュを作成 %sex<br>
3,年齢をキーとして、メールアドレスを値としたハッシュを作成 %age<br>
4,所在地をキーとして、メールアドレスを値としたハッシュを作成 %place<br>
<br>
＊検索方法＊（仮に性別、年齢、所在地から検索するとした場合）<br>
@sex = split(/,/, $sex[$hoge1]);<br>
@age = split(/,/, $age[$hoge2]);<br>
@place = split(/,/, $place[$hoge3]);<br>
<br>
foreach $sex (@sex){<br>
　　$data[$sex] = 1;<br>
}<br>
foreach $age (@age){<br>
　　$data[$age]++;<br>
}<br>
foreach $place (@place){<br>
　　$data[$place]++;<br>
　　if($data[$place] &lt; 3){<br>
　　　　delete $data[$place];<br>
　　}<br>
}<br>
<br>
while (($key, $value) = each(%data)) {<br>
　　push(@true_data, $mail[$key])<br>
}<br>
<br>
こんな感じでしょうか?（ファイルの入出力は省いています。）<br>
<br>
しかし、、each(%data)の部分では、ファイルの先頭から処理してくれるのでしょうか?、、じゃないとすると、、日付順にするのにまたややこしい処理が、、、。<br>
<hr>
<span class=name>じぇい</span>
<span class=time>1999/06/10(木) 18:18:55</span><br>
ありっ、、上の処理じゃだめですね、、。<br>
最後のpushのところですべてにマッチしているデータかどうか判断しないとダメですね、、。（、、とすると、、上の処理は効率の面で間違ってますかね、、?）<br>
<hr>
<span class=name>B-Cus</span>
<span class=time>1999/06/10(木) 20:48:57</span><br>
<font color="#CC8000">&gt; @sex = split(/,/, $sex[$hoge1]);</font><br>
split(/,/,$sex{$hoge1}) ですよね?<br>
ま、流れとしてはそんな感じでよろしいんじゃないかと…。<br>
<br>
<font color="#CC8000">&gt; @sex = split(/,/, $sex[$hoge1]);</font><br>
<font color="#CC8000">&gt; @age = split(/,/, $age[$hoge2]);</font><br>
これの逆引きハッシュ、例えば<br>
　$r_age{メールアドレス}=年齢、$r_sex{メールアドレス}=性別<br>
を作っておいて、<br>
　foreach ( split(/,/,$place{$hoge3}) ){<br>
　　if( $r_age{$_} == hoge2 &amp;&amp; $r_sex{$_} eq $hoge1 ){<br>
　　　push(@true_data,$_);<br>
　}<br>
とする手もあるし(一番絞り込めそうなものから順に調べる…でも遅いかも…)、<br>
<br>
<font color="#CC8000">&gt; @sex = split(/,/, $sex[$hoge1]);</font><br>
<font color="#CC8000">&gt; @age = split(/,/, $age[$hoge2]);</font><br>
<font color="#CC8000">&gt; @place = split(/,/, $place[$hoge3]);</font><br>
ここらへんを文字列でソートしておいて、3配列を先頭から<br>
順に検索していく方法もあるだろうし。<br>
<br>
どっちが高速かは僕にはわからんので、いろいろな方法で試してみてください。<br>
# いずれもガチガチのハードコーディングですが…。<br>
<br>
<font color="#CC8000">&gt; というのは、年齢、性別、所在地だけのキーを持ったインデックスとは</font><br>
<font color="#CC8000">&gt; 別のもう一つファイルを作るということですね。。?</font><br>
この文面からは理解してくれてるかどうかわからんので、コード例を出しますと、<br>
　dbmopen(%TABLE,"dbm-file",0666);<br>
　@true_data = split(",",$TABLE{"25:MALE:TOKYO"});<br>
　dbmclose(TABLE);<br>
ということです。この場合のインデックスの種類は、最高でも10000程度、という意味。<br>
<br>
DBMにはいくつか種類があって、それぞれサイズや項目数などの制限がある場合が<br>
あります。そこらへん調べておいてください(青ラクダ本に書いてあります)。<br>
# GNUのDBMは制限なしだったかな?<br>
<br>
<font color="#CC8000">&gt; ハッシュという方法自体、どういう構造になっているのでしょうか？</font><br>
値(文字列)を特定の数で割ったり余剰を取ったりすると、比較的かたよりのない数に<br>
なります。これをハッシュ値といいます。<br>
<br>
例えば「abc」ある文字列のハッシュ値が468になったとすると、その値を468の場所に<br>
格納しておきます。で、「abc」を検索する場合は、同様の処理をすると468という数が<br>
出てくるので、直接468番が格納してある場所(事前に記録しておく)に飛べば、全データを<br>
調べる必要がなくなる、と。<br>
<br>
と書くと非常に簡単に思えますが、ちゃんとした(速い)ハッシュは数学/情報工学の<br>
領域です。深いところは僕にはさっぱりわかりません。<br>
<hr>
<span class=name>じぇい</span>
<span class=time>1999/06/10(木) 23:05:33</span><br>
どうもありがとうございました。<br>
<br>
<font color="#CC8000">＞　dbmopen(%TABLE,"dbm-file",0666);</font><br>
<font color="#CC8000">＞　@true_data = split(",",$TABLE{"25:MALE:TOKYO"});</font><br>
<font color="#CC8000">＞　dbmclose(TABLE);</font><br>
<font color="#CC8000">＞ということです。この場合のインデックスの種類は、最高でも</font><br>
<font color="#CC8000">＞10000程度、という意味。</font><br>
はい、それは理解しています（つもりです。）<br>
<br>
まあ、考えてたらいろんな方法が浮かんできたので、それぞれで試してみます。まあ、メーリングリスト、、ってことに絞ったらどれでもよさそうな気もしてきましたが、、。<br>
<br>
<font color="#CC8000">＞ちゃんとした(速い)ハッシュは数学/情報工学の</font><br>
<font color="#CC8000">＞領域です。</font><br>
また勉強する機会でもできたら勉強してみます。^^;<br>
<br>
ちなみに、<br>
<font color="#CC8000">＞しかし、、each(%data)の部分では、ファイルの先頭から処理して</font><br>
<font color="#CC8000">＞くれるのでしょうか?、、じゃないとすると、、日付順にするのに</font><br>
<font color="#CC8000">＞またややこしい処理が、、、。</font><br>
この文章は無視してください。自分でもわけのわからないこと書いてました。^^;<br>
要は、どうやって、日付順にしようかな、、って悩んでただけなので。<br>
<hr>
<span class=name>じぇい</span>
<span class=time>1999/06/11(金) 00:04:16</span><br>
あっ、、あと、、<br>
dbmopenっていうのは、追加書き込みとかflockの使い方とかは、普通のopenと同じようにやっていいんでしょうか？<br>
<hr>
<span class=name>じぇい</span>
<span class=time>1999/06/11(金) 16:24:52</span><br>
すいません。<br>
らくだ本にしっかりと”現時点ではBDMファイルをロックする機能は備わっていない”と書いてました。<br>
<hr>
<a href="index.htm" tppabs="http://www.tohoho-web.com/lng/199906/index.htm">[上に]</a>
<a href="99060091.htm" tppabs="http://www.tohoho-web.com/lng/199906/99060091.htm">[前に]</a>
<a href="99060093.htm" tppabs="http://www.tohoho-web.com/lng/199906/99060093.htm">[次に]</a>
</body>
</html>
